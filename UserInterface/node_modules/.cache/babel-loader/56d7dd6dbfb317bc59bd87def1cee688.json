{"ast":null,"code":"function wait(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction waitRandom(min, max) {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)));\n}\n/**\n * This error is thrown if the function is cancelled before completing\n */\n\n\nexport class CancelledError extends Error {\n  constructor() {\n    super('Cancelled');\n  }\n\n}\n/**\n * Throw this error if the function should retry\n */\n\nexport class RetryableError extends Error {}\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\n\nexport function retry(fn, _ref) {\n  let {\n    n,\n    minWait,\n    maxWait\n  } = _ref;\n  let completed = false;\n  let rejectCancelled;\n  const promise = new Promise(async (resolve, reject) => {\n    rejectCancelled = reject;\n\n    while (true) {\n      let result;\n\n      try {\n        result = await fn();\n\n        if (!completed) {\n          resolve(result);\n          completed = true;\n        }\n\n        break;\n      } catch (error) {\n        if (completed) {\n          break;\n        }\n\n        if (n <= 0 || !(error instanceof RetryableError)) {\n          reject(error);\n          completed = true;\n          break;\n        }\n\n        n--;\n      }\n\n      await waitRandom(minWait, maxWait);\n    }\n  });\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return;\n      completed = true;\n      rejectCancelled(new CancelledError());\n    }\n  };\n}","map":{"version":3,"names":["wait","ms","Promise","resolve","setTimeout","waitRandom","min","max","Math","round","random","CancelledError","Error","constructor","RetryableError","retry","fn","n","minWait","maxWait","completed","rejectCancelled","promise","reject","result","error","cancel"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/utils/retry.ts"],"sourcesContent":["function wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)));\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nexport class CancelledError extends Error {\n  constructor() {\n    super('Cancelled');\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: { n: number; minWait: number; maxWait: number }\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false;\n  let rejectCancelled: (error: Error) => void;\n  const promise = new Promise<T>(async (resolve, reject) => {\n    rejectCancelled = reject;\n    while (true) {\n      let result: T;\n      try {\n        result = await fn();\n        if (!completed) {\n          resolve(result);\n          completed = true;\n        }\n        break;\n      } catch (error) {\n        if (completed) {\n          break;\n        }\n        if (n <= 0 || !(error instanceof RetryableError)) {\n          reject(error);\n          completed = true;\n          break;\n        }\n        n--;\n      }\n      await waitRandom(minWait, maxWait);\n    }\n  });\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return;\n      completed = true;\n      rejectCancelled(new CancelledError());\n    },\n  };\n}\n"],"mappings":"AAAA,SAASA,IAAT,CAAcC,EAAd,EAAyC;EACvC,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACD;;AAED,SAASI,UAAT,CAAoBC,GAApB,EAAiCC,GAAjC,EAA6D;EAC3D,OAAOP,IAAI,CAACM,GAAG,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACD,GAAL,CAAS,CAAT,EAAYA,GAAG,GAAGD,GAAlB,CAA3B,CAAP,CAAX;AACD;AAED;AACA;AACA;;;AACA,OAAO,MAAMK,cAAN,SAA6BC,KAA7B,CAAmC;EACxCC,WAAW,GAAG;IACZ,MAAM,WAAN;EACD;;AAHuC;AAM1C;AACA;AACA;;AACA,OAAO,MAAMC,cAAN,SAA6BF,KAA7B,CAAmC;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,KAAT,CACLC,EADK,QAGwC;EAAA,IAD7C;IAAEC,CAAF;IAAKC,OAAL;IAAcC;EAAd,CAC6C;EAC7C,IAAIC,SAAS,GAAG,KAAhB;EACA,IAAIC,eAAJ;EACA,MAAMC,OAAO,GAAG,IAAIpB,OAAJ,CAAe,OAAOC,OAAP,EAAgBoB,MAAhB,KAA2B;IACxDF,eAAe,GAAGE,MAAlB;;IACA,OAAO,IAAP,EAAa;MACX,IAAIC,MAAJ;;MACA,IAAI;QACFA,MAAM,GAAG,MAAMR,EAAE,EAAjB;;QACA,IAAI,CAACI,SAAL,EAAgB;UACdjB,OAAO,CAACqB,MAAD,CAAP;UACAJ,SAAS,GAAG,IAAZ;QACD;;QACD;MACD,CAPD,CAOE,OAAOK,KAAP,EAAc;QACd,IAAIL,SAAJ,EAAe;UACb;QACD;;QACD,IAAIH,CAAC,IAAI,CAAL,IAAU,EAAEQ,KAAK,YAAYX,cAAnB,CAAd,EAAkD;UAChDS,MAAM,CAACE,KAAD,CAAN;UACAL,SAAS,GAAG,IAAZ;UACA;QACD;;QACDH,CAAC;MACF;;MACD,MAAMZ,UAAU,CAACa,OAAD,EAAUC,OAAV,CAAhB;IACD;EACF,CAxBe,CAAhB;EAyBA,OAAO;IACLG,OADK;IAELI,MAAM,EAAE,MAAM;MACZ,IAAIN,SAAJ,EAAe;MACfA,SAAS,GAAG,IAAZ;MACAC,eAAe,CAAC,IAAIV,cAAJ,EAAD,CAAf;IACD;EANI,CAAP;AAQD"},"metadata":{},"sourceType":"module"}