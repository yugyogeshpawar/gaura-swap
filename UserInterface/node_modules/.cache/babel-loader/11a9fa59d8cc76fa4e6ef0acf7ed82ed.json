{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nvar Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case \"address\":\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n\n      return arrayify(value);\n\n    case \"string\":\n      return toUtf8Bytes(value);\n\n    case \"bytes\":\n      return arrayify(value);\n\n    case \"bool\":\n      value = value ? \"0x01\" : \"0x00\";\n\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n\n      return arrayify(value);\n  }\n\n  var match = type.match(regexNumber);\n\n  if (match) {\n    //let signed = (match[1] === \"int\")\n    var size = parseInt(match[2] || \"256\");\n\n    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {\n      throw new Error(\"invalid number type - \" + type);\n    }\n\n    if (isArray) {\n      size = 256;\n    }\n\n    value = BigNumber.from(value).toTwos(size);\n    return zeroPad(value, size / 8);\n  }\n\n  match = type.match(regexBytes);\n\n  if (match) {\n    var _size = parseInt(match[1]);\n\n    if (String(_size) !== match[1] || _size === 0 || _size > 32) {\n      throw new Error(\"invalid bytes type - \" + type);\n    }\n\n    if (arrayify(value).byteLength !== _size) {\n      throw new Error(\"invalid value for \" + type);\n    }\n\n    if (isArray) {\n      return arrayify((value + Zeros).substring(0, 66));\n    }\n\n    return value;\n  }\n\n  match = type.match(regexArray);\n\n  if (match && Array.isArray(value)) {\n    var baseType = match[1];\n    var count = parseInt(match[2] || String(value.length));\n\n    if (count != value.length) {\n      throw new Error(\"invalid value for \" + type);\n    }\n\n    var result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return concat(result);\n  }\n\n  throw new Error(\"invalid type - \" + type);\n} // @TODO: Array Enum\n\n\nexport function pack(types, values) {\n  if (types.length != values.length) {\n    throw new Error(\"type/value count mismatch\");\n  }\n\n  var tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n  return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n  return hashSha256(pack(types, values));\n}","map":{"version":3,"mappings":"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","names":["BigNumber","arrayify","concat","hexlify","zeroPad","keccak256","hashKeccak256","sha256","hashSha256","toUtf8Bytes","regexBytes","RegExp","regexNumber","regexArray","Zeros","_pack","type","value","isArray","match","size","parseInt","String","Error","from","toTwos","byteLength","substring","Array","baseType","count","length","result","forEach","push","pack","types","values","tight","index"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}