{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: ''\n};\nexport default createReducer(initialState, builder => builder.addCase(resetMintState, () => initialState).addCase(typeInput, (state, _ref) => {\n  let {\n    payload: {\n      field,\n      typedValue,\n      noLiquidity\n    }\n  } = _ref;\n\n  if (noLiquidity) {\n    // they're typing into the field they've last typed in\n    if (field === state.independentField) {\n      return { ...state,\n        independentField: field,\n        typedValue\n      };\n    } // they're typing into a new field, store the other value\n    else {\n      return { ...state,\n        independentField: field,\n        typedValue,\n        otherTypedValue: state.typedValue\n      };\n    }\n  } else {\n    return { ...state,\n      independentField: field,\n      typedValue,\n      otherTypedValue: ''\n    };\n  }\n}));","map":{"version":3,"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","builder","addCase","state","payload","field","noLiquidity"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/state/mint/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, typeInput } from './actions';\n\nexport interface MintState {\n  readonly independentField: Field;\n  readonly typedValue: string;\n  readonly otherTypedValue: string; // for the case when there's no liquidity\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n};\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          };\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n            otherTypedValue: state.typedValue,\n          };\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: '',\n        };\n      }\n    })\n);\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,SAAhC,QAAiD,WAAjD;AAQA,MAAMC,YAAuB,GAAG;EAC9BC,gBAAgB,EAAEJ,KAAK,CAACK,UADM;EAE9BC,UAAU,EAAE,EAFkB;EAG9BC,eAAe,EAAE;AAHa,CAAhC;AAMA,eAAeR,aAAa,CAAYI,YAAZ,EAA2BK,OAAD,IACpDA,OAAO,CACJC,OADH,CACWR,cADX,EAC2B,MAAME,YADjC,EAEGM,OAFH,CAEWP,SAFX,EAEsB,CAACQ,KAAD,WAA4D;EAAA,IAApD;IAAEC,OAAO,EAAE;MAAEC,KAAF;MAASN,UAAT;MAAqBO;IAArB;EAAX,CAAoD;;EAC9E,IAAIA,WAAJ,EAAiB;IACf;IACA,IAAID,KAAK,KAAKF,KAAK,CAACN,gBAApB,EAAsC;MACpC,OAAO,EACL,GAAGM,KADE;QAELN,gBAAgB,EAAEQ,KAFb;QAGLN;MAHK,CAAP;IAKD,CAND,CAOA;IAPA,KAQK;MACH,OAAO,EACL,GAAGI,KADE;QAELN,gBAAgB,EAAEQ,KAFb;QAGLN,UAHK;QAILC,eAAe,EAAEG,KAAK,CAACJ;MAJlB,CAAP;IAMD;EACF,CAlBD,MAkBO;IACL,OAAO,EACL,GAAGI,KADE;MAELN,gBAAgB,EAAEQ,KAFb;MAGLN,UAHK;MAILC,eAAe,EAAE;IAJZ,CAAP;EAMD;AACF,CA7BH,CAD0B,CAA5B"},"metadata":{},"sourceType":"module"}