{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: ''\n  },\n  [Field.OUTPUT]: {\n    currencyId: ''\n  },\n  recipient: null\n};\nexport default createReducer(initialState, builder => builder.addCase(replaceSwapState, (state, _ref) => {\n  let {\n    payload: {\n      typedValue,\n      recipient,\n      field,\n      inputCurrencyId,\n      outputCurrencyId\n    }\n  } = _ref;\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    independentField: field,\n    typedValue: typedValue,\n    recipient\n  };\n}).addCase(selectCurrency, (state, _ref2) => {\n  let {\n    payload: {\n      currencyId,\n      field\n    }\n  } = _ref2;\n  const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n\n  if (currencyId === state[otherField].currencyId) {\n    // the case where we have to swap the order\n    return { ...state,\n      independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n      [field]: {\n        currencyId: currencyId\n      },\n      [otherField]: {\n        currencyId: state[field].currencyId\n      }\n    };\n  } else {\n    // the normal case\n    return { ...state,\n      [field]: {\n        currencyId: currencyId\n      }\n    };\n  }\n}).addCase(switchCurrencies, state => {\n  return { ...state,\n    independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n    [Field.INPUT]: {\n      currencyId: state[Field.OUTPUT].currencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: state[Field.INPUT].currencyId\n    }\n  };\n}).addCase(typeInput, (state, _ref3) => {\n  let {\n    payload: {\n      field,\n      typedValue\n    }\n  } = _ref3;\n  return { ...state,\n    independentField: field,\n    typedValue\n  };\n}).addCase(setRecipient, (state, _ref4) => {\n  let {\n    payload: {\n      recipient\n    }\n  } = _ref4;\n  state.recipient = recipient;\n}));","map":{"version":3,"names":["createReducer","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","initialState","independentField","INPUT","typedValue","currencyId","OUTPUT","recipient","builder","addCase","state","payload","field","inputCurrencyId","outputCurrencyId","otherField"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/state/swap/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\n\nexport interface SwapState {\n  readonly independentField: Field;\n  readonly typedValue: string;\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined;\n  };\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined;\n  };\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null;\n}\n\nconst initialState: SwapState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: '',\n  },\n  [Field.OUTPUT]: {\n    currencyId: '',\n  },\n  recipient: null,\n};\n\nexport default createReducer<SwapState>(initialState, (builder) =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId,\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId,\n          },\n          independentField: field,\n          typedValue: typedValue,\n          recipient,\n        };\n      }\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to swap the order\n        return {\n          ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: { currencyId: currencyId },\n          [otherField]: { currencyId: state[field].currencyId },\n        };\n      } else {\n        // the normal case\n        return {\n          ...state,\n          [field]: { currencyId: currencyId },\n        };\n      }\n    })\n    .addCase(switchCurrencies, (state) => {\n      return {\n        ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\n      };\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      return {\n        ...state,\n        independentField: field,\n        typedValue,\n      };\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient;\n    })\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}