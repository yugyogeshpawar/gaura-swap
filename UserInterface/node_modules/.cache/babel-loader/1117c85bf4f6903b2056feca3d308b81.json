{"ast":null,"code":"import schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nimport contenthashToUri from './contenthashToUri';\nimport { parseENSAddress } from './parseENSAddress';\nimport uriToHttp from './uriToHttp';\nconst tokenListValidator = new Ajv({\n  allErrors: true\n}).compile(schema);\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\n\nexport default async function getTokenList(listUrl, resolveENSContentHash) {\n  const parsedENS = parseENSAddress(listUrl);\n  let urls;\n\n  if (parsedENS) {\n    var _parsedENS$ensPath;\n\n    let contentHashUri;\n\n    try {\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName);\n    } catch (error) {\n      console.debug(`Failed to resolve ENS name: ${parsedENS.ensName}`, error);\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`);\n    }\n\n    let translatedUri;\n\n    try {\n      translatedUri = contenthashToUri(contentHashUri);\n    } catch (error) {\n      console.debug('Failed to translate contenthash to URI', contentHashUri);\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`);\n    }\n\n    urls = uriToHttp(`${translatedUri}${(_parsedENS$ensPath = parsedENS.ensPath) !== null && _parsedENS$ensPath !== void 0 ? _parsedENS$ensPath : ''}`);\n  } else {\n    urls = uriToHttp(listUrl);\n  }\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    const isLast = i === urls.length - 1;\n    let response;\n\n    try {\n      response = await fetch(url);\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error);\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n\n    const json = await response.json();\n\n    if (!tokenListValidator(json)) {\n      var _tokenListValidator$e, _tokenListValidator$e2;\n\n      const validationErrors = (_tokenListValidator$e = (_tokenListValidator$e2 = tokenListValidator.errors) === null || _tokenListValidator$e2 === void 0 ? void 0 : _tokenListValidator$e2.reduce((memo, error) => {\n        var _error$message;\n\n        const add = `${error.dataPath} ${(_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : ''}`;\n        return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n      }, '')) !== null && _tokenListValidator$e !== void 0 ? _tokenListValidator$e : 'unknown error';\n      throw new Error(`Token list failed validation: ${validationErrors}`);\n    }\n\n    return json;\n  }\n\n  throw new Error('Unrecognized list URL protocol.');\n}","map":{"version":3,"names":["schema","Ajv","contenthashToUri","parseENSAddress","uriToHttp","tokenListValidator","allErrors","compile","getTokenList","listUrl","resolveENSContentHash","parsedENS","urls","contentHashUri","ensName","error","console","debug","Error","translatedUri","ensPath","i","length","url","isLast","response","fetch","ok","json","validationErrors","errors","reduce","memo","add","dataPath","message"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/utils/getTokenList.ts"],"sourcesContent":["import { TokenList } from '@uniswap/token-lists';\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nimport contenthashToUri from './contenthashToUri';\nimport { parseENSAddress } from './parseENSAddress';\nimport uriToHttp from './uriToHttp';\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema);\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(\n  listUrl: string,\n  resolveENSContentHash: (ensName: string) => Promise<string>\n): Promise<TokenList> {\n  const parsedENS = parseENSAddress(listUrl);\n  let urls: string[];\n  if (parsedENS) {\n    let contentHashUri;\n    try {\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName);\n    } catch (error) {\n      console.debug(`Failed to resolve ENS name: ${parsedENS.ensName}`, error);\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`);\n    }\n    let translatedUri;\n    try {\n      translatedUri = contenthashToUri(contentHashUri);\n    } catch (error) {\n      console.debug('Failed to translate contenthash to URI', contentHashUri);\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`);\n    }\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`);\n  } else {\n    urls = uriToHttp(listUrl);\n  }\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    const isLast = i === urls.length - 1;\n    let response;\n    try {\n      response = await fetch(url);\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error);\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n\n    const json = await response.json();\n    if (!tokenListValidator(json)) {\n      const validationErrors: string =\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\n          const add = `${error.dataPath} ${error.message ?? ''}`;\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n        }, '') ?? 'unknown error';\n      throw new Error(`Token list failed validation: ${validationErrors}`);\n    }\n    return json;\n  }\n  throw new Error('Unrecognized list URL protocol.');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}