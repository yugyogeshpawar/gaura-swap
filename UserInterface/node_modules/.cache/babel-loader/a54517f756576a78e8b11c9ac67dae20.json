{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar CHAIN_ID = 1;\n\nvar WalletLinkConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(WalletLinkConnector, _AbstractConnector);\n\n  function WalletLinkConnector(_ref) {\n    var _this;\n\n    var url = _ref.url,\n        appName = _ref.appName,\n        appLogoUrl = _ref.appLogoUrl,\n        darkMode = _ref.darkMode;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [CHAIN_ID]\n    }) || this;\n    _this.url = url;\n    _this.appName = appName;\n    _this.appLogoUrl = appLogoUrl;\n    _this.darkMode = darkMode || false;\n    return _this;\n  }\n\n  var _proto = WalletLinkConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _this3 = this;\n\n      var _temp3 = function _temp3() {\n        return Promise.resolve(_this3.provider.send('eth_requestAccounts').then(function (accounts) {\n          return accounts[0];\n        })).then(function (account) {\n          _this3.provider.on('chainChanged', _this3.handleChainChanged);\n\n          _this3.provider.on('accountsChanged', _this3.handleAccountsChanged);\n\n          return {\n            provider: _this3.provider,\n            chainId: CHAIN_ID,\n            account: account\n          };\n        });\n      };\n\n      var _temp4 = function () {\n        if (!_this3.walletLink) {\n          return Promise.resolve(import('walletlink').then(function (m) {\n            var _m$default;\n\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (WalletLink) {\n            _this3.walletLink = new WalletLink(_extends({\n              appName: _this3.appName,\n              darkMode: _this3.darkMode\n            }, _this3.appLogoUrl ? {\n              appLogoUrl: _this3.appLogoUrl\n            } : {}));\n            _this3.provider = _this3.walletLink.makeWeb3Provider(_this3.url, CHAIN_ID);\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    return Promise.resolve(CHAIN_ID);\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.provider.send('eth_accounts').then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged);\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged);\n  };\n\n  _proto.close = function close() {\n    try {\n      var _this9 = this;\n\n      _this9.provider.close();\n\n      _this9.emitDeactivate();\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.handleChainChanged = function handleChainChanged(chainId) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId);\n    }\n\n    this.emitUpdate({\n      chainId: chainId\n    });\n  };\n\n  _proto.handleAccountsChanged = function handleAccountsChanged(accounts) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n    }\n\n    this.emitUpdate({\n      account: accounts[0]\n    });\n  };\n\n  return WalletLinkConnector;\n}(AbstractConnector);\n\nexport { WalletLinkConnector };","map":{"version":3,"mappings":"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","names":["CHAIN_ID","WalletLinkConnector","_inheritsLoose","url","appName","appLogoUrl","darkMode","_this","supportedChainIds","_proto","activate","_this3","provider","send","then","accounts","account","on","handleChainChanged","handleAccountsChanged","chainId","walletLink","m","WalletLink","makeWeb3Provider","getProvider","_this5","getChainId","getAccount","_this7","deactivate","removeListener","close","_this9","emitDeactivate","console","log","emitUpdate","AbstractConnector"],"sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n  darkMode?: boolean\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n  private readonly darkMode: boolean\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl, darkMode }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: [CHAIN_ID] })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n    this.darkMode = darkMode || false\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletLink) {\n      const WalletLink = await import('walletlink').then(m => m?.default ?? m)\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    const account = await this.provider.send('eth_requestAccounts').then((accounts: string[]): string => accounts[0])\n\n    this.provider.on('chainChanged', this.handleChainChanged)\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.provider, chainId: CHAIN_ID, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return CHAIN_ID\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged)\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n\n  public async close() {\n    this.provider.close()\n    this.emitDeactivate()\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}