{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n\n  return getAddress(value);\n}\n\nfunction handleNumber(value) {\n  if (value === \"0x\") {\n    return Zero;\n  }\n\n  return BigNumber.from(value);\n} // Legacy Transaction Fields\n\n\nconst transactionFields = [{\n  name: \"nonce\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasPrice\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasLimit\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"to\",\n  length: 20\n}, {\n  name: \"value\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"data\"\n}];\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true\n};\nexport function computeAddress(key) {\n  const publicKey = computePublicKey(key);\n  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n  return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\n\nfunction formatNumber(value, name) {\n  const result = stripZeros(BigNumber.from(value).toHexString());\n\n  if (result.length > 32) {\n    logger.throwArgumentError(\"invalid length for \" + name, \"transaction:\" + name, value);\n  }\n\n  return result;\n}\n\nfunction accessSetify(addr, storageKeys) {\n  return {\n    address: getAddress(addr),\n    storageKeys: (storageKeys || []).map((storageKey, index) => {\n      if (hexDataLength(storageKey) !== 32) {\n        logger.throwArgumentError(\"invalid access list storageKey\", `accessList[${addr}:${index}]`, storageKey);\n      }\n\n      return storageKey.toLowerCase();\n    })\n  };\n}\n\nexport function accessListify(value) {\n  if (Array.isArray(value)) {\n    return value.map((set, index) => {\n      if (Array.isArray(set)) {\n        if (set.length > 2) {\n          logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${index}]`, set);\n        }\n\n        return accessSetify(set[0], set[1]);\n      }\n\n      return accessSetify(set.address, set.storageKeys);\n    });\n  }\n\n  const result = Object.keys(value).map(addr => {\n    const storageKeys = value[addr].reduce((accum, storageKey) => {\n      accum[storageKey] = true;\n      return accum;\n    }, {});\n    return accessSetify(addr, Object.keys(storageKeys).sort());\n  });\n  result.sort((a, b) => a.address.localeCompare(b.address));\n  return result;\n}\n\nfunction formatAccessList(value) {\n  return accessListify(value).map(set => [set.address, set.storageKeys]);\n}\n\nfunction _serializeEip2930(transaction, signature) {\n  const fields = [formatNumber(transaction.chainId || 0, \"chainId\"), formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(transaction.gasPrice || 0, \"gasPrice\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to != null ? getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\", formatAccessList(transaction.accessList || [])];\n\n  if (signature) {\n    const sig = splitSignature(signature);\n    fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n    fields.push(stripZeros(sig.r));\n    fields.push(stripZeros(sig.s));\n  }\n\n  return hexConcat([\"0x01\", RLP.encode(fields)]);\n} // Legacy Transactions and EIP-155\n\n\nfunction _serialize(transaction, signature) {\n  checkProperties(transaction, allowedTransactionKeys);\n  const raw = [];\n  transactionFields.forEach(function (fieldInfo) {\n    let value = transaction[fieldInfo.name] || [];\n    const options = {};\n\n    if (fieldInfo.numeric) {\n      options.hexPad = \"left\";\n    }\n\n    value = arrayify(hexlify(value, options)); // Fixed-width field\n\n    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n      logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n    } // Variable-width (with a maximum)\n\n\n    if (fieldInfo.maxLength) {\n      value = stripZeros(value);\n\n      if (value.length > fieldInfo.maxLength) {\n        logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n      }\n    }\n\n    raw.push(hexlify(value));\n  });\n  let chainId = 0;\n\n  if (transaction.chainId != null) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = transaction.chainId;\n\n    if (typeof chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n    }\n  } else if (signature && !isBytesLike(signature) && signature.v > 28) {\n    // No chainId provided, but the signature is signing with EIP-155; derive chainId\n    chainId = Math.floor((signature.v - 35) / 2);\n  } // We have an EIP-155 transaction (chainId was specified and non-zero)\n\n\n  if (chainId !== 0) {\n    raw.push(hexlify(chainId)); // @TODO: hexValue?\n\n    raw.push(\"0x\");\n    raw.push(\"0x\");\n  } // Requesting an unsigned transation\n\n\n  if (!signature) {\n    return RLP.encode(raw);\n  } // The splitSignature will ensure the transaction has a recoveryParam in the\n  // case that the signTransaction function only adds a v.\n\n\n  const sig = splitSignature(signature); // We pushed a chainId and null r, s on for hashing only; remove those\n\n  let v = 27 + sig.recoveryParam;\n\n  if (chainId !== 0) {\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += chainId * 2 + 8; // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n\n    if (sig.v > 28 && sig.v !== v) {\n      logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n  } else if (sig.v !== v) {\n    logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n  }\n\n  raw.push(hexlify(v));\n  raw.push(stripZeros(arrayify(sig.r)));\n  raw.push(stripZeros(arrayify(sig.s)));\n  return RLP.encode(raw);\n}\n\nexport function serialize(transaction, signature) {\n  // Legacy and EIP-155 Transactions\n  if (transaction.type == null) {\n    if (transaction.accessList != null) {\n      logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n    }\n\n    return _serialize(transaction, signature);\n  } // Typed Transactions (EIP-2718)\n\n\n  switch (transaction.type) {\n    case 1:\n      return _serializeEip2930(transaction, signature);\n\n    default:\n      break;\n  }\n\n  return logger.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"serializeTransaction\",\n    transactionType: transaction.type\n  });\n}\n\nfunction _parseEip2930(payload) {\n  const transaction = RLP.decode(payload.slice(1));\n\n  if (transaction.length !== 8 && transaction.length !== 11) {\n    logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n  }\n\n  const tx = {\n    type: 1,\n    chainId: handleNumber(transaction[0]).toNumber(),\n    nonce: handleNumber(transaction[1]).toNumber(),\n    gasPrice: handleNumber(transaction[2]),\n    gasLimit: handleNumber(transaction[3]),\n    to: handleAddress(transaction[4]),\n    value: handleNumber(transaction[5]),\n    data: transaction[6],\n    accessList: accessListify(transaction[7])\n  }; // Unsigned EIP-2930 Transaction\n\n  if (transaction.length === 8) {\n    return tx;\n  }\n\n  try {\n    const recid = handleNumber(transaction[8]).toNumber();\n\n    if (recid !== 0 && recid !== 1) {\n      throw new Error(\"bad recid\");\n    }\n\n    tx.v = recid;\n  } catch (error) {\n    logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", transaction[8]);\n  }\n\n  tx.r = hexZeroPad(transaction[9], 32);\n  tx.s = hexZeroPad(transaction[10], 32);\n\n  try {\n    const digest = keccak256(_serializeEip2930(tx));\n    tx.from = recoverAddress(digest, {\n      r: tx.r,\n      s: tx.s,\n      recoveryParam: tx.v\n    });\n  } catch (error) {\n    console.log(error);\n  }\n\n  tx.hash = keccak256(payload);\n  return tx;\n} // Legacy Transactions and EIP-155\n\n\nfunction _parse(rawTransaction) {\n  const transaction = RLP.decode(rawTransaction);\n\n  if (transaction.length !== 9 && transaction.length !== 6) {\n    logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n  }\n\n  const tx = {\n    nonce: handleNumber(transaction[0]).toNumber(),\n    gasPrice: handleNumber(transaction[1]),\n    gasLimit: handleNumber(transaction[2]),\n    to: handleAddress(transaction[3]),\n    value: handleNumber(transaction[4]),\n    data: transaction[5],\n    chainId: 0\n  }; // Legacy unsigned transaction\n\n  if (transaction.length === 6) {\n    return tx;\n  }\n\n  try {\n    tx.v = BigNumber.from(transaction[6]).toNumber();\n  } catch (error) {\n    console.log(error);\n    return tx;\n  }\n\n  tx.r = hexZeroPad(transaction[7], 32);\n  tx.s = hexZeroPad(transaction[8], 32);\n\n  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.v;\n    tx.v = 0;\n  } else {\n    // Signed Tranasaction\n    tx.chainId = Math.floor((tx.v - 35) / 2);\n\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    let recoveryParam = tx.v - 27;\n    const raw = transaction.slice(0, 6);\n\n    if (tx.chainId !== 0) {\n      raw.push(hexlify(tx.chainId));\n      raw.push(\"0x\");\n      raw.push(\"0x\");\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    const digest = keccak256(RLP.encode(raw));\n\n    try {\n      tx.from = recoverAddress(digest, {\n        r: hexlify(tx.r),\n        s: hexlify(tx.s),\n        recoveryParam: recoveryParam\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    tx.hash = keccak256(rawTransaction);\n  }\n\n  tx.type = null;\n  return tx;\n}\n\nexport function parse(rawTransaction) {\n  const payload = arrayify(rawTransaction); // Legacy and EIP-155 Transactions\n\n  if (payload[0] > 0x7f) {\n    return _parse(payload);\n  } // Typed Transaction (EIP-2718)\n\n\n  switch (payload[0]) {\n    case 1:\n      return _parseEip2930(payload);\n\n    default:\n      break;\n  }\n\n  return logger.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"parseTransaction\",\n    transactionType: payload[0]\n  });\n}","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,UAAT,QAA2B,wBAA3B;AACA,SAASC,SAAT,QAAwC,0BAAxC;AACA,SAASC,QAAT,EAA2CC,SAA3C,EAAsDC,aAAtD,EAAqEC,YAArE,EAAmFC,OAAnF,EAA4FC,UAA5F,EAAwGC,WAAxG,EAAoIC,cAApI,EAAoJC,UAApJ,QAAuK,sBAAvK;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,oBAArB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,4BAAnD;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf,C,CAqDA;;AAEA,SAASE,aAAT,CAAuBC,KAAvB,EAAoC;EAChC,IAAIA,KAAK,KAAK,IAAd,EAAoB;IAAE,OAAO,IAAP;EAAc;;EACpC,OAAOrB,UAAU,CAACqB,KAAD,CAAjB;AACH;;AAED,SAASC,YAAT,CAAsBD,KAAtB,EAAmC;EAC/B,IAAIA,KAAK,KAAK,IAAd,EAAoB;IAAE,OAAOV,IAAP;EAAc;;EACpC,OAAOV,SAAS,CAACsB,IAAV,CAAeF,KAAf,CAAP;AACH,C,CAED;;;AACA,MAAMG,iBAAiB,GAAG,CACtB;EAAEC,IAAI,EAAE,OAAR;EAAoBC,SAAS,EAAE,EAA/B;EAAmCC,OAAO,EAAE;AAA5C,CADsB,EAEtB;EAAEF,IAAI,EAAE,UAAR;EAAoBC,SAAS,EAAE,EAA/B;EAAmCC,OAAO,EAAE;AAA5C,CAFsB,EAGtB;EAAEF,IAAI,EAAE,UAAR;EAAoBC,SAAS,EAAE,EAA/B;EAAmCC,OAAO,EAAE;AAA5C,CAHsB,EAItB;EAAEF,IAAI,EAAE,IAAR;EAAuBG,MAAM,EAAE;AAA/B,CAJsB,EAKtB;EAAEH,IAAI,EAAE,OAAR;EAAoBC,SAAS,EAAE,EAA/B;EAAmCC,OAAO,EAAE;AAA5C,CALsB,EAMtB;EAAEF,IAAI,EAAE;AAAR,CANsB,CAA1B;AASA,MAAMI,sBAAsB,GAAiC;EACzDC,OAAO,EAAE,IADgD;EAC1CC,IAAI,EAAE,IADoC;EAC9BC,QAAQ,EAAE,IADoB;EACdC,QAAQ,EAAC,IADK;EACCC,KAAK,EAAE,IADR;EACcC,EAAE,EAAE,IADlB;EACwBd,KAAK,EAAE;AAD/B,CAA7D;AAIA,OAAM,SAAUe,cAAV,CAAyBC,GAAzB,EAAgD;EAClD,MAAMC,SAAS,GAAGvB,gBAAgB,CAACsB,GAAD,CAAlC;EACA,OAAOrC,UAAU,CAACK,YAAY,CAACO,SAAS,CAACP,YAAY,CAACiC,SAAD,EAAY,CAAZ,CAAb,CAAV,EAAwC,EAAxC,CAAb,CAAjB;AACH;AAED,OAAM,SAAUC,cAAV,CAAyBC,MAAzB,EAA4CC,SAA5C,EAAoE;EACtE,OAAOL,cAAc,CAACpB,gBAAgB,CAACd,QAAQ,CAACsC,MAAD,CAAT,EAAmBC,SAAnB,CAAjB,CAArB;AACH;;AAED,SAASC,YAAT,CAAsBrB,KAAtB,EAA2CI,IAA3C,EAAuD;EACnD,MAAMkB,MAAM,GAAGjC,UAAU,CAACT,SAAS,CAACsB,IAAV,CAAeF,KAAf,EAAsBuB,WAAtB,EAAD,CAAzB;;EACA,IAAID,MAAM,CAACf,MAAP,GAAgB,EAApB,EAAwB;IACpBT,MAAM,CAAC0B,kBAAP,CAA0B,wBAAwBpB,IAAlD,EAAyD,iBAAiBA,IAA1E,EAAiFJ,KAAjF;EACH;;EACD,OAAOsB,MAAP;AACH;;AAED,SAASG,YAAT,CAAsBC,IAAtB,EAAoCC,WAApC,EAA8D;EAC1D,OAAO;IACHC,OAAO,EAAEjD,UAAU,CAAC+C,IAAD,CADhB;IAEHC,WAAW,EAAE,CAACA,WAAW,IAAI,EAAhB,EAAoBE,GAApB,CAAwB,CAACC,UAAD,EAAaC,KAAb,KAAsB;MACvD,IAAIhD,aAAa,CAAC+C,UAAD,CAAb,KAA8B,EAAlC,EAAsC;QAClChC,MAAM,CAAC0B,kBAAP,CAA0B,gCAA1B,EAA4D,cAAeE,IAAK,IAAKK,KAAM,GAA3F,EAAgGD,UAAhG;MACH;;MACD,OAAOA,UAAU,CAACE,WAAX,EAAP;IACH,CALY;EAFV,CAAP;AASH;;AAED,OAAM,SAAUC,aAAV,CAAwBjC,KAAxB,EAA4C;EAC9C,IAAIkC,KAAK,CAACC,OAAN,CAAcnC,KAAd,CAAJ,EAA0B;IACtB,OAA0FA,KAAM,CAAC6B,GAAP,CAAW,CAACO,GAAD,EAAML,KAAN,KAAe;MAChH,IAAIG,KAAK,CAACC,OAAN,CAAcC,GAAd,CAAJ,EAAwB;QACpB,IAAIA,GAAG,CAAC7B,MAAJ,GAAa,CAAjB,EAAoB;UAChBT,MAAM,CAAC0B,kBAAP,CAA0B,uDAA1B,EAAmF,SAAUO,KAAM,GAAnG,EAAwGK,GAAxG;QACH;;QACD,OAAOX,YAAY,CAACW,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,CAAnB;MACH;;MACD,OAAOX,YAAY,CAACW,GAAG,CAACR,OAAL,EAAcQ,GAAG,CAACT,WAAlB,CAAnB;IACH,CARyF,CAA1F;EASH;;EAED,MAAML,MAAM,GAA2De,MAAM,CAACC,IAAP,CAAYtC,KAAZ,EAAmB6B,GAAnB,CAAwBH,IAAD,IAAS;IACnG,MAAMC,WAAW,GAAyB3B,KAAK,CAAC0B,IAAD,CAAL,CAAYa,MAAZ,CAAmB,CAACC,KAAD,EAAQV,UAAR,KAAsB;MAC/EU,KAAK,CAACV,UAAD,CAAL,GAAoB,IAApB;MACA,OAAOU,KAAP;IACH,CAHyC,EAGjB,EAHiB,CAA1C;IAIA,OAAOf,YAAY,CAACC,IAAD,EAAOW,MAAM,CAACC,IAAP,CAAYX,WAAZ,EAAyBc,IAAzB,EAAP,CAAnB;EACH,CANsE,CAAvE;EAOAnB,MAAM,CAACmB,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACd,OAAF,CAAUgB,aAAV,CAAwBD,CAAC,CAACf,OAA1B,CAAvB;EACA,OAAON,MAAP;AACH;;AAED,SAASuB,gBAAT,CAA0B7C,KAA1B,EAA8C;EAC1C,OAAOiC,aAAa,CAACjC,KAAD,CAAb,CAAqB6B,GAArB,CAA0BO,GAAD,IAAS,CAAEA,GAAG,CAACR,OAAN,EAAeQ,GAAG,CAACT,WAAnB,CAAlC,CAAP;AACH;;AAED,SAASmB,iBAAT,CAA2BC,WAA3B,EAA6D3B,SAA7D,EAAsF;EAClF,MAAM4B,MAAM,GAAQ,CAChB3B,YAAY,CAAC0B,WAAW,CAACtC,OAAZ,IAAuB,CAAxB,EAA2B,SAA3B,CADI,EAEhBY,YAAY,CAAC0B,WAAW,CAAClC,KAAZ,IAAqB,CAAtB,EAAyB,OAAzB,CAFI,EAGhBQ,YAAY,CAAC0B,WAAW,CAACnC,QAAZ,IAAwB,CAAzB,EAA4B,UAA5B,CAHI,EAIhBS,YAAY,CAAC0B,WAAW,CAACpC,QAAZ,IAAwB,CAAzB,EAA4B,UAA5B,CAJI,EAKdoC,WAAW,CAACjC,EAAZ,IAAkB,IAAnB,GAA2BnC,UAAU,CAACoE,WAAW,CAACjC,EAAb,CAArC,GAAuD,IALxC,EAMhBO,YAAY,CAAC0B,WAAW,CAAC/C,KAAZ,IAAqB,CAAtB,EAAyB,OAAzB,CANI,EAOf+C,WAAW,CAACrC,IAAZ,IAAoB,IAPL,EAQfmC,gBAAgB,CAACE,WAAW,CAACE,UAAZ,IAA0B,EAA3B,CARD,CAApB;;EAWA,IAAI7B,SAAJ,EAAe;IACX,MAAM8B,GAAG,GAAG9D,cAAc,CAACgC,SAAD,CAA1B;IACA4B,MAAM,CAACG,IAAP,CAAY9B,YAAY,CAAC6B,GAAG,CAACE,aAAL,EAAoB,eAApB,CAAxB;IACAJ,MAAM,CAACG,IAAP,CAAY9D,UAAU,CAAC6D,GAAG,CAACG,CAAL,CAAtB;IACAL,MAAM,CAACG,IAAP,CAAY9D,UAAU,CAAC6D,GAAG,CAACI,CAAL,CAAtB;EACH;;EAED,OAAOxE,SAAS,CAAC,CAAE,MAAF,EAAUW,GAAG,CAAC8D,MAAJ,CAAWP,MAAX,CAAV,CAAD,CAAhB;AACH,C,CAED;;;AACA,SAASQ,UAAT,CAAoBT,WAApB,EAAsD3B,SAAtD,EAA+E;EAC3E5B,eAAe,CAACuD,WAAD,EAAcvC,sBAAd,CAAf;EAEA,MAAMiD,GAAG,GAA+B,EAAxC;EAEAtD,iBAAiB,CAACuD,OAAlB,CAA0B,UAASC,SAAT,EAAkB;IACxC,IAAI3D,KAAK,GAAS+C,WAAY,CAACY,SAAS,CAACvD,IAAX,CAAZ,IAAiC,EAAnD;IACA,MAAMwD,OAAO,GAAgB,EAA7B;;IACA,IAAID,SAAS,CAACrD,OAAd,EAAuB;MAAEsD,OAAO,CAACC,MAAR,GAAiB,MAAjB;IAA0B;;IACnD7D,KAAK,GAAGnB,QAAQ,CAACI,OAAO,CAACe,KAAD,EAAQ4D,OAAR,CAAR,CAAhB,CAJwC,CAMxC;;IACA,IAAID,SAAS,CAACpD,MAAV,IAAoBP,KAAK,CAACO,MAAN,KAAiBoD,SAAS,CAACpD,MAA/C,IAAyDP,KAAK,CAACO,MAAN,GAAe,CAA5E,EAA+E;MAC3ET,MAAM,CAAC0B,kBAAP,CAA0B,wBAAwBmC,SAAS,CAACvD,IAA5D,EAAmE,iBAAiBuD,SAAS,CAACvD,IAA9F,EAAqGJ,KAArG;IACH,CATuC,CAWxC;;;IACA,IAAI2D,SAAS,CAACtD,SAAd,EAAyB;MACrBL,KAAK,GAAGX,UAAU,CAACW,KAAD,CAAlB;;MACA,IAAIA,KAAK,CAACO,MAAN,GAAeoD,SAAS,CAACtD,SAA7B,EAAwC;QACpCP,MAAM,CAAC0B,kBAAP,CAA0B,wBAAwBmC,SAAS,CAACvD,IAA5D,EAAmE,iBAAiBuD,SAAS,CAACvD,IAA9F,EAAqGJ,KAArG;MACH;IACJ;;IAEDyD,GAAG,CAACN,IAAJ,CAASlE,OAAO,CAACe,KAAD,CAAhB;EACH,CApBD;EAsBA,IAAIS,OAAO,GAAG,CAAd;;EACA,IAAIsC,WAAW,CAACtC,OAAZ,IAAuB,IAA3B,EAAiC;IAC7B;IACAA,OAAO,GAAGsC,WAAW,CAACtC,OAAtB;;IAEA,IAAI,OAAOA,OAAP,KAAoB,QAAxB,EAAkC;MAC9BX,MAAM,CAAC0B,kBAAP,CAA0B,6BAA1B,EAAyD,aAAzD,EAAwEuB,WAAxE;IACH;EAEJ,CARD,MAQO,IAAI3B,SAAS,IAAI,CAACjC,WAAW,CAACiC,SAAD,CAAzB,IAAwCA,SAAS,CAAC0C,CAAV,GAAc,EAA1D,EAA8D;IACjE;IACArD,OAAO,GAAGsD,IAAI,CAACC,KAAL,CAAW,CAAC5C,SAAS,CAAC0C,CAAV,GAAc,EAAf,IAAqB,CAAhC,CAAV;EACH,CAvC0E,CAyC3E;;;EACA,IAAIrD,OAAO,KAAK,CAAhB,EAAmB;IACfgD,GAAG,CAACN,IAAJ,CAASlE,OAAO,CAACwB,OAAD,CAAhB,EADe,CACa;;IAC5BgD,GAAG,CAACN,IAAJ,CAAS,IAAT;IACAM,GAAG,CAACN,IAAJ,CAAS,IAAT;EACH,CA9C0E,CAgD3E;;;EACA,IAAI,CAAC/B,SAAL,EAAgB;IACZ,OAAO3B,GAAG,CAAC8D,MAAJ,CAAWE,GAAX,CAAP;EACH,CAnD0E,CAqD3E;EACA;;;EACA,MAAMP,GAAG,GAAG9D,cAAc,CAACgC,SAAD,CAA1B,CAvD2E,CAyD3E;;EACA,IAAI0C,CAAC,GAAG,KAAKZ,GAAG,CAACE,aAAjB;;EACA,IAAI3C,OAAO,KAAK,CAAhB,EAAmB;IACfgD,GAAG,CAACQ,GAAJ;IACAR,GAAG,CAACQ,GAAJ;IACAR,GAAG,CAACQ,GAAJ;IACAH,CAAC,IAAIrD,OAAO,GAAG,CAAV,GAAc,CAAnB,CAJe,CAMf;;IACA,IAAIyC,GAAG,CAACY,CAAJ,GAAQ,EAAR,IAAcZ,GAAG,CAACY,CAAJ,KAAUA,CAA5B,EAA+B;MAC1BhE,MAAM,CAAC0B,kBAAP,CAA0B,0CAA1B,EAAsE,WAAtE,EAAmFJ,SAAnF;IACJ;EACJ,CAVD,MAUO,IAAI8B,GAAG,CAACY,CAAJ,KAAUA,CAAd,EAAiB;IACnBhE,MAAM,CAAC0B,kBAAP,CAA0B,0CAA1B,EAAsE,WAAtE,EAAmFJ,SAAnF;EACJ;;EAEDqC,GAAG,CAACN,IAAJ,CAASlE,OAAO,CAAC6E,CAAD,CAAhB;EACAL,GAAG,CAACN,IAAJ,CAAS9D,UAAU,CAACR,QAAQ,CAACqE,GAAG,CAACG,CAAL,CAAT,CAAnB;EACAI,GAAG,CAACN,IAAJ,CAAS9D,UAAU,CAACR,QAAQ,CAACqE,GAAG,CAACI,CAAL,CAAT,CAAnB;EAEA,OAAO7D,GAAG,CAAC8D,MAAJ,CAAWE,GAAX,CAAP;AACH;;AAED,OAAM,SAAUS,SAAV,CAAoBnB,WAApB,EAAsD3B,SAAtD,EAA+E;EACjF;EACA,IAAI2B,WAAW,CAACoB,IAAZ,IAAoB,IAAxB,EAA8B;IAC1B,IAAIpB,WAAW,CAACE,UAAZ,IAA0B,IAA9B,EAAoC;MAChCnD,MAAM,CAAC0B,kBAAP,CAA0B,iEAA1B,EAA6F,aAA7F,EAA4GuB,WAA5G;IACH;;IACD,OAAOS,UAAU,CAACT,WAAD,EAAc3B,SAAd,CAAjB;EACH,CAPgF,CASjF;;;EACA,QAAQ2B,WAAW,CAACoB,IAApB;IACI,KAAK,CAAL;MACI,OAAOrB,iBAAiB,CAACC,WAAD,EAAc3B,SAAd,CAAxB;;IACJ;MACI;EAJR;;EAOA,OAAOtB,MAAM,CAACsE,UAAP,CAAkB,iCAAkCrB,WAAW,CAACoB,IAAK,EAArE,EAAyEvE,MAAM,CAACyE,MAAP,CAAcC,qBAAvF,EAA8G;IACjHC,SAAS,EAAE,sBADsG;IAEjHC,eAAe,EAAEzB,WAAW,CAACoB;EAFoF,CAA9G,CAAP;AAIH;;AAED,SAASM,aAAT,CAAuBC,OAAvB,EAA0C;EACtC,MAAM3B,WAAW,GAAGtD,GAAG,CAACkF,MAAJ,CAAWD,OAAO,CAACE,KAAR,CAAc,CAAd,CAAX,CAApB;;EAEA,IAAI7B,WAAW,CAACxC,MAAZ,KAAuB,CAAvB,IAA4BwC,WAAW,CAACxC,MAAZ,KAAuB,EAAvD,EAA2D;IACvDT,MAAM,CAAC0B,kBAAP,CAA0B,iDAA1B,EAA6E,SAA7E,EAAwFvC,OAAO,CAACyF,OAAD,CAA/F;EACH;;EAED,MAAMG,EAAE,GAAgB;IACpBV,IAAI,EAAQ,CADQ;IAEpB1D,OAAO,EAAKR,YAAY,CAAC8C,WAAW,CAAC,CAAD,CAAZ,CAAZ,CAA6B+B,QAA7B,EAFQ;IAGpBjE,KAAK,EAAOZ,YAAY,CAAC8C,WAAW,CAAC,CAAD,CAAZ,CAAZ,CAA6B+B,QAA7B,EAHQ;IAIpBlE,QAAQ,EAAIX,YAAY,CAAC8C,WAAW,CAAC,CAAD,CAAZ,CAJJ;IAKpBpC,QAAQ,EAAIV,YAAY,CAAC8C,WAAW,CAAC,CAAD,CAAZ,CALJ;IAMpBjC,EAAE,EAAUf,aAAa,CAACgD,WAAW,CAAC,CAAD,CAAZ,CANL;IAOpB/C,KAAK,EAAOC,YAAY,CAAC8C,WAAW,CAAC,CAAD,CAAZ,CAPJ;IAQpBrC,IAAI,EAAQqC,WAAW,CAAC,CAAD,CARH;IASpBE,UAAU,EAAEhB,aAAa,CAACc,WAAW,CAAC,CAAD,CAAZ;EATL,CAAxB,CAPsC,CAmBtC;;EACA,IAAIA,WAAW,CAACxC,MAAZ,KAAuB,CAA3B,EAA8B;IAAE,OAAOsE,EAAP;EAAY;;EAE5C,IAAI;IACA,MAAME,KAAK,GAAG9E,YAAY,CAAC8C,WAAW,CAAC,CAAD,CAAZ,CAAZ,CAA6B+B,QAA7B,EAAd;;IACA,IAAIC,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAK,CAA7B,EAAgC;MAAE,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;IAA+B;;IACjEH,EAAE,CAACf,CAAH,GAAOiB,KAAP;EACH,CAJD,CAIE,OAAOE,KAAP,EAAc;IACZnF,MAAM,CAAC0B,kBAAP,CAA0B,mCAA1B,EAA+D,GAA/D,EAAoEuB,WAAW,CAAC,CAAD,CAA/E;EACH;;EAED8B,EAAE,CAACxB,CAAH,GAAOnE,UAAU,CAAC6D,WAAW,CAAC,CAAD,CAAZ,EAAiB,EAAjB,CAAjB;EACA8B,EAAE,CAACvB,CAAH,GAAOpE,UAAU,CAAC6D,WAAW,CAAC,EAAD,CAAZ,EAAkB,EAAlB,CAAjB;;EAEA,IAAI;IACA,MAAM5B,MAAM,GAAG5B,SAAS,CAACuD,iBAAiB,CAAC+B,EAAD,CAAlB,CAAxB;IACAA,EAAE,CAAC3E,IAAH,GAAUgB,cAAc,CAACC,MAAD,EAAS;MAAEkC,CAAC,EAAEwB,EAAE,CAACxB,CAAR;MAAWC,CAAC,EAAEuB,EAAE,CAACvB,CAAjB;MAAoBF,aAAa,EAAEyB,EAAE,CAACf;IAAtC,CAAT,CAAxB;EACH,CAHD,CAGE,OAAOmB,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACH;;EACDJ,EAAE,CAACO,IAAH,GAAU7F,SAAS,CAACmF,OAAD,CAAnB;EAEA,OAAOG,EAAP;AACH,C,CAED;;;AACA,SAASQ,MAAT,CAAgBC,cAAhB,EAA0C;EACtC,MAAMvC,WAAW,GAAGtD,GAAG,CAACkF,MAAJ,CAAWW,cAAX,CAApB;;EAEA,IAAIvC,WAAW,CAACxC,MAAZ,KAAuB,CAAvB,IAA4BwC,WAAW,CAACxC,MAAZ,KAAuB,CAAvD,EAA0D;IACtDT,MAAM,CAAC0B,kBAAP,CAA0B,yBAA1B,EAAqD,gBAArD,EAAuE8D,cAAvE;EACH;;EAED,MAAMT,EAAE,GAAgB;IACpBhE,KAAK,EAAKZ,YAAY,CAAC8C,WAAW,CAAC,CAAD,CAAZ,CAAZ,CAA6B+B,QAA7B,EADU;IAEpBlE,QAAQ,EAAEX,YAAY,CAAC8C,WAAW,CAAC,CAAD,CAAZ,CAFF;IAGpBpC,QAAQ,EAAEV,YAAY,CAAC8C,WAAW,CAAC,CAAD,CAAZ,CAHF;IAIpBjC,EAAE,EAAQf,aAAa,CAACgD,WAAW,CAAC,CAAD,CAAZ,CAJH;IAKpB/C,KAAK,EAAKC,YAAY,CAAC8C,WAAW,CAAC,CAAD,CAAZ,CALF;IAMpBrC,IAAI,EAAMqC,WAAW,CAAC,CAAD,CAND;IAOpBtC,OAAO,EAAG;EAPU,CAAxB,CAPsC,CAiBtC;;EACA,IAAIsC,WAAW,CAACxC,MAAZ,KAAuB,CAA3B,EAA8B;IAAE,OAAOsE,EAAP;EAAY;;EAE5C,IAAI;IACAA,EAAE,CAACf,CAAH,GAAOlF,SAAS,CAACsB,IAAV,CAAe6C,WAAW,CAAC,CAAD,CAA1B,EAA+B+B,QAA/B,EAAP;EAEH,CAHD,CAGE,OAAOG,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,OAAOJ,EAAP;EACH;;EAEDA,EAAE,CAACxB,CAAH,GAAOnE,UAAU,CAAC6D,WAAW,CAAC,CAAD,CAAZ,EAAiB,EAAjB,CAAjB;EACA8B,EAAE,CAACvB,CAAH,GAAOpE,UAAU,CAAC6D,WAAW,CAAC,CAAD,CAAZ,EAAiB,EAAjB,CAAjB;;EAEA,IAAInE,SAAS,CAACsB,IAAV,CAAe2E,EAAE,CAACxB,CAAlB,EAAqBkC,MAArB,MAAiC3G,SAAS,CAACsB,IAAV,CAAe2E,EAAE,CAACvB,CAAlB,EAAqBiC,MAArB,EAArC,EAAoE;IAChE;IACAV,EAAE,CAACpE,OAAH,GAAaoE,EAAE,CAACf,CAAhB;IACAe,EAAE,CAACf,CAAH,GAAO,CAAP;EAEH,CALD,MAKO;IACH;IAEAe,EAAE,CAACpE,OAAH,GAAasD,IAAI,CAACC,KAAL,CAAW,CAACa,EAAE,CAACf,CAAH,GAAO,EAAR,IAAc,CAAzB,CAAb;;IACA,IAAIe,EAAE,CAACpE,OAAH,GAAa,CAAjB,EAAoB;MAAEoE,EAAE,CAACpE,OAAH,GAAa,CAAb;IAAiB;;IAEvC,IAAI2C,aAAa,GAAGyB,EAAE,CAACf,CAAH,GAAO,EAA3B;IAEA,MAAML,GAAG,GAAGV,WAAW,CAAC6B,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAZ;;IAEA,IAAIC,EAAE,CAACpE,OAAH,KAAe,CAAnB,EAAsB;MAClBgD,GAAG,CAACN,IAAJ,CAASlE,OAAO,CAAC4F,EAAE,CAACpE,OAAJ,CAAhB;MACAgD,GAAG,CAACN,IAAJ,CAAS,IAAT;MACAM,GAAG,CAACN,IAAJ,CAAS,IAAT;MACAC,aAAa,IAAIyB,EAAE,CAACpE,OAAH,GAAa,CAAb,GAAiB,CAAlC;IACH;;IAED,MAAMU,MAAM,GAAG5B,SAAS,CAACE,GAAG,CAAC8D,MAAJ,CAAWE,GAAX,CAAD,CAAxB;;IACA,IAAI;MACAoB,EAAE,CAAC3E,IAAH,GAAUgB,cAAc,CAACC,MAAD,EAAS;QAAEkC,CAAC,EAAEpE,OAAO,CAAC4F,EAAE,CAACxB,CAAJ,CAAZ;QAAoBC,CAAC,EAAErE,OAAO,CAAC4F,EAAE,CAACvB,CAAJ,CAA9B;QAAsCF,aAAa,EAAEA;MAArD,CAAT,CAAxB;IACH,CAFD,CAEE,OAAO6B,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;;IAEDJ,EAAE,CAACO,IAAH,GAAU7F,SAAS,CAAC+F,cAAD,CAAnB;EACH;;EAEDT,EAAE,CAACV,IAAH,GAAU,IAAV;EAEA,OAAOU,EAAP;AACH;;AAGD,OAAM,SAAUW,KAAV,CAAgBF,cAAhB,EAAyC;EAC3C,MAAMZ,OAAO,GAAG7F,QAAQ,CAACyG,cAAD,CAAxB,CAD2C,CAG3C;;EACA,IAAIZ,OAAO,CAAC,CAAD,CAAP,GAAa,IAAjB,EAAuB;IAAE,OAAOW,MAAM,CAACX,OAAD,CAAb;EAAyB,CAJP,CAM3C;;;EACA,QAAQA,OAAO,CAAC,CAAD,CAAf;IACI,KAAK,CAAL;MACI,OAAOD,aAAa,CAACC,OAAD,CAApB;;IACJ;MACI;EAJR;;EAOA,OAAO5E,MAAM,CAACsE,UAAP,CAAkB,iCAAkCM,OAAO,CAAC,CAAD,CAAI,EAA/D,EAAmE9E,MAAM,CAACyE,MAAP,CAAcC,qBAAjF,EAAwG;IAC3GC,SAAS,EAAE,kBADgG;IAE3GC,eAAe,EAAEE,OAAO,CAAC,CAAD;EAFmF,CAAxG,CAAP;AAIH","names":["getAddress","BigNumber","arrayify","hexConcat","hexDataLength","hexDataSlice","hexlify","hexZeroPad","isBytesLike","splitSignature","stripZeros","Zero","keccak256","checkProperties","RLP","computePublicKey","recoverPublicKey","Logger","version","logger","handleAddress","value","handleNumber","from","transactionFields","name","maxLength","numeric","length","allowedTransactionKeys","chainId","data","gasLimit","gasPrice","nonce","to","computeAddress","key","publicKey","recoverAddress","digest","signature","formatNumber","result","toHexString","throwArgumentError","accessSetify","addr","storageKeys","address","map","storageKey","index","toLowerCase","accessListify","Array","isArray","set","Object","keys","reduce","accum","sort","a","b","localeCompare","formatAccessList","_serializeEip2930","transaction","fields","accessList","sig","push","recoveryParam","r","s","encode","_serialize","raw","forEach","fieldInfo","options","hexPad","v","Math","floor","pop","serialize","type","throwError","errors","UNSUPPORTED_OPERATION","operation","transactionType","_parseEip2930","payload","decode","slice","tx","toNumber","recid","Error","error","console","log","hash","_parse","rawTransaction","isZero","parse"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}