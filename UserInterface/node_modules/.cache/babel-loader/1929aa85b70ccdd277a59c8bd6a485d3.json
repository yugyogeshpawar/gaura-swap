{"ast":null,"code":"import { JSBI, Percent, Router, TradeType } from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../constants';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport { useActiveWeb3React } from './index';\nimport useTransactionDeadline from './useTransactionDeadline';\nimport useENS from './useENS';\nexport let SwapCallbackState;\n\n(function (SwapCallbackState) {\n  SwapCallbackState[SwapCallbackState[\"INVALID\"] = 0] = \"INVALID\";\n  SwapCallbackState[SwapCallbackState[\"LOADING\"] = 1] = \"LOADING\";\n  SwapCallbackState[SwapCallbackState[\"VALID\"] = 2] = \"VALID\";\n})(SwapCallbackState || (SwapCallbackState = {}));\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(trade) {\n  let allowedSlippage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INITIAL_ALLOWED_SLIPPAGE;\n  let // in bips\n  recipientAddressOrName = arguments.length > 2 ? arguments[2] : undefined;\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  const deadline = useTransactionDeadline();\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return [];\n    const contract = getRouterContract(chainId, library, account);\n\n    if (!contract) {\n      return [];\n    }\n\n    const swapMethods = [];\n    swapMethods.push(Router.swapCallParameters(trade, {\n      feeOnTransfer: false,\n      allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n      recipient,\n      deadline: deadline.toNumber()\n    }));\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push(Router.swapCallParameters(trade, {\n        feeOnTransfer: true,\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n        recipient,\n        deadline: deadline.toNumber()\n      }));\n    }\n\n    return swapMethods.map(parameters => ({\n      parameters,\n      contract\n    }));\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade]);\n} // returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\n\n\nexport function useSwapCallback(trade) {\n  let allowedSlippage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INITIAL_ALLOWED_SLIPPAGE;\n  let // in bips\n  recipientAddressOrName = arguments.length > 2 ? arguments[2] : undefined;\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName);\n  const addTransaction = useTransactionAdder();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies'\n      };\n    }\n\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient'\n        };\n      } else {\n        return {\n          state: SwapCallbackState.LOADING,\n          callback: null,\n          error: null\n        };\n      }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap() {\n        const estimatedCalls = await Promise.all(swapCalls.map(call => {\n          const {\n            parameters: {\n              methodName,\n              args,\n              value\n            },\n            contract\n          } = call;\n          const options = !value || isZero(value) ? {} : {\n            value\n          };\n          return contract.estimateGas[methodName](...args, options).then(gasEstimate => {\n            return {\n              call,\n              gasEstimate\n            };\n          }).catch(gasError => {\n            console.debug('Gas estimate failed, trying eth_call to extract error', call);\n            return contract.callStatic[methodName](...args, options).then(result => {\n              console.debug('Unexpected successful call after failed estimate gas', call, gasError, result);\n              return {\n                call,\n                error: new Error('Unexpected issue with estimating the gas. Please try again.')\n              };\n            }).catch(callError => {\n              console.debug('Call threw error', call, callError);\n              let errorMessage;\n\n              switch (callError.reason) {\n                case 'SwapRouterV2: INSUFFICIENT_OUTPUT_AMOUNT':\n                case 'SwapRouterV2: EXCESSIVE_INPUT_AMOUNT':\n                  errorMessage = 'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n                  break;\n\n                default:\n                  errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`;\n              }\n\n              return {\n                call,\n                error: new Error(errorMessage)\n              };\n            });\n          });\n        })); // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n\n        const successfulEstimation = estimatedCalls.find((el, ix, list) => 'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]));\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter(call => 'error' in call);\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error;\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error');\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: {\n              methodName,\n              args,\n              value\n            }\n          },\n          gasEstimate\n        } = successfulEstimation;\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? {\n            value,\n            from: account\n          } : {\n            from: account\n          })\n        }).then(response => {\n          const inputSymbol = trade.inputAmount.currency.symbol;\n          const outputSymbol = trade.outputAmount.currency.symbol;\n          const inputAmount = trade.inputAmount.toSignificant(3);\n          const outputAmount = trade.outputAmount.toSignificant(3);\n          const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`;\n          const withRecipient = recipient === account ? base : `${base} to ${recipientAddressOrName && isAddress(recipientAddressOrName) ? shortenAddress(recipientAddressOrName) : recipientAddressOrName}`;\n          addTransaction(response, {\n            summary: withRecipient\n          });\n          return response.hash;\n        }).catch(error => {\n          // if the user rejected the tx, pass this along\n          if ((error === null || error === void 0 ? void 0 : error.code) === 4001) {\n            throw new Error('Transaction rejected.');\n          } else {\n            // otherwise, the error was unexpected and we need to convey that\n            console.error(`Swap failed`, error, methodName, args, value);\n            throw new Error(`Swap failed: ${error.message}`);\n          }\n        });\n      },\n      error: null\n    };\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction]);\n}","map":{"version":3,"names":["JSBI","Percent","Router","TradeType","useMemo","BIPS_BASE","INITIAL_ALLOWED_SLIPPAGE","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","shortenAddress","isZero","useActiveWeb3React","useTransactionDeadline","useENS","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","recipientAddressOrName","account","chainId","library","address","recipientAddress","recipient","deadline","contract","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","toNumber","tradeType","EXACT_INPUT","map","parameters","useSwapCallback","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","onSwap","estimatedCalls","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","debug","callStatic","result","Error","callError","errorMessage","reason","successfulEstimation","find","el","ix","list","length","errorCalls","filter","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","summary","hash","code","message"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/hooks/useSwapCallback.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../constants';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport { useActiveWeb3React } from './index';\nimport useTransactionDeadline from './useTransactionDeadline';\nimport useENS from './useENS';\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract;\n  parameters: SwapParameters;\n}\n\ninterface SuccessfulCall {\n  call: SwapCall;\n  gasEstimate: BigNumber;\n}\n\ninterface FailedCall {\n  call: SwapCall;\n  error: Error;\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall;\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React();\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  const deadline = useTransactionDeadline();\n\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return [];\n\n    const contract: Contract | null = getRouterContract(chainId, library, account);\n    if (!contract) {\n      return [];\n    }\n\n    const swapMethods = [];\n\n    swapMethods.push(\n      Router.swapCallParameters(trade, {\n        feeOnTransfer: false,\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n        recipient,\n        deadline: deadline.toNumber(),\n      })\n    );\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push(\n        Router.swapCallParameters(trade, {\n          feeOnTransfer: true,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          deadline: deadline.toNumber(),\n        })\n      );\n    }\n\n    return swapMethods.map((parameters) => ({ parameters, contract }));\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade]);\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId, library } = useActiveWeb3React();\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName);\n\n  const addTransaction = useTransactionAdder();\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' };\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' };\n      } else {\n        return { state: SwapCallbackState.LOADING, callback: null, error: null };\n      }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call;\n            const options = !value || isZero(value) ? {} : { value };\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                };\n              })\n              .catch((gasError) => {\n                console.debug('Gas estimate failed, trying eth_call to extract error', call);\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result);\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') };\n                  })\n                  .catch((callError) => {\n                    console.debug('Call threw error', call, callError);\n                    let errorMessage: string;\n                    switch (callError.reason) {\n                      case 'SwapRouterV2: INSUFFICIENT_OUTPUT_AMOUNT':\n                      case 'SwapRouterV2: EXCESSIVE_INPUT_AMOUNT':\n                        errorMessage =\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n                        break;\n                      default:\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`;\n                    }\n                    return { call, error: new Error(errorMessage) };\n                  });\n              });\n          })\n        );\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\n        );\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call);\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error;\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error');\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation;\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol;\n            const outputSymbol = trade.outputAmount.currency.symbol;\n            const inputAmount = trade.inputAmount.toSignificant(3);\n            const outputAmount = trade.outputAmount.toSignificant(3);\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`;\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? shortenAddress(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`;\n\n            addTransaction(response, {\n              summary: withRecipient,\n            });\n\n            return response.hash;\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.');\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value);\n              throw new Error(`Swap failed: ${error.message}`);\n            }\n          });\n      },\n      error: null,\n    };\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}