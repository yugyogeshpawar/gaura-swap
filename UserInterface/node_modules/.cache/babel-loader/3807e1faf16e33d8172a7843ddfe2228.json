{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { wordlists } from \"@ethersproject/wordlists\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"); // \"Bitcoin seed\"\n\nvar MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\nvar HardenedBit = 0x80000000; // Returns a byte with the MSB bits set\n\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits;\n} // Returns a byte with the LSB bits set\n\n\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1;\n}\n\nfunction bytes32(value) {\n  return hexZeroPad(hexlify(value), 32);\n}\n\nfunction base58check(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nfunction getWordlist(wordlist) {\n  if (wordlist == null) {\n    return wordlists[\"en\"];\n  }\n\n  if (typeof wordlist === \"string\") {\n    var words = wordlists[wordlist];\n\n    if (words == null) {\n      logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n    }\n\n    return words;\n  }\n\n  return wordlist;\n}\n\nvar _constructorGuard = {};\nexport var defaultPath = \"m/44'/60'/0'/0/0\";\n;\nexport var HDNode = /*#__PURE__*/function () {\n  /**\n   *  This constructor should not be called directly.\n   *\n   *  Please use:\n   *   - fromMnemonic\n   *   - fromSeed\n   */\n  function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n    _classCallCheck(this, HDNode);\n\n    logger.checkNew(this instanceof HDNode ? this.constructor : void 0, HDNode);\n    /* istanbul ignore if */\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"HDNode constructor cannot be called directly\");\n    }\n\n    if (privateKey) {\n      var signingKey = new SigningKey(privateKey);\n      defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n      defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n    } else {\n      defineReadOnly(this, \"privateKey\", null);\n      defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n    }\n\n    defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n    defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n    defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    defineReadOnly(this, \"chainCode\", chainCode);\n    defineReadOnly(this, \"index\", index);\n    defineReadOnly(this, \"depth\", depth);\n\n    if (mnemonicOrPath == null) {\n      // From a source that does not preserve the path (e.g. extended keys)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", null);\n    } else if (typeof mnemonicOrPath === \"string\") {\n      // From a source that does not preserve the mnemonic (e.g. neutered)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", mnemonicOrPath);\n    } else {\n      // From a fully qualified source\n      defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n      defineReadOnly(this, \"path\", mnemonicOrPath.path);\n    }\n  }\n\n  _createClass(HDNode, [{\n    key: \"extendedKey\",\n    get: function get() {\n      // We only support the mainnet values for now, but if anyone needs\n      // testnet values, let me know. I believe current senitment is that\n      // we should always use mainnet, and use BIP-44 to derive the network\n      //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n      //   - Testnet: public=0x043587CF, private=0x04358394\n      if (this.depth >= 256) {\n        throw new Error(\"Depth too large!\");\n      }\n\n      return base58check(concat([this.privateKey != null ? \"0x0488ADE4\" : \"0x0488B21E\", hexlify(this.depth), this.parentFingerprint, hexZeroPad(hexlify(this.index), 4), this.chainCode, this.privateKey != null ? concat([\"0x00\", this.privateKey]) : this.publicKey]));\n    }\n  }, {\n    key: \"neuter\",\n    value: function neuter() {\n      return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n  }, {\n    key: \"_derive\",\n    value: function _derive(index) {\n      if (index > 0xffffffff) {\n        throw new Error(\"invalid index - \" + String(index));\n      } // Base path\n\n\n      var path = this.path;\n\n      if (path) {\n        path += \"/\" + (index & ~HardenedBit);\n      }\n\n      var data = new Uint8Array(37);\n\n      if (index & HardenedBit) {\n        if (!this.privateKey) {\n          throw new Error(\"cannot derive child of neutered node\");\n        } // Data = 0x00 || ser_256(k_par)\n\n\n        data.set(arrayify(this.privateKey), 1); // Hardened path\n\n        if (path) {\n          path += \"'\";\n        }\n      } else {\n        // Data = ser_p(point(k_par))\n        data.set(arrayify(this.publicKey));\n      } // Data += ser_32(i)\n\n\n      for (var i = 24; i >= 0; i -= 8) {\n        data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n      }\n\n      var I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n      var IL = I.slice(0, 32);\n      var IR = I.slice(32); // The private key\n\n      var ki = null; // The public key\n\n      var Ki = null;\n\n      if (this.privateKey) {\n        ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n      } else {\n        var ek = new SigningKey(hexlify(IL));\n        Ki = ek._addPoint(this.publicKey);\n      }\n\n      var mnemonicOrPath = path;\n      var srcMnemonic = this.mnemonic;\n\n      if (srcMnemonic) {\n        mnemonicOrPath = Object.freeze({\n          phrase: srcMnemonic.phrase,\n          path: path,\n          locale: srcMnemonic.locale || \"en\"\n        });\n      }\n\n      return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n  }, {\n    key: \"derivePath\",\n    value: function derivePath(path) {\n      var components = path.split(\"/\");\n\n      if (components.length === 0 || components[0] === \"m\" && this.depth !== 0) {\n        throw new Error(\"invalid path - \" + path);\n      }\n\n      if (components[0] === \"m\") {\n        components.shift();\n      }\n\n      var result = this;\n\n      for (var i = 0; i < components.length; i++) {\n        var component = components[i];\n\n        if (component.match(/^[0-9]+'$/)) {\n          var index = parseInt(component.substring(0, component.length - 1));\n\n          if (index >= HardenedBit) {\n            throw new Error(\"invalid path index - \" + component);\n          }\n\n          result = result._derive(HardenedBit + index);\n        } else if (component.match(/^[0-9]+$/)) {\n          var _index = parseInt(component);\n\n          if (_index >= HardenedBit) {\n            throw new Error(\"invalid path index - \" + component);\n          }\n\n          result = result._derive(_index);\n        } else {\n          throw new Error(\"invalid path component - \" + component);\n        }\n      }\n\n      return result;\n    }\n  }], [{\n    key: \"_fromSeed\",\n    value: function _fromSeed(seed, mnemonic) {\n      var seedArray = arrayify(seed);\n\n      if (seedArray.length < 16 || seedArray.length > 64) {\n        throw new Error(\"invalid seed\");\n      }\n\n      var I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n      return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n  }, {\n    key: \"fromMnemonic\",\n    value: function fromMnemonic(mnemonic, password, wordlist) {\n      // If a locale name was passed in, find the associated wordlist\n      wordlist = getWordlist(wordlist); // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n\n      mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n      return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n        phrase: mnemonic,\n        path: \"m\",\n        locale: wordlist.locale\n      });\n    }\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      return HDNode._fromSeed(seed, null);\n    }\n  }, {\n    key: \"fromExtendedKey\",\n    value: function fromExtendedKey(extendedKey) {\n      var bytes = Base58.decode(extendedKey);\n\n      if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n        logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n      }\n\n      var depth = bytes[4];\n      var parentFingerprint = hexlify(bytes.slice(5, 9));\n      var index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n      var chainCode = hexlify(bytes.slice(13, 45));\n      var key = bytes.slice(45, 78);\n\n      switch (hexlify(bytes.slice(0, 4))) {\n        // Public Key\n        case \"0x0488b21e\":\n        case \"0x043587cf\":\n          return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n        // Private Key\n\n        case \"0x0488ade4\":\n        case \"0x04358394 \":\n          if (key[0] !== 0) {\n            break;\n          }\n\n          return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n      }\n\n      return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n  }]);\n\n  return HDNode;\n}();\nexport function mnemonicToSeed(mnemonic, password) {\n  if (!password) {\n    password = \"\";\n  }\n\n  var salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n  wordlist = getWordlist(wordlist);\n  logger.checkNormalize();\n  var words = wordlist.split(mnemonic);\n\n  if (words.length % 3 !== 0) {\n    throw new Error(\"invalid mnemonic\");\n  }\n\n  var entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n  var offset = 0;\n\n  for (var i = 0; i < words.length; i++) {\n    var index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n\n    if (index === -1) {\n      throw new Error(\"invalid mnemonic\");\n    }\n\n    for (var bit = 0; bit < 11; bit++) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n\n      offset++;\n    }\n  }\n\n  var entropyBits = 32 * words.length / 3;\n  var checksumBits = words.length / 3;\n  var checksumMask = getUpperMask(checksumBits);\n  var checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new Error(\"invalid checksum\");\n  }\n\n  return hexlify(entropy.slice(0, entropyBits / 8));\n}\nexport function entropyToMnemonic(entropy, wordlist) {\n  wordlist = getWordlist(wordlist);\n  entropy = arrayify(entropy);\n\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new Error(\"invalid entropy\");\n  }\n\n  var indices = [0];\n  var remainingBits = 11;\n\n  for (var i = 0; i < entropy.length; i++) {\n    // Consume the whole byte (with still more to go)\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8; // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits; // Start the next word\n\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  } // Compute the checksum bits\n\n\n  var checksumBits = entropy.length / 4;\n  var checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits); // Shift the checksum into the word indices\n\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n  return wordlist.join(indices.map(function (index) {\n    return wordlist.getWord(index);\n  }));\n}\nexport function isValidMnemonic(mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist);\n    return true;\n  } catch (error) {}\n\n  return false;\n}\nexport function getAccountPath(index) {\n  if (typeof index !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n    logger.throwArgumentError(\"invalid account index\", \"index\", index);\n  }\n\n  return \"m/44'/60'/\".concat(index, \"'/0/0\");\n}","map":{"version":3,"mappings":"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","names":["Base58","arrayify","concat","hexDataSlice","hexZeroPad","hexlify","BigNumber","toUtf8Bytes","UnicodeNormalizationForm","pbkdf2","defineReadOnly","SigningKey","computeHmac","ripemd160","sha256","SupportedAlgorithm","computeAddress","wordlists","Logger","version","logger","N","from","MasterSecret","HardenedBit","getUpperMask","bits","getLowerMask","bytes32","value","base58check","data","encode","getWordlist","wordlist","words","throwArgumentError","_constructorGuard","defaultPath","HDNode","constructorGuard","privateKey","publicKey","parentFingerprint","chainCode","index","depth","mnemonicOrPath","checkNew","Error","signingKey","compressedPublicKey","path","String","Uint8Array","set","i","I","sha512","IL","slice","IR","ki","Ki","add","mod","ek","_addPoint","srcMnemonic","mnemonic","Object","freeze","phrase","locale","fingerprint","components","split","length","shift","result","component","match","parseInt","substring","_derive","seed","seedArray","password","entropyToMnemonic","mnemonicToEntropy","_fromSeed","mnemonicToSeed","extendedKey","bytes","decode","key","salt","NFKD","checkNormalize","entropy","Math","ceil","offset","getWordIndex","normalize","bit","entropyBits","checksumBits","checksumMask","checksum","indices","remainingBits","push","join","map","getWord","isValidMnemonic","error","getAccountPath"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}