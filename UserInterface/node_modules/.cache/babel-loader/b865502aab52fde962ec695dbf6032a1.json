{"ast":null,"code":"import { useAllLists } from 'state/lists/hooks';\nimport { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback';\nimport useInterval from '../../hooks/useInterval';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { acceptListUpdate } from './actions';\nimport { useActiveListUrls } from './hooks';\nimport { useAllInactiveTokens } from 'hooks/Tokens';\nexport default function Updater() {\n  const {\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const isWindowVisible = useIsWindowVisible(); // get all loaded lists, and the active urls\n\n  const lists = useAllLists();\n  const activeListUrls = useActiveListUrls(); // initiate loading\n\n  useAllInactiveTokens();\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach(url => fetchList(url).catch(error => console.debug('interval list fetching error', error)));\n  }, [fetchList, isWindowVisible, lists]); // fetch all lists every 10 minutes, but only after we initialize library\n\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null); // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // automatically update lists if versions are minor/patch\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens); // automatically update minor/patch as long as bump matches the min update\n\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl));\n            } else {\n              console.error(`List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`);\n            }\n\n            break;\n\n          case VersionUpgrade.MAJOR:\n            if (activeListUrls === null || activeListUrls === void 0 ? void 0 : activeListUrls.includes(listUrl)) {\n              dispatch(acceptListUpdate(listUrl));\n            }\n\n        }\n      }\n    });\n  }, [dispatch, lists, activeListUrls]);\n  return null;\n}","map":{"version":3,"names":["useAllLists","getVersionUpgrade","minVersionBump","VersionUpgrade","useCallback","useEffect","useDispatch","useActiveWeb3React","useFetchListCallback","useInterval","useIsWindowVisible","acceptListUpdate","useActiveListUrls","useAllInactiveTokens","Updater","library","dispatch","isWindowVisible","lists","activeListUrls","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","min","tokens","MAJOR","includes"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/state/lists/updater.ts"],"sourcesContent":["import { useAllLists } from 'state/lists/hooks';\nimport { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback';\nimport useInterval from '../../hooks/useInterval';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { AppDispatch } from '../index';\nimport { acceptListUpdate } from './actions';\nimport { useActiveListUrls } from './hooks';\nimport { useAllInactiveTokens } from 'hooks/Tokens';\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n  const isWindowVisible = useIsWindowVisible();\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists();\n  const activeListUrls = useActiveListUrls();\n\n  // initiate loading\n  useAllInactiveTokens();\n\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach((url) =>\n      fetchList(url).catch((error) => console.debug('interval list fetching error', error))\n    );\n  }, [fetchList, isWindowVisible, lists]);\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null);\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl];\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]);\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl];\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens);\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl));\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              );\n            }\n            break;\n\n          case VersionUpgrade.MAJOR:\n            if (activeListUrls?.includes(listUrl)) {\n              dispatch(acceptListUpdate(listUrl));\n            }\n        }\n      }\n    });\n  }, [dispatch, lists, activeListUrls]);\n\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}