{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport application from './application/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport mint from './mint/reducer';\nimport lists from './lists/reducer';\nimport burn from './burn/reducer';\nimport multicall from './multicall/reducer';\nconst PERSISTED_KEYS = ['user', 'transactions', 'lists'];\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists\n  },\n  middleware: [...getDefaultMiddleware({\n    immutableCheck: false,\n    thunk: false,\n    serializableCheck: false\n  }), save({\n    states: PERSISTED_KEYS\n  })],\n  preloadedState: load({\n    states: PERSISTED_KEYS\n  })\n});\nstore.dispatch(updateVersion());\nexport default store;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","save","load","application","updateVersion","user","transactions","swap","mint","lists","burn","multicall","PERSISTED_KEYS","store","reducer","middleware","immutableCheck","thunk","serializableCheck","states","preloadedState","dispatch"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/state/index.ts"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\n\nimport application from './application/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport mint from './mint/reducer';\nimport lists from './lists/reducer';\nimport burn from './burn/reducer';\nimport multicall from './multicall/reducer';\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists,\n  },\n  middleware: [\n    ...getDefaultMiddleware({ immutableCheck: false, thunk: false, serializableCheck: false }),\n    save({ states: PERSISTED_KEYS }),\n  ],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n});\n\nstore.dispatch(updateVersion());\n\nexport default store;\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,2BAA3B;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,MAAMC,cAAwB,GAAG,CAAC,MAAD,EAAS,cAAT,EAAyB,OAAzB,CAAjC;AAEA,MAAMC,KAAK,GAAGd,cAAc,CAAC;EAC3Be,OAAO,EAAE;IACPX,WADO;IAEPE,IAFO;IAGPC,YAHO;IAIPC,IAJO;IAKPC,IALO;IAMPE,IANO;IAOPC,SAPO;IAQPF;EARO,CADkB;EAW3BM,UAAU,EAAE,CACV,GAAGf,oBAAoB,CAAC;IAAEgB,cAAc,EAAE,KAAlB;IAAyBC,KAAK,EAAE,KAAhC;IAAuCC,iBAAiB,EAAE;EAA1D,CAAD,CADb,EAEVjB,IAAI,CAAC;IAAEkB,MAAM,EAAEP;EAAV,CAAD,CAFM,CAXe;EAe3BQ,cAAc,EAAElB,IAAI,CAAC;IAAEiB,MAAM,EAAEP;EAAV,CAAD;AAfO,CAAD,CAA5B;AAkBAC,KAAK,CAACQ,QAAN,CAAejB,aAAa,EAA5B;AAEA,eAAeS,KAAf"},"metadata":{},"sourceType":"module"}