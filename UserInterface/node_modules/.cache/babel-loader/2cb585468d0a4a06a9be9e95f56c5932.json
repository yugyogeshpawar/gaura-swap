{"ast":null,"code":"/**\n * Multihash implementation in JavaScript.\n */\n'use strict';\n\nconst multibase = require('multibase');\n\nconst varint = require('varint');\n\nconst {\n  names\n} = require('./constants');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayConcat = require('uint8arrays/concat');\n\nconst codes =\n/** @type {import('./types').CodeNameMap} */\n{}; // eslint-disable-next-line guard-for-in\n\nfor (const key in names) {\n  const name =\n  /** @type {HashName} */\n  key;\n  codes[names[name]] = name;\n}\n\nObject.freeze(codes);\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\n\nfunction toHexString(hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array');\n  }\n\n  return uint8ArrayToString(hash, 'base16');\n}\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Uint8Array}\n */\n\n\nfunction fromHexString(hash) {\n  return uint8ArrayFromString(hash, 'base16');\n}\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\n\n\nfunction toB58String(hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array');\n  }\n\n  return uint8ArrayToString(multibase.encode('base58btc', hash)).slice(1);\n}\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Uint8Array} hash\n * @returns {Uint8Array}\n */\n\n\nfunction fromB58String(hash) {\n  const encoded = hash instanceof Uint8Array ? uint8ArrayToString(hash) : hash;\n  return multibase.decode('z' + encoded);\n}\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Uint8Array} bytes\n * @returns {{code: HashCode, name: HashName, length: number, digest: Uint8Array}} result\n */\n\n\nfunction decode(bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new Error('multihash must be a Uint8Array');\n  }\n\n  if (bytes.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.');\n  }\n\n  const code =\n  /** @type {HashCode} */\n  varint.decode(bytes);\n\n  if (!isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`);\n  }\n\n  bytes = bytes.slice(varint.decode.bytes);\n  const len = varint.decode(bytes);\n\n  if (len < 0) {\n    throw new Error(`multihash invalid length: ${len}`);\n  }\n\n  bytes = bytes.slice(varint.decode.bytes);\n\n  if (bytes.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${uint8ArrayToString(bytes, 'base16')}`);\n  }\n\n  return {\n    code,\n    name: codes[code],\n    length: len,\n    digest: bytes\n  };\n}\n/**\n * Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Uint8Array} digest\n * @param {HashName | HashCode} code\n * @param {number} [length]\n * @returns {Uint8Array}\n */\n\n\nfunction encode(digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code');\n  } // ensure it's a hashfunction code.\n\n\n  const hashfn = coerceCode(code);\n\n  if (!(digest instanceof Uint8Array)) {\n    throw new Error('digest should be a Uint8Array');\n  }\n\n  if (length == null) {\n    length = digest.length;\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.');\n  }\n\n  const hash = varint.encode(hashfn);\n  const len = varint.encode(length);\n  return uint8ArrayConcat([hash, len, digest], hash.length + len.length + digest.length);\n}\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n *\n * @param {HashName | number} name\n * @returns {number}\n */\n\n\nfunction coerceCode(name) {\n  let code = name;\n\n  if (typeof name === 'string') {\n    if (names[name] === undefined) {\n      throw new Error(`Unrecognized hash function named: ${name}`);\n    }\n\n    code = names[name];\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`);\n  } // @ts-ignore\n\n\n  if (codes[code] === undefined && !isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`);\n  }\n\n  return code;\n}\n/**\n * Checks if a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\n\n\nfunction isAppCode(code) {\n  return code > 0 && code < 0x10;\n}\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {HashCode} code\n * @returns {boolean}\n */\n\n\nfunction isValidCode(code) {\n  if (isAppCode(code)) {\n    return true;\n  }\n\n  if (codes[code]) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {void}\n * @throws {Error}\n */\n\n\nfunction validate(multihash) {\n  decode(multihash); // throws if bad.\n}\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n * @throws {Error}\n */\n\n\nfunction prefix(multihash) {\n  validate(multihash);\n  return multihash.subarray(0, 2);\n}\n\nmodule.exports = {\n  names,\n  codes,\n  toHexString,\n  fromHexString,\n  toB58String,\n  fromB58String,\n  decode,\n  encode,\n  coerceCode,\n  isAppCode,\n  validate,\n  prefix,\n  isValidCode\n};\n/**\n * @typedef { import(\"./constants\").HashCode } HashCode\n * @typedef { import(\"./constants\").HashName } HashName\n */","map":{"version":3,"names":["multibase","require","varint","names","uint8ArrayToString","uint8ArrayFromString","uint8ArrayConcat","codes","key","name","Object","freeze","toHexString","hash","Uint8Array","Error","fromHexString","toB58String","encode","slice","fromB58String","encoded","decode","bytes","length","code","isValidCode","toString","len","digest","undefined","hashfn","coerceCode","isAppCode","validate","multihash","prefix","subarray","module","exports"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/multihashes/src/index.js"],"sourcesContent":["/**\n * Multihash implementation in JavaScript.\n */\n'use strict'\n\nconst multibase = require('multibase')\nconst varint = require('varint')\nconst { names } = require('./constants')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayConcat = require('uint8arrays/concat')\n\nconst codes = /** @type {import('./types').CodeNameMap} */({})\n\n// eslint-disable-next-line guard-for-in\nfor (const key in names) {\n  const name = /** @type {HashName} */(key)\n  codes[names[name]] = name\n}\nObject.freeze(codes)\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nfunction toHexString (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return uint8ArrayToString(hash, 'base16')\n}\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Uint8Array}\n */\nfunction fromHexString (hash) {\n  return uint8ArrayFromString(hash, 'base16')\n}\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nfunction toB58String (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return uint8ArrayToString(multibase.encode('base58btc', hash)).slice(1)\n}\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Uint8Array} hash\n * @returns {Uint8Array}\n */\nfunction fromB58String (hash) {\n  const encoded = hash instanceof Uint8Array\n    ? uint8ArrayToString(hash)\n    : hash\n\n  return multibase.decode('z' + encoded)\n}\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Uint8Array} bytes\n * @returns {{code: HashCode, name: HashName, length: number, digest: Uint8Array}} result\n */\nfunction decode (bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new Error('multihash must be a Uint8Array')\n  }\n\n  if (bytes.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.')\n  }\n\n  const code = /** @type {HashCode} */(varint.decode(bytes))\n  if (!isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n  bytes = bytes.slice(varint.decode.bytes)\n\n  const len = varint.decode(bytes)\n  if (len < 0) {\n    throw new Error(`multihash invalid length: ${len}`)\n  }\n  bytes = bytes.slice(varint.decode.bytes)\n\n  if (bytes.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${uint8ArrayToString(bytes, 'base16')}`)\n  }\n\n  return {\n    code,\n    name: codes[code],\n    length: len,\n    digest: bytes\n  }\n}\n\n/**\n * Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Uint8Array} digest\n * @param {HashName | HashCode} code\n * @param {number} [length]\n * @returns {Uint8Array}\n */\nfunction encode (digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = coerceCode(code)\n\n  if (!(digest instanceof Uint8Array)) {\n    throw new Error('digest should be a Uint8Array')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  const hash = varint.encode(hashfn)\n  const len = varint.encode(length)\n  return uint8ArrayConcat([hash, len, digest], hash.length + len.length + digest.length)\n}\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n *\n * @param {HashName | number} name\n * @returns {number}\n */\nfunction coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (names[name] === undefined) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  // @ts-ignore\n  if (codes[code] === undefined && !isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n/**\n * Checks if a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction isAppCode (code) {\n  return code > 0 && code < 0x10\n}\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {HashCode} code\n * @returns {boolean}\n */\nfunction isValidCode (code) {\n  if (isAppCode(code)) {\n    return true\n  }\n\n  if (codes[code]) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {void}\n * @throws {Error}\n */\nfunction validate (multihash) {\n  decode(multihash) // throws if bad.\n}\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n * @throws {Error}\n */\nfunction prefix (multihash) {\n  validate(multihash)\n\n  return multihash.subarray(0, 2)\n}\n\nmodule.exports = {\n  names,\n  codes,\n  toHexString,\n  fromHexString,\n  toB58String,\n  fromB58String,\n  decode,\n  encode,\n  coerceCode,\n  isAppCode,\n  validate,\n  prefix,\n  isValidCode\n}\n\n/**\n * @typedef { import(\"./constants\").HashCode } HashCode\n * @typedef { import(\"./constants\").HashName } HashName\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}