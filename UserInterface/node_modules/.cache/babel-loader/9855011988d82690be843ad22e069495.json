{"ast":null,"code":"/*\n *  toFormat v2.0.0\n *  Adds a toFormat instance method to big.js or decimal.js\n *  Copyright (c) 2017 Michael Mclaughlin\n *  MIT Licence\n */\n\n/*\n* Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\n* a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\n*/\nfunction toFormat(Ctor) {\n  'use strict';\n  /*\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\n   *\n   *  Example:\n   *\n   *  x = new Decimal('123456789.987654321')\n   *\n   *  // Add a format object to the constructor...\n   *  Decimal.format = {\n   *    decimalSeparator: '.',\n   *    groupSeparator: ',',\n   *    groupSize: 3,\n   *    secondaryGroupSize: 0,\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\n   *    fractionGroupSize : 0\n   *  }\n   *\n   *  x.toFormat();                // 123,456,789.987654321\n   *  x.toFormat(2, 1);            // 123,456,789.98\n   *\n   *  // And/or add a format object to the big number itself...\n   *  x.format = {\n   *    decimalSeparator: ',',\n   *    groupSeparator: '',\n   *  }\n   *\n   *  x.toFormat();                // 123456789,987654321\n   *\n   *  format = {\n   *    decimalSeparator: '.',\n   *    groupSeparator: ' ',\n   *    groupSize: 3,\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\n   *    fractionGroupSize : 5\n   *  }\n    *  // And/or pass a format object to the method call.\n   *  x.toFormat(format);          // 123 456 789.98765 4321\n   *  x.toFormat(4, format);       // 123 456 789.9877\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\n   *\n   *  [dp] {number} Decimal places. Integer.\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\n   *  [fmt] {Object} A format object.\n   *\n   */\n\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\n    if (!this.e && this.e !== 0) return this.toString(); // Infinity/NaN\n\n    var arr,\n        g1,\n        g2,\n        i,\n        u,\n        // undefined\n    nd,\n        // number of integer digits\n    intd,\n        // integer digits\n    intp,\n        // integer part\n    fracp,\n        // fraction part\n    dsep,\n        // decimalSeparator\n    gsep,\n        // groupSeparator\n    gsize,\n        // groupSize\n    sgsize,\n        // secondaryGroupSize\n    fgsep,\n        // fractionGroupSeparator\n    fgsize,\n        // fractionGroupSize\n    tfmt = this.format || {},\n        cfmt = this.constructor.format || {};\n\n    if (dp != u) {\n      if (typeof dp == 'object') {\n        fmt = dp;\n        dp = u;\n      } else if (rm != u) {\n        if (typeof rm == 'object') {\n          fmt = rm;\n          rm = u;\n        } else if (typeof fmt != 'object') {\n          fmt = {};\n        }\n      } else {\n        fmt = {};\n      }\n    } else {\n      fmt = {};\n    }\n\n    arr = this.toFixed(dp, rm).split('.');\n    intp = arr[0];\n    fracp = arr[1];\n    intd = this.s < 0 ? intp.slice(1) : intp;\n    nd = intd.length;\n    dsep = fmt.decimalSeparator;\n\n    if (dsep == u) {\n      dsep = tfmt.decimalSeparator;\n\n      if (dsep == u) {\n        dsep = cfmt.decimalSeparator;\n        if (dsep == u) dsep = '.';\n      }\n    }\n\n    gsep = fmt.groupSeparator;\n\n    if (gsep == u) {\n      gsep = tfmt.groupSeparator;\n      if (gsep == u) gsep = cfmt.groupSeparator;\n    }\n\n    if (gsep) {\n      gsize = fmt.groupSize;\n\n      if (gsize == u) {\n        gsize = tfmt.groupSize;\n\n        if (gsize == u) {\n          gsize = cfmt.groupSize;\n          if (gsize == u) gsize = 0;\n        }\n      }\n\n      sgsize = fmt.secondaryGroupSize;\n\n      if (sgsize == u) {\n        sgsize = tfmt.secondaryGroupSize;\n\n        if (sgsize == u) {\n          sgsize = cfmt.secondaryGroupSize;\n          if (sgsize == u) sgsize = 0;\n        }\n      }\n\n      if (sgsize) {\n        g1 = +sgsize;\n        g2 = +gsize;\n        nd -= g2;\n      } else {\n        g1 = +gsize;\n        g2 = +sgsize;\n      }\n\n      if (g1 > 0 && nd > 0) {\n        i = nd % g1 || g1;\n        intp = intd.substr(0, i);\n\n        for (; i < nd; i += g1) {\n          intp += gsep + intd.substr(i, g1);\n        }\n\n        if (g2 > 0) intp += gsep + intd.slice(i);\n        if (this.s < 0) intp = '-' + intp;\n      }\n    }\n\n    if (fracp) {\n      fgsep = fmt.fractionGroupSeparator;\n\n      if (fgsep == u) {\n        fgsep = tfmt.fractionGroupSeparator;\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\n      }\n\n      if (fgsep) {\n        fgsize = fmt.fractionGroupSize;\n\n        if (fgsize == u) {\n          fgsize = tfmt.fractionGroupSize;\n\n          if (fgsize == u) {\n            fgsize = cfmt.fractionGroupSize;\n            if (fgsize == u) fgsize = 0;\n          }\n        }\n\n        fgsize = +fgsize;\n\n        if (fgsize) {\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\n        }\n      }\n\n      return intp + dsep + fracp;\n    } else {\n      return intp;\n    }\n  };\n\n  Ctor.format = {\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    fractionGroupSeparator: '',\n    fractionGroupSize: 0\n  };\n  return Ctor;\n}\n\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;","map":{"version":3,"names":["toFormat","Ctor","prototype","dp","rm","fmt","e","toString","arr","g1","g2","i","u","nd","intd","intp","fracp","dsep","gsep","gsize","sgsize","fgsep","fgsize","tfmt","format","cfmt","constructor","toFixed","split","s","slice","length","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","substr","fractionGroupSeparator","fractionGroupSize","replace","RegExp","module","exports"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/@uniswap/sdk/node_modules/toformat/toFormat.js"],"sourcesContent":["/*\n *  toFormat v2.0.0\n *  Adds a toFormat instance method to big.js or decimal.js\n *  Copyright (c) 2017 Michael Mclaughlin\n *  MIT Licence\n */\n\n /*\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\n */\nfunction toFormat(Ctor) {\n  'use strict';\n\n  /*\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\n   *\n   *  Example:\n   *\n   *  x = new Decimal('123456789.987654321')\n   *\n   *  // Add a format object to the constructor...\n   *  Decimal.format = {\n   *    decimalSeparator: '.',\n   *    groupSeparator: ',',\n   *    groupSize: 3,\n   *    secondaryGroupSize: 0,\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\n   *    fractionGroupSize : 0\n   *  }\n   *\n   *  x.toFormat();                // 123,456,789.987654321\n   *  x.toFormat(2, 1);            // 123,456,789.98\n   *\n   *  // And/or add a format object to the big number itself...\n   *  x.format = {\n   *    decimalSeparator: ',',\n   *    groupSeparator: '',\n   *  }\n   *\n   *  x.toFormat();                // 123456789,987654321\n   *\n   *  format = {\n   *    decimalSeparator: '.',\n   *    groupSeparator: ' ',\n   *    groupSize: 3,\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\n   *    fractionGroupSize : 5\n   *  }\n\n   *  // And/or pass a format object to the method call.\n   *  x.toFormat(format);          // 123 456 789.98765 4321\n   *  x.toFormat(4, format);       // 123 456 789.9877\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\n   *\n   *  [dp] {number} Decimal places. Integer.\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\n   *  [fmt] {Object} A format object.\n   *\n   */\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\n\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\n\n    var arr, g1, g2, i,\n      u,                             // undefined\n      nd,                            // number of integer digits\n      intd,                          // integer digits\n      intp,                          // integer part\n      fracp,                         // fraction part\n      dsep,                          // decimalSeparator\n      gsep,                          // groupSeparator\n      gsize,                         // groupSize\n      sgsize,                        // secondaryGroupSize\n      fgsep,                         // fractionGroupSeparator\n      fgsize,                        // fractionGroupSize\n      tfmt = this.format || {},\n      cfmt = this.constructor.format || {};\n\n    if (dp != u) {\n      if (typeof dp == 'object') {\n        fmt = dp;\n        dp = u;\n      } else if (rm != u) {\n        if (typeof rm == 'object') {\n          fmt = rm;\n          rm = u;\n        } else if (typeof fmt != 'object') {\n          fmt = {};\n        }\n      } else {\n        fmt = {};\n      }\n    } else {\n      fmt = {};\n    }\n\n    arr = this.toFixed(dp, rm).split('.');\n    intp = arr[0];\n    fracp = arr[1];\n    intd = this.s < 0 ? intp.slice(1) : intp;\n    nd = intd.length;\n\n    dsep = fmt.decimalSeparator;\n    if (dsep == u) {\n      dsep = tfmt.decimalSeparator;\n      if (dsep == u) {\n        dsep = cfmt.decimalSeparator;\n        if (dsep == u) dsep = '.';\n      }\n    }\n\n    gsep = fmt.groupSeparator;\n    if (gsep == u) {\n      gsep = tfmt.groupSeparator;\n      if (gsep == u) gsep = cfmt.groupSeparator;\n    }\n\n    if (gsep) {\n      gsize = fmt.groupSize;\n      if (gsize == u) {\n        gsize = tfmt.groupSize;\n        if (gsize == u) {\n          gsize = cfmt.groupSize;\n          if (gsize == u) gsize = 0;\n        }\n      }\n\n      sgsize = fmt.secondaryGroupSize;\n      if (sgsize == u) {\n        sgsize = tfmt.secondaryGroupSize;\n        if (sgsize == u) {\n          sgsize = cfmt.secondaryGroupSize;\n          if (sgsize == u) sgsize = 0;\n        }\n      }\n\n      if (sgsize) {\n        g1 = +sgsize;\n        g2 = +gsize;\n        nd -= g2;\n      } else {\n        g1 = +gsize;\n        g2 = +sgsize;\n      }\n\n      if (g1 > 0 && nd > 0) {\n        i = nd % g1 || g1;\n        intp = intd.substr(0, i);\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\n        if (g2 > 0) intp += gsep + intd.slice(i);\n        if (this.s < 0) intp = '-' + intp;\n      }\n    }\n\n    if (fracp) {\n      fgsep = fmt.fractionGroupSeparator;\n      if (fgsep == u) {\n        fgsep = tfmt.fractionGroupSeparator;\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\n      }\n\n      if (fgsep) {\n        fgsize = fmt.fractionGroupSize;\n        if (fgsize == u) {\n          fgsize = tfmt.fractionGroupSize;\n          if (fgsize == u) {\n            fgsize = cfmt.fractionGroupSize;\n            if (fgsize == u) fgsize = 0;\n          }\n        }\n\n        fgsize = +fgsize;\n\n        if (fgsize) {\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\n        }\n      }\n\n      return intp + dsep + fracp;\n    } else {\n\n      return intp;\n    }\n  };\n\n  Ctor.format = {\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    fractionGroupSeparator: '',\n    fractionGroupSize: 0\n  };\n\n  return Ctor;\n}\n\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}