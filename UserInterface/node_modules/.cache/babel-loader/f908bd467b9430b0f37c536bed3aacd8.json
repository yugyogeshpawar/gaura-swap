{"ast":null,"code":"import { useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useMulticallContract } from '../../hooks/useContract';\nimport useDebounce from '../../hooks/useDebounce';\nimport chunkArray from '../../utils/chunkArray';\nimport { CancelledError, retry, RetryableError } from '../../utils/retry';\nimport { useBlockNumber } from '../application/hooks';\nimport { errorFetchingMulticallResults, fetchingMulticallResults, parseCallKey, updateMulticallResults } from './actions'; // chunk calls so we do not exceed the gas limit\n\nconst CALL_CHUNK_SIZE = 500;\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */\n\nasync function fetchChunk(multicallContract, chunk, minBlockNumber) {\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber);\n  let resultsBlockNumber, returnData;\n\n  try {\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(chunk.map(obj => [obj.address, obj.callData]));\n  } catch (error) {\n    console.debug('Failed to fetch chunk inside retry', error);\n    throw error;\n  }\n\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`);\n    throw new RetryableError('Fetched for old block number');\n  }\n\n  return {\n    results: returnData,\n    blockNumber: resultsBlockNumber.toNumber()\n  };\n}\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\n\n\nexport function activeListeningKeys(allListeners, chainId) {\n  if (!allListeners || !chainId) return {};\n  const listeners = allListeners[chainId];\n  if (!listeners) return {};\n  return Object.keys(listeners).reduce((memo, callKey) => {\n    const keyListeners = listeners[callKey];\n    memo[callKey] = Object.keys(keyListeners).filter(key => {\n      const blocksPerFetch = parseInt(key);\n      if (blocksPerFetch <= 0) return false;\n      return keyListeners[blocksPerFetch] > 0;\n    }).reduce((previousMin, current) => {\n      return Math.min(previousMin, parseInt(current));\n    }, Infinity);\n    return memo;\n  }, {});\n}\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */\n\nexport function outdatedListeningKeys(callResults, listeningKeys, chainId, latestBlockNumber) {\n  if (!chainId || !latestBlockNumber) return [];\n  const results = callResults[chainId]; // no results at all, load everything\n\n  if (!results) return Object.keys(listeningKeys);\n  return Object.keys(listeningKeys).filter(callKey => {\n    const blocksPerFetch = listeningKeys[callKey];\n    const data = callResults[chainId][callKey]; // no data, must fetch\n\n    if (!data) return true;\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1); // already fetching it for a recent enough block, don't refetch it\n\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false; // if data is older than minDataBlockNumber, fetch it\n\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber;\n  });\n}\nexport default function Updater() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.multicall); // wait for listeners to settle before triggering updates\n\n  const debouncedListeners = useDebounce(state.callListeners, 100);\n  const latestBlockNumber = useBlockNumber();\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const multicallContract = useMulticallContract();\n  const cancellations = useRef();\n  const listeningKeys = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId);\n  }, [debouncedListeners, chainId]);\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber);\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber]);\n  const serializedOutdatedCallKeys = useMemo(() => JSON.stringify(unserializedOutdatedCallKeys.sort()), [unserializedOutdatedCallKeys]);\n  useEffect(() => {\n    var _cancellations$curren;\n\n    if (!latestBlockNumber || !chainId || !multicallContract) return;\n    const outdatedCallKeys = JSON.parse(serializedOutdatedCallKeys);\n    if (outdatedCallKeys.length === 0) return;\n    const calls = outdatedCallKeys.map(key => parseCallKey(key));\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE);\n\n    if (((_cancellations$curren = cancellations.current) === null || _cancellations$curren === void 0 ? void 0 : _cancellations$curren.blockNumber) !== latestBlockNumber) {\n      var _cancellations$curren2, _cancellations$curren3;\n\n      (_cancellations$curren2 = cancellations.current) === null || _cancellations$curren2 === void 0 ? void 0 : (_cancellations$curren3 = _cancellations$curren2.cancellations) === null || _cancellations$curren3 === void 0 ? void 0 : _cancellations$curren3.forEach(c => c());\n    }\n\n    dispatch(fetchingMulticallResults({\n      calls,\n      chainId,\n      fetchingBlockNumber: latestBlockNumber\n    }));\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: chunkedCalls.map((chunk, index) => {\n        const {\n          cancel,\n          promise\n        } = retry(() => fetchChunk(multicallContract, chunk, latestBlockNumber), {\n          n: Infinity,\n          minWait: 2500,\n          maxWait: 3500\n        });\n        promise.then(_ref => {\n          let {\n            results: returnData,\n            blockNumber: fetchBlockNumber\n          } = _ref;\n          cancellations.current = {\n            cancellations: [],\n            blockNumber: latestBlockNumber\n          }; // accumulates the length of all previous indices\n\n          const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce((memo, curr) => memo + curr.length, 0);\n          const lastCallKeyIndex = firstCallKeyIndex + returnData.length;\n          dispatch(updateMulticallResults({\n            chainId,\n            results: outdatedCallKeys.slice(firstCallKeyIndex, lastCallKeyIndex).reduce((memo, callKey, i) => {\n              var _returnData$i;\n\n              memo[callKey] = (_returnData$i = returnData[i]) !== null && _returnData$i !== void 0 ? _returnData$i : null;\n              return memo;\n            }, {}),\n            blockNumber: fetchBlockNumber\n          }));\n        }).catch(error => {\n          if (error instanceof CancelledError) {\n            console.debug('Cancelled fetch for blockNumber', latestBlockNumber);\n            return;\n          }\n\n          console.error('Failed to fetch multicall chunk', chunk, chainId, error);\n          dispatch(errorFetchingMulticallResults({\n            calls: chunk,\n            chainId,\n            fetchingBlockNumber: latestBlockNumber\n          }));\n        });\n        return cancel;\n      })\n    };\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber]);\n  return null;\n}","map":{"version":3,"names":["useEffect","useMemo","useRef","useDispatch","useSelector","useActiveWeb3React","useMulticallContract","useDebounce","chunkArray","CancelledError","retry","RetryableError","useBlockNumber","errorFetchingMulticallResults","fetchingMulticallResults","parseCallKey","updateMulticallResults","CALL_CHUNK_SIZE","fetchChunk","multicallContract","chunk","minBlockNumber","console","debug","resultsBlockNumber","returnData","aggregate","map","obj","address","callData","error","toNumber","toString","results","blockNumber","activeListeningKeys","allListeners","chainId","listeners","Object","keys","reduce","memo","callKey","keyListeners","filter","key","blocksPerFetch","parseInt","previousMin","current","Math","min","Infinity","outdatedListeningKeys","callResults","listeningKeys","latestBlockNumber","data","minDataBlockNumber","fetchingBlockNumber","Updater","dispatch","state","multicall","debouncedListeners","callListeners","cancellations","unserializedOutdatedCallKeys","serializedOutdatedCallKeys","JSON","stringify","sort","outdatedCallKeys","parse","length","calls","chunkedCalls","forEach","c","index","cancel","promise","n","minWait","maxWait","then","fetchBlockNumber","firstCallKeyIndex","slice","curr","lastCallKeyIndex","i","catch"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/state/multicall/updater.tsx"],"sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useMulticallContract } from '../../hooks/useContract';\nimport useDebounce from '../../hooks/useDebounce';\nimport chunkArray from '../../utils/chunkArray';\nimport { CancelledError, retry, RetryableError } from '../../utils/retry';\nimport { useBlockNumber } from '../application/hooks';\nimport { AppDispatch, AppState } from '../index';\nimport {\n  Call,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  parseCallKey,\n  updateMulticallResults,\n} from './actions';\n\n// chunk calls so we do not exceed the gas limit\nconst CALL_CHUNK_SIZE = 500;\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */\nasync function fetchChunk(\n  multicallContract: Contract,\n  chunk: Call[],\n  minBlockNumber: number\n): Promise<{ results: string[]; blockNumber: number }> {\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber);\n  let resultsBlockNumber, returnData;\n  try {\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(\n      chunk.map((obj) => [obj.address, obj.callData])\n    );\n  } catch (error) {\n    console.debug('Failed to fetch chunk inside retry', error);\n    throw error;\n  }\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`);\n    throw new RetryableError('Fetched for old block number');\n  }\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() };\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: AppState['multicall']['callListeners'],\n  chainId?: number\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {};\n  const listeners = allListeners[chainId];\n  if (!listeners) return {};\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey];\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter((key) => {\n        const blocksPerFetch = parseInt(key);\n        if (blocksPerFetch <= 0) return false;\n        return keyListeners[blocksPerFetch] > 0;\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current));\n      }, Infinity);\n    return memo;\n  }, {});\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: AppState['multicall']['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined\n): string[] {\n  if (!chainId || !latestBlockNumber) return [];\n  const results = callResults[chainId];\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys);\n\n  return Object.keys(listeningKeys).filter((callKey) => {\n    const blocksPerFetch = listeningKeys[callKey];\n\n    const data = callResults[chainId][callKey];\n    // no data, must fetch\n    if (!data) return true;\n\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1);\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false;\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber;\n  });\n}\n\nexport default function Updater(): null {\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['multicall']>((state) => state.multicall);\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100);\n  const latestBlockNumber = useBlockNumber();\n  const { chainId } = useActiveWeb3React();\n  const multicallContract = useMulticallContract();\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>();\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId);\n  }, [debouncedListeners, chainId]);\n\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber);\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber]);\n\n  const serializedOutdatedCallKeys = useMemo(\n    () => JSON.stringify(unserializedOutdatedCallKeys.sort()),\n    [unserializedOutdatedCallKeys]\n  );\n\n  useEffect(() => {\n    if (!latestBlockNumber || !chainId || !multicallContract) return;\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys);\n    if (outdatedCallKeys.length === 0) return;\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key));\n\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE);\n\n    if (cancellations.current?.blockNumber !== latestBlockNumber) {\n      cancellations.current?.cancellations?.forEach((c) => c());\n    }\n\n    dispatch(\n      fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber,\n      })\n    );\n\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: chunkedCalls.map((chunk, index) => {\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, latestBlockNumber), {\n          n: Infinity,\n          minWait: 2500,\n          maxWait: 3500,\n        });\n        promise\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\n            cancellations.current = { cancellations: [], blockNumber: latestBlockNumber };\n\n            // accumulates the length of all previous indices\n            const firstCallKeyIndex = chunkedCalls\n              .slice(0, index)\n              .reduce<number>((memo, curr) => memo + curr.length, 0);\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length;\n\n            dispatch(\n              updateMulticallResults({\n                chainId,\n                results: outdatedCallKeys\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\n                    memo[callKey] = returnData[i] ?? null;\n                    return memo;\n                  }, {}),\n                blockNumber: fetchBlockNumber,\n              })\n            );\n          })\n          .catch((error: any) => {\n            if (error instanceof CancelledError) {\n              console.debug('Cancelled fetch for blockNumber', latestBlockNumber);\n              return;\n            }\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error);\n            dispatch(\n              errorFetchingMulticallResults({\n                calls: chunk,\n                chainId,\n                fetchingBlockNumber: latestBlockNumber,\n              })\n            );\n          });\n        return cancel;\n      }),\n    };\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber]);\n\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}