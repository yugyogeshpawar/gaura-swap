{"ast":null,"code":"'use strict';\n\nconst mh = require('multihashes');\n\nconst multibase = require('multibase');\n\nconst multicodec = require('multicodec');\n\nconst CIDUtil = require('./cid-util');\n\nconst uint8ArrayConcat = require('uint8arrays/concat');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayEquals = require('uint8arrays/equals');\n\nconst codecs = multicodec.nameToCode;\nconst codecInts =\n/** @type {CodecName[]} */\nObject.keys(codecs).reduce((p, name) => {\n  p[codecs[name]] = name;\n  return p;\n},\n/** @type {Record<CodecCode, CodecName>} */\n{});\nconst symbol = Symbol.for('@ipld/js-cid/CID');\n/**\n * @typedef {Object} SerializedCID\n * @property {string} codec\n * @property {number} version\n * @property {Uint8Array} hash\n */\n\n/**\n * @typedef {0|1} CIDVersion\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('multicodec').CodecCode} CodecCode\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n *\n * @class CID\n */\n\nclass CID {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (cid)\n   *   -> create a copy\n   * else if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Uint8Array)\n   *   if (1st byte is 0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   * ```\n   *\n   * @param {CIDVersion | string | Uint8Array | CID} version\n   * @param {string|number} [codec]\n   * @param {Uint8Array} [multihash]\n   * @param {string} [multibaseName]\n   *\n   * @example\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\n   * new CID(<cidStr>)\n   * new CID(<cid.bytes>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   */\n  constructor(version, codec, multihash, multibaseName) {\n    // We have below three blank field accessors only because\n    // otherwise TS will not pick them up if done after assignemnts\n\n    /**\n     * The version of the CID.\n     *\n     * @type {CIDVersion}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.version;\n    /**\n     * The codec of the CID.\n     *\n     * @deprecated\n     * @type {CodecName}\n     */\n    // eslint-disable-next-line no-unused-expressions\n\n    this.codec;\n    /**\n     * The multihash of the CID.\n     *\n     * @type {Uint8Array}\n     */\n    // eslint-disable-next-line no-unused-expressions\n\n    this.multihash;\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n\n    if (CID.isCID(version)) {\n      // version is an exising CID instance\n      const cid =\n      /** @type {CID} */\n      version;\n      this.version = cid.version;\n      this.codec = cid.codec;\n      this.multihash = cid.multihash; // Default guard for when a CID < 0.7 is passed with no multibaseName\n      // @ts-ignore\n\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32');\n      return;\n    }\n\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      const baseName = multibase.isEncoded(version);\n\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        const cid = multibase.decode(version);\n        this.version =\n        /** @type {CIDVersion} */\n        parseInt(cid[0].toString(), 16);\n        this.codec = multicodec.getCodec(cid.slice(1));\n        this.multihash = multicodec.rmPrefix(cid.slice(1));\n        this.multibaseName = baseName;\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0;\n        this.codec = 'dag-pb';\n        this.multihash = mh.fromB58String(version);\n        this.multibaseName = 'base58btc';\n      }\n\n      CID.validateCID(this);\n      Object.defineProperty(this, 'string', {\n        value: version\n      });\n      return;\n    }\n\n    if (version instanceof Uint8Array) {\n      const v = parseInt(version[0].toString(), 16);\n\n      if (v === 1) {\n        // version is a CID Uint8Array\n        const cid = version;\n        this.version = v;\n        this.codec = multicodec.getCodec(cid.slice(1));\n        this.multihash = multicodec.rmPrefix(cid.slice(1));\n        this.multibaseName = 'base32';\n      } else {\n        // version is a raw multihash Uint8Array, so v0\n        this.version = 0;\n        this.codec = 'dag-pb';\n        this.multihash = version;\n        this.multibaseName = 'base58btc';\n      }\n\n      CID.validateCID(this);\n      return;\n    } // otherwise, assemble the CID from the parameters\n\n\n    this.version = version;\n\n    if (typeof codec === 'number') {\n      // @ts-ignore\n      codec = codecInts[codec];\n    }\n\n    this.codec =\n    /** @type {CodecName} */\n    codec;\n    this.multihash =\n    /** @type {Uint8Array} */\n    multihash;\n    /**\n     * Multibase name as string.\n     *\n     * @deprecated\n     * @type {string}\n     */\n\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32');\n    CID.validateCID(this);\n  }\n  /**\n   * The CID as a `Uint8Array`\n   *\n   * @returns {Uint8Array}\n   *\n   */\n\n\n  get bytes() {\n    // @ts-ignore\n    let bytes = this._bytes;\n\n    if (!bytes) {\n      if (this.version === 0) {\n        bytes = this.multihash;\n      } else if (this.version === 1) {\n        const codec = multicodec.getCodeVarint(this.codec);\n        bytes = uint8ArrayConcat([[1], codec, this.multihash], 1 + codec.byteLength + this.multihash.byteLength);\n      } else {\n        throw new Error('unsupported version');\n      } // Cache this Uint8Array so it doesn't have to be recreated\n\n\n      Object.defineProperty(this, '_bytes', {\n        value: bytes\n      });\n    }\n\n    return bytes;\n  }\n  /**\n   * The prefix of the CID.\n   *\n   * @returns {Uint8Array}\n   */\n\n\n  get prefix() {\n    const codec = multicodec.getCodeVarint(this.codec);\n    const multihash = mh.prefix(this.multihash);\n    const prefix = uint8ArrayConcat([[this.version], codec, multihash], 1 + codec.byteLength + multihash.byteLength);\n    return prefix;\n  }\n  /**\n   * The codec of the CID in its number form.\n   *\n   * @returns {CodecCode}\n   */\n\n\n  get code() {\n    return codecs[this.codec];\n  }\n  /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */\n\n\n  toV0() {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n    }\n\n    const {\n      name,\n      length\n    } = mh.decode(this.multihash);\n\n    if (name !== 'sha2-256') {\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n    }\n\n    if (length !== 32) {\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0');\n    }\n\n    return new CID(0, this.codec, this.multihash);\n  }\n  /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */\n\n\n  toV1() {\n    return new CID(1, this.codec, this.multihash, this.multibaseName);\n  }\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n\n\n  toBaseEncodedString() {\n    let base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.multibaseName;\n\n    // @ts-ignore non enumerable cache property\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n      // @ts-ignore non enumerable cache property\n      return this.string;\n    }\n\n    let str;\n\n    if (this.version === 0) {\n      if (base !== 'base58btc') {\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()');\n      }\n\n      str = mh.toB58String(this.multihash);\n    } else if (this.version === 1) {\n      str = uint8ArrayToString(multibase.encode(base, this.bytes));\n    } else {\n      throw new Error('unsupported version');\n    }\n\n    if (base === this.multibaseName) {\n      // cache the string value\n      Object.defineProperty(this, 'string', {\n        value: str\n      });\n    }\n\n    return str;\n  }\n  /**\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\n   *\n   * @returns {string}\n   */\n\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n\n\n  toString(base) {\n    return this.toBaseEncodedString(base);\n  }\n  /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */\n\n\n  toJSON() {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    };\n  }\n  /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {boolean}\n   */\n\n\n  equals(other) {\n    return this.codec === other.codec && this.version === other.version && uint8ArrayEquals(this.multihash, other.multihash);\n  }\n  /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other - The other CID.\n   * @returns {void}\n   */\n\n\n  static validateCID(other) {\n    const errorMsg = CIDUtil.checkCIDComponents(other);\n\n    if (errorMsg) {\n      throw new Error(errorMsg);\n    }\n  }\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is CID}\n   */\n\n\n  static isCID(value) {\n    return value instanceof CID || Boolean(value && value[symbol]);\n  }\n\n}\n\nCID.codecs = codecs;\nmodule.exports = CID;","map":{"version":3,"names":["mh","require","multibase","multicodec","CIDUtil","uint8ArrayConcat","uint8ArrayToString","uint8ArrayEquals","codecs","nameToCode","codecInts","Object","keys","reduce","p","name","symbol","Symbol","for","CID","constructor","version","codec","multihash","multibaseName","defineProperty","value","isCID","cid","baseName","isEncoded","decode","parseInt","toString","getCodec","slice","rmPrefix","fromB58String","validateCID","Uint8Array","v","bytes","_bytes","getCodeVarint","byteLength","Error","prefix","code","toV0","length","toV1","toBaseEncodedString","base","string","str","toB58String","encode","toJSON","hash","equals","other","errorMsg","checkCIDComponents","Boolean","module","exports"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/cids/src/index.js"],"sourcesContent":["'use strict'\n\nconst mh = require('multihashes')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst CIDUtil = require('./cid-util')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayEquals = require('uint8arrays/equals')\n\nconst codecs = multicodec.nameToCode\nconst codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {\n  p[codecs[name]] = name\n  return p\n}, /** @type {Record<CodecCode, CodecName>} */({}))\n\nconst symbol = Symbol.for('@ipld/js-cid/CID')\n\n/**\n * @typedef {Object} SerializedCID\n * @property {string} codec\n * @property {number} version\n * @property {Uint8Array} hash\n */\n/**\n * @typedef {0|1} CIDVersion\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('multicodec').CodecCode} CodecCode\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n *\n * @class CID\n */\nclass CID {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (cid)\n   *   -> create a copy\n   * else if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Uint8Array)\n   *   if (1st byte is 0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   * ```\n   *\n   * @param {CIDVersion | string | Uint8Array | CID} version\n   * @param {string|number} [codec]\n   * @param {Uint8Array} [multihash]\n   * @param {string} [multibaseName]\n   *\n   * @example\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\n   * new CID(<cidStr>)\n   * new CID(<cid.bytes>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   */\n  constructor (version, codec, multihash, multibaseName) {\n    // We have below three blank field accessors only because\n    // otherwise TS will not pick them up if done after assignemnts\n\n    /**\n     * The version of the CID.\n     *\n     * @type {CIDVersion}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.version\n\n    /**\n     * The codec of the CID.\n     *\n     * @deprecated\n     * @type {CodecName}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.codec\n\n    /**\n     * The multihash of the CID.\n     *\n     * @type {Uint8Array}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.multihash\n\n    Object.defineProperty(this, symbol, { value: true })\n    if (CID.isCID(version)) {\n      // version is an exising CID instance\n      const cid = /** @type {CID} */(version)\n      this.version = cid.version\n      this.codec = cid.codec\n      this.multihash = cid.multihash\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\n      // @ts-ignore\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\n      return\n    }\n\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      const baseName = multibase.isEncoded(version)\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        const cid = multibase.decode(version)\n        this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16))\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = baseName\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = mh.fromB58String(version)\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      Object.defineProperty(this, 'string', { value: version })\n      return\n    }\n\n    if (version instanceof Uint8Array) {\n      const v = parseInt(version[0].toString(), 16)\n      if (v === 1) {\n        // version is a CID Uint8Array\n        const cid = version\n        this.version = v\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = 'base32'\n      } else {\n        // version is a raw multihash Uint8Array, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = version\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      return\n    }\n\n    // otherwise, assemble the CID from the parameters\n\n    this.version = version\n\n    if (typeof codec === 'number') {\n      // @ts-ignore\n      codec = codecInts[codec]\n    }\n\n    this.codec = /** @type {CodecName} */ (codec)\n\n    this.multihash = /** @type {Uint8Array} */ (multihash)\n\n    /**\n     * Multibase name as string.\n     *\n     * @deprecated\n     * @type {string}\n     */\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\n\n    CID.validateCID(this)\n  }\n\n  /**\n   * The CID as a `Uint8Array`\n   *\n   * @returns {Uint8Array}\n   *\n   */\n  get bytes () {\n    // @ts-ignore\n    let bytes = this._bytes\n\n    if (!bytes) {\n      if (this.version === 0) {\n        bytes = this.multihash\n      } else if (this.version === 1) {\n        const codec = multicodec.getCodeVarint(this.codec)\n        bytes = uint8ArrayConcat([\n          [1], codec, this.multihash\n        ], 1 + codec.byteLength + this.multihash.byteLength)\n      } else {\n        throw new Error('unsupported version')\n      }\n\n      // Cache this Uint8Array so it doesn't have to be recreated\n      Object.defineProperty(this, '_bytes', { value: bytes })\n    }\n\n    return bytes\n  }\n\n  /**\n   * The prefix of the CID.\n   *\n   * @returns {Uint8Array}\n   */\n  get prefix () {\n    const codec = multicodec.getCodeVarint(this.codec)\n    const multihash = mh.prefix(this.multihash)\n    const prefix = uint8ArrayConcat([\n      [this.version], codec, multihash\n    ], 1 + codec.byteLength + multihash.byteLength)\n\n    return prefix\n  }\n\n  /**\n   * The codec of the CID in its number form.\n   *\n   * @returns {CodecCode}\n   */\n  get code () {\n    return codecs[this.codec]\n  }\n\n  /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */\n  toV0 () {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n    }\n\n    const { name, length } = mh.decode(this.multihash)\n\n    if (name !== 'sha2-256') {\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n    }\n\n    if (length !== 32) {\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\n    }\n\n    return new CID(0, this.codec, this.multihash)\n  }\n\n  /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */\n  toV1 () {\n    return new CID(1, this.codec, this.multihash, this.multibaseName)\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toBaseEncodedString (base = this.multibaseName) {\n    // @ts-ignore non enumerable cache property\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n      // @ts-ignore non enumerable cache property\n      return this.string\n    }\n    let str\n    if (this.version === 0) {\n      if (base !== 'base58btc') {\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\n      }\n      str = mh.toB58String(this.multihash)\n    } else if (this.version === 1) {\n      str = uint8ArrayToString(multibase.encode(base, this.bytes))\n    } else {\n      throw new Error('unsupported version')\n    }\n    if (base === this.multibaseName) {\n      // cache the string value\n      Object.defineProperty(this, 'string', { value: str })\n    }\n    return str\n  }\n\n  /**\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\n   *\n   * @returns {string}\n   */\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return 'CID(' + this.toString() + ')'\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toString (base) {\n    return this.toBaseEncodedString(base)\n  }\n\n  /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */\n  toJSON () {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    }\n  }\n\n  /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {boolean}\n   */\n  equals (other) {\n    return this.codec === other.codec &&\n      this.version === other.version &&\n      uint8ArrayEquals(this.multihash, other.multihash)\n  }\n\n  /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other - The other CID.\n   * @returns {void}\n   */\n  static validateCID (other) {\n    const errorMsg = CIDUtil.checkCIDComponents(other)\n    if (errorMsg) {\n      throw new Error(errorMsg)\n    }\n  }\n\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is CID}\n   */\n  static isCID (value) {\n    return value instanceof CID || Boolean(value && value[symbol])\n  }\n}\n\nCID.codecs = codecs\n\nmodule.exports = CID\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}