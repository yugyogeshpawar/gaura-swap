{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthereumProviderError = exports.EthereumRpcError = void 0;\n\nvar fast_safe_stringify_1 = require(\"fast-safe-stringify\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\n\n\nvar EthereumRpcError = /*#__PURE__*/function (_Error) {\n  _inherits(EthereumRpcError, _Error);\n\n  var _super = _createSuper(EthereumRpcError);\n\n  function EthereumRpcError(code, message, data) {\n    var _this;\n\n    _classCallCheck(this, EthereumRpcError);\n\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n\n    _this = _super.call(this, message);\n    _this.code = code;\n\n    if (data !== undefined) {\n      _this.data = data;\n    }\n\n    return _this;\n  }\n  /**\n   * Returns a plain object with all public class properties.\n   */\n\n\n  _createClass(EthereumRpcError, [{\n    key: \"serialize\",\n    value: function serialize() {\n      var serialized = {\n        code: this.code,\n        message: this.message\n      };\n\n      if (this.data !== undefined) {\n        serialized.data = this.data;\n      }\n\n      if (this.stack) {\n        serialized.stack = this.stack;\n      }\n\n      return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);\n    }\n  }]);\n\n  return EthereumRpcError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\n\nvar EthereumProviderError = /*#__PURE__*/function (_EthereumRpcError) {\n  _inherits(EthereumProviderError, _EthereumRpcError);\n\n  var _super2 = _createSuper(EthereumProviderError);\n\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  function EthereumProviderError(code, message, data) {\n    _classCallCheck(this, EthereumProviderError);\n\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n\n    return _super2.call(this, code, message, data);\n  }\n\n  return _createClass(EthereumProviderError);\n}(EthereumRpcError);\n\nexports.EthereumProviderError = EthereumProviderError; // Internal\n\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n\n  return value;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA;AASA;;;;;;;IAKaA,gB;;;;;EAMX,0BAAYC,IAAZ,EAA0BC,OAA1B,EAA2CC,IAA3C,EAAmD;IAAA;;IAAA;;IAEjD,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBJ,IAAjB,CAAL,EAA6B;MAC3B,MAAM,IAAIK,KAAJ,CACJ,4BADI,CAAN;IAGD;;IACD,IAAI,CAACJ,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;MAC3C,MAAM,IAAII,KAAJ,CACJ,sCADI,CAAN;IAGD;;IAED,0BAAMJ,OAAN;IACA,MAAKD,IAAL,GAAYA,IAAZ;;IACA,IAAIE,IAAI,KAAKI,SAAb,EAAwB;MACtB,MAAKJ,IAAL,GAAYA,IAAZ;IACD;;IAjBgD;EAkBlD;EAED;;;;;;;WAGA,qBAAS;MACP,IAAMK,UAAU,GAA+B;QAC7CP,IAAI,EAAE,KAAKA,IADkC;QAE7CC,OAAO,EAAE,KAAKA;MAF+B,CAA/C;;MAIA,IAAI,KAAKC,IAAL,KAAcI,SAAlB,EAA6B;QAC3BC,UAAU,CAACL,IAAX,GAAkB,KAAKA,IAAvB;MACD;;MACD,IAAI,KAAKM,KAAT,EAAgB;QACdD,UAAU,CAACC,KAAX,GAAmB,KAAKA,KAAxB;MACD;;MACD,OAAOD,UAAP;IACD;IAED;;;;;;;WAIA,oBAAQ;MACN,OAAOE,8BACL,KAAKC,SAAL,EADK,EAELC,iBAFK,EAGL,CAHK,CAAP;IAKD;;;;iCArDsCN,K;;AAAzCO;AAwDA;;;;;IAIaC,qB;;;;;EAEX;;;;EAIA,+BAAYb,IAAZ,EAA0BC,OAA1B,EAA2CC,IAA3C,EAAmD;IAAA;;IAEjD,IAAI,CAACY,sBAAsB,CAACd,IAAD,CAA3B,EAAmC;MACjC,MAAM,IAAIK,KAAJ,CACJ,2DADI,CAAN;IAGD;;IANgD,0BAQ3CL,IAR2C,EAQrCC,OARqC,EAQ5BC,IAR4B;EASlD;;;EAf2CH,gB;;AAA9Ca,sD,CAkBA;;AAEA,SAASE,sBAAT,CAAgCd,IAAhC,EAA4C;EAC1C,OAAOG,MAAM,CAACC,SAAP,CAAiBJ,IAAjB,KAA0BA,IAAI,IAAI,IAAlC,IAA0CA,IAAI,IAAI,IAAzD;AACD;;AAED,SAASW,iBAAT,CAA2BI,CAA3B,EAAuCC,KAAvC,EAAqD;EACnD,IAAIA,KAAK,KAAK,YAAd,EAA4B;IAC1B,OAAOV,SAAP;EACD;;EACD,OAAOU,KAAP;AACD","names":["EthereumRpcError","code","message","data","Number","isInteger","Error","undefined","serialized","stack","fast_safe_stringify_1","serialize","stringifyReplacer","exports","EthereumProviderError","isValidEthProviderCode","_","value"],"sourceRoot":"","sources":["../src/classes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}