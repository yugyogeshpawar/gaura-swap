{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n/** @typedef {import('./generated-types').CodecName} CodecName */\n\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\n\nvar _objectSpread = require(\"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar varint = require('varint');\n\nvar uint8ArrayConcat = require('uint8arrays/concat');\n\nvar util = require('./util');\n\nvar _require = require('./maps'),\n    nameToVarint = _require.nameToVarint,\n    constantToCode = _require.constantToCode,\n    nameToCode = _require.nameToCode,\n    codeToName = _require.codeToName;\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\n\n\nfunction addPrefix(multicodecStrOrCode, data) {\n  var prefix;\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode);\n  } else {\n    if (nameToVarint[multicodecStrOrCode]) {\n      prefix = nameToVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length);\n}\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\n\n\nfunction rmPrefix(data) {\n  varint.decode(\n  /** @type {Buffer} */\n  data);\n  return data.slice(varint.decode.bytes);\n}\n/**\n * Get the codec name of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\n\n\nfunction getNameFromData(prefixedData) {\n  var code =\n  /** @type {CodecCode} */\n  varint.decode(\n  /** @type {Buffer} */\n  prefixedData);\n  var name = codeToName[code];\n\n  if (name === undefined) {\n    throw new Error(\"Code \\\"\".concat(code, \"\\\" not found\"));\n  }\n\n  return name;\n}\n/**\n * Get the codec name from a code.\n *\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\n\n\nfunction getNameFromCode(codec) {\n  return codeToName[codec];\n}\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecCode}\n */\n\n\nfunction getCodeFromName(name) {\n  var code = nameToCode[name];\n\n  if (code === undefined) {\n    throw new Error(\"Codec \\\"\".concat(name, \"\\\" not found\"));\n  }\n\n  return code;\n}\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\n\n\nfunction getCodeFromData(prefixedData) {\n  return (\n    /** @type {CodecCode} */\n    varint.decode(\n    /** @type {Buffer} */\n    prefixedData)\n  );\n}\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\n\n\nfunction getVarintFromName(name) {\n  var code = nameToVarint[name];\n\n  if (code === undefined) {\n    throw new Error(\"Codec \\\"\".concat(name, \"\\\" not found\"));\n  }\n\n  return code;\n}\n/**\n * Get the varint of a code.\n *\n * @param {CodecCode} code\n * @returns {Uint8Array}\n */\n\n\nfunction getVarintFromCode(code) {\n  return util.varintEncode(code);\n}\n/**\n * Get the codec name of the prefixed data.\n *\n * @deprecated use getNameFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\n\n\nfunction getCodec(prefixedData) {\n  return getNameFromData(prefixedData);\n}\n/**\n * Get the codec name from a code.\n *\n * @deprecated use getNameFromCode instead.\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\n\n\nfunction getName(codec) {\n  return getNameFromCode(codec);\n}\n/**\n * Get the code of the codec\n *\n * @deprecated use getCodeFromName instead.\n * @param {CodecName} name\n * @returns {CodecCode}\n */\n\n\nfunction getNumber(name) {\n  return getCodeFromName(name);\n}\n/**\n * Get the code of the prefixed data.\n *\n * @deprecated use getCodeFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\n\n\nfunction getCode(prefixedData) {\n  return getCodeFromData(prefixedData);\n}\n/**\n * Get the code as varint of a codec name.\n *\n * @deprecated use getVarintFromName instead.\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\n\n\nfunction getCodeVarint(name) {\n  return getVarintFromName(name);\n}\n/**\n * Get the varint of a code.\n *\n * @deprecated use getVarintFromCode instead.\n * @param {CodecCode} code\n * @returns {Array.<number>}\n */\n\n\nfunction getVarint(code) {\n  return Array.from(getVarintFromCode(code));\n}\n\nmodule.exports = _objectSpread(_objectSpread({\n  addPrefix: addPrefix,\n  rmPrefix: rmPrefix,\n  getNameFromData: getNameFromData,\n  getNameFromCode: getNameFromCode,\n  getCodeFromName: getCodeFromName,\n  getCodeFromData: getCodeFromData,\n  getVarintFromName: getVarintFromName,\n  getVarintFromCode: getVarintFromCode,\n  // Deprecated\n  getCodec: getCodec,\n  getName: getName,\n  getNumber: getNumber,\n  getCode: getCode,\n  getCodeVarint: getCodeVarint,\n  getVarint: getVarint\n}, constantToCode), {}, {\n  // Export the maps\n  nameToVarint: nameToVarint,\n  nameToCode: nameToCode,\n  codeToName: codeToName\n});","map":{"version":3,"names":["varint","require","uint8ArrayConcat","util","nameToVarint","constantToCode","nameToCode","codeToName","addPrefix","multicodecStrOrCode","data","prefix","Uint8Array","varintUint8ArrayEncode","Error","length","rmPrefix","decode","slice","bytes","getNameFromData","prefixedData","code","name","undefined","getNameFromCode","codec","getCodeFromName","getCodeFromData","getVarintFromName","getVarintFromCode","varintEncode","getCodec","getName","getNumber","getCode","getCodeVarint","getVarint","Array","from","module","exports"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/multicodec/src/index.js"],"sourcesContent":["/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\n\nconst varint = require('varint')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst util = require('./util')\nconst { nameToVarint, constantToCode, nameToCode, codeToName } = require('./maps')\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix (multicodecStrOrCode, data) {\n  let prefix\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\n  } else {\n    if (nameToVarint[multicodecStrOrCode]) {\n      prefix = nameToVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix (data) {\n  varint.decode(/** @type {Buffer} */(data))\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getNameFromData (prefixedData) {\n  const code = /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\n  const name = codeToName[code]\n  if (name === undefined) {\n    throw new Error(`Code \"${code}\" not found`)\n  }\n  return name\n}\n\n/**\n * Get the codec name from a code.\n *\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getNameFromCode (codec) {\n  return codeToName[codec]\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getCodeFromName (name) {\n  const code = nameToCode[name]\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`)\n  }\n  return code\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCodeFromData (prefixedData) {\n  return /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getVarintFromName (name) {\n  const code = nameToVarint[name]\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`)\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecCode} code\n * @returns {Uint8Array}\n */\nfunction getVarintFromCode (code) {\n  return util.varintEncode(code)\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @deprecated use getNameFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec (prefixedData) {\n  return getNameFromData(prefixedData)\n}\n\n/**\n * Get the codec name from a code.\n *\n * @deprecated use getNameFromCode instead.\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getName (codec) {\n  return getNameFromCode(codec)\n}\n\n/**\n * Get the code of the codec\n *\n * @deprecated use getCodeFromName instead.\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getNumber (name) {\n  return getCodeFromName(name)\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @deprecated use getCodeFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCode (prefixedData) {\n  return getCodeFromData(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @deprecated use getVarintFromName instead.\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getCodeVarint (name) {\n  return getVarintFromName(name)\n}\n\n/**\n * Get the varint of a code.\n *\n * @deprecated use getVarintFromCode instead.\n * @param {CodecCode} code\n * @returns {Array.<number>}\n */\nfunction getVarint (code) {\n  return Array.from(getVarintFromCode(code))\n}\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getNameFromData,\n  getNameFromCode,\n  getCodeFromName,\n  getCodeFromData,\n  getVarintFromName,\n  getVarintFromCode,\n  // Deprecated\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  // Make the constants top-level constants\n  ...constantToCode,\n  // Export the maps\n  nameToVarint,\n  nameToCode,\n  codeToName\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}