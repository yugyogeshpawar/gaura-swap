{"ast":null,"code":"import { SERVER_ERROR_CODE_RANGE, RESERVED_ERROR_CODES, STANDARD_ERROR_MAP, DEFAULT_ERROR } from \"./constants\";\nexport function isServerErrorCode(code) {\n  return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];\n}\nexport function isReservedErrorCode(code) {\n  return RESERVED_ERROR_CODES.includes(code);\n}\nexport function isValidErrorCode(code) {\n  return typeof code === \"number\";\n}\nexport function getError(type) {\n  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {\n    return STANDARD_ERROR_MAP[DEFAULT_ERROR];\n  }\n\n  return STANDARD_ERROR_MAP[type];\n}\nexport function getErrorByCode(code) {\n  var match = Object.values(STANDARD_ERROR_MAP).find(function (e) {\n    return e.code === code;\n  });\n\n  if (!match) {\n    return STANDARD_ERROR_MAP[DEFAULT_ERROR];\n  }\n\n  return match;\n}\nexport function validateJsonRpcError(response) {\n  if (typeof response.error.code === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing code for JSON-RPC error\"\n    };\n  }\n\n  if (typeof response.error.message === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing message for JSON-RPC error\"\n    };\n  }\n\n  if (!isValidErrorCode(response.error.code)) {\n    return {\n      valid: false,\n      error: \"Invalid error code type for JSON-RPC: \".concat(response.error.code)\n    };\n  }\n\n  if (isReservedErrorCode(response.error.code)) {\n    var error = getErrorByCode(response.error.code);\n\n    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {\n      return {\n        valid: false,\n        error: \"Invalid error code message for JSON-RPC: \".concat(response.error.code)\n      };\n    }\n  }\n\n  return {\n    valid: true\n  };\n}\nexport function parseConnectionError(e, url, type) {\n  return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(\"Unavailable \".concat(type, \" RPC url at \").concat(url)) : e;\n}","map":{"version":3,"mappings":"AACA,SACEA,uBADF,EAEEC,oBAFF,EAGEC,kBAHF,EAIEC,aAJF,QAKO,aALP;AAQA,OAAM,SAAUC,iBAAV,CAA4BC,IAA5B,EAAwC;EAC5C,OAAOA,IAAI,IAAIL,uBAAuB,CAAC,CAAD,CAA/B,IAAsCK,IAAI,IAAIL,uBAAuB,CAAC,CAAD,CAA5E;AACD;AAED,OAAM,SAAUM,mBAAV,CAA8BD,IAA9B,EAA0C;EAC9C,OAAOJ,oBAAoB,CAACM,QAArB,CAA8BF,IAA9B,CAAP;AACD;AAED,OAAM,SAAUG,gBAAV,CAA2BH,IAA3B,EAAuC;EAC3C,OAAO,OAAOA,IAAP,KAAgB,QAAvB;AACD;AAED,OAAM,SAAUI,QAAV,CAAmBC,IAAnB,EAA+B;EACnC,IAAI,CAACC,MAAM,CAACC,IAAP,CAAYV,kBAAZ,EAAgCK,QAAhC,CAAyCG,IAAzC,CAAL,EAAqD;IACnD,OAAOR,kBAAkB,CAACC,aAAD,CAAzB;EACD;;EACD,OAAOD,kBAAkB,CAACQ,IAAD,CAAzB;AACD;AAED,OAAM,SAAUG,cAAV,CAAyBR,IAAzB,EAAqC;EACzC,IAAMS,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAcb,kBAAd,EAAkCc,IAAlC,CAAuC,WAAC;IAAA,OAAIC,CAAC,CAACZ,IAAF,KAAWA,IAAf;EAAA,CAAxC,CAAd;;EACA,IAAI,CAACS,KAAL,EAAY;IACV,OAAOZ,kBAAkB,CAACC,aAAD,CAAzB;EACD;;EACD,OAAOW,KAAP;AACD;AAED,OAAM,SAAUI,oBAAV,CAA+BC,QAA/B,EAAqD;EACzD,IAAI,OAAOA,QAAQ,CAACC,KAAT,CAAef,IAAtB,KAA+B,WAAnC,EAAgD;IAC9C,OAAO;MAAEgB,KAAK,EAAE,KAAT;MAAgBD,KAAK,EAAE;IAAvB,CAAP;EACD;;EACD,IAAI,OAAOD,QAAQ,CAACC,KAAT,CAAeE,OAAtB,KAAkC,WAAtC,EAAmD;IACjD,OAAO;MAAED,KAAK,EAAE,KAAT;MAAgBD,KAAK,EAAE;IAAvB,CAAP;EACD;;EACD,IAAI,CAACZ,gBAAgB,CAACW,QAAQ,CAACC,KAAT,CAAef,IAAhB,CAArB,EAA4C;IAC1C,OAAO;MACLgB,KAAK,EAAE,KADF;MAELD,KAAK,kDAA2CD,QAAQ,CAACC,KAAT,CAAef,IAA1D;IAFA,CAAP;EAID;;EACD,IAAIC,mBAAmB,CAACa,QAAQ,CAACC,KAAT,CAAef,IAAhB,CAAvB,EAA8C;IAC5C,IAAMe,KAAK,GAAGP,cAAc,CAACM,QAAQ,CAACC,KAAT,CAAef,IAAhB,CAA5B;;IACA,IACEe,KAAK,CAACE,OAAN,KAAkBpB,kBAAkB,CAACC,aAAD,CAAlB,CAAkCmB,OAApD,IACAH,QAAQ,CAACC,KAAT,CAAeE,OAAf,KAA2BF,KAAK,CAACE,OAFnC,EAGE;MACA,OAAO;QACLD,KAAK,EAAE,KADF;QAELD,KAAK,qDAA8CD,QAAQ,CAACC,KAAT,CAAef,IAA7D;MAFA,CAAP;IAID;EACF;;EACD,OAAO;IAAEgB,KAAK,EAAE;EAAT,CAAP;AACD;AAED,OAAM,SAAUE,oBAAV,CAA+BN,CAA/B,EAAyCO,GAAzC,EAAsDd,IAAtD,EAAkE;EACtE,OAAOO,CAAC,CAACK,OAAF,CAAUf,QAAV,CAAmB,uBAAnB,KAA+CU,CAAC,CAACK,OAAF,CAAUf,QAAV,CAAmB,sBAAnB,CAA/C,GACH,IAAIkB,KAAJ,uBAAyBf,IAAzB,yBAA4Cc,GAA5C,EADG,GAEHP,CAFJ;AAGD","names":["SERVER_ERROR_CODE_RANGE","RESERVED_ERROR_CODES","STANDARD_ERROR_MAP","DEFAULT_ERROR","isServerErrorCode","code","isReservedErrorCode","includes","isValidErrorCode","getError","type","Object","keys","getErrorByCode","match","values","find","e","validateJsonRpcError","response","error","valid","message","parseConnectionError","url","Error"],"sourceRoot":"","sources":["../../src/error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}