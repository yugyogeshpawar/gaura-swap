{"ast":null,"code":"import WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport HttpConnection from \"@walletconnect/http-connection\";\nimport { payloadId, signingMethods, parsePersonalSign, getRpcUrl } from \"@walletconnect/utils\";\n\nconst ProviderEngine = require(\"web3-provider-engine\");\n\nconst CacheSubprovider = require(\"web3-provider-engine/subproviders/cache\");\n\nconst FixtureSubprovider = require(\"web3-provider-engine/subproviders/fixture\");\n\nconst FilterSubprovider = require(\"web3-provider-engine/subproviders/filters\");\n\nconst HookedWalletSubprovider = require(\"web3-provider-engine/subproviders/hooked-wallet\");\n\nconst NonceSubprovider = require(\"web3-provider-engine/subproviders/nonce-tracker\");\n\nconst SubscriptionsSubprovider = require(\"web3-provider-engine/subproviders/subscriptions\");\n\nclass WalletConnectProvider extends ProviderEngine {\n  constructor(opts) {\n    super({\n      pollingInterval: opts.pollingInterval || 8000\n    });\n    this.bridge = \"https://bridge.walletconnect.org\";\n    this.qrcode = true;\n    this.qrcodeModal = QRCodeModal;\n    this.qrcodeModalOptions = undefined;\n    this.rpc = null;\n    this.infuraId = \"\";\n    this.http = null;\n    this.isConnecting = false;\n    this.connected = false;\n    this.connectCallbacks = [];\n    this.accounts = [];\n    this.chainId = 1;\n    this.rpcUrl = \"\";\n\n    this.enable = async () => {\n      const wc = await this.getWalletConnector();\n\n      if (wc) {\n        this.start();\n        this.subscribeWalletConnector();\n        return wc.accounts;\n      } else {\n        throw new Error(\"Failed to connect to WalleConnect\");\n      }\n    };\n\n    this.request = async payload => {\n      return this.send(payload);\n    };\n\n    this.send = async (payload, callback) => {\n      if (typeof payload === \"string\") {\n        const method = payload;\n        let params = callback;\n\n        if (method === \"personal_sign\") {\n          params = parsePersonalSign(params);\n        }\n\n        return this.sendAsyncPromise(method, params);\n      }\n\n      payload = Object.assign({\n        id: payloadId(),\n        jsonrpc: \"2.0\"\n      }, payload);\n\n      if (payload.method === \"personal_sign\") {\n        payload.params = parsePersonalSign(payload.params);\n      }\n\n      if (callback) {\n        this.sendAsync(payload, callback);\n        return;\n      }\n\n      return this.sendAsyncPromise(payload.method, payload.params);\n    };\n\n    this.onConnect = callback => {\n      this.connectCallbacks.push(callback);\n    };\n\n    this.triggerConnect = result => {\n      if (this.connectCallbacks && this.connectCallbacks.length) {\n        this.connectCallbacks.forEach(callback => callback(result));\n      }\n    };\n\n    this.bridge = opts.connector ? opts.connector.bridge : opts.bridge || \"https://bridge.walletconnect.org\";\n    this.qrcode = typeof opts.qrcode === \"undefined\" || opts.qrcode !== false;\n    this.qrcodeModal = opts.qrcodeModal || this.qrcodeModal;\n    this.qrcodeModalOptions = opts.qrcodeModalOptions;\n    this.wc = opts.connector || new WalletConnect({\n      bridge: this.bridge,\n      qrcodeModal: this.qrcode ? this.qrcodeModal : undefined,\n      qrcodeModalOptions: this.qrcodeModalOptions,\n      storageId: opts === null || opts === void 0 ? void 0 : opts.storageId,\n      signingMethods: opts === null || opts === void 0 ? void 0 : opts.signingMethods,\n      clientMeta: opts === null || opts === void 0 ? void 0 : opts.clientMeta\n    });\n    this.rpc = opts.rpc || null;\n\n    if (!this.rpc && (!opts.infuraId || typeof opts.infuraId !== \"string\" || !opts.infuraId.trim())) {\n      throw new Error(\"Missing one of the required parameters: rpc or infuraId\");\n    }\n\n    this.infuraId = opts.infuraId || \"\";\n    this.chainId = (opts === null || opts === void 0 ? void 0 : opts.chainId) || this.chainId;\n    this.initialize();\n  }\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  get connector() {\n    return this.wc;\n  }\n\n  get walletMeta() {\n    return this.wc.peerMeta;\n  }\n\n  async disconnect() {\n    this.close();\n  }\n\n  async close() {\n    const wc = await this.getWalletConnector({\n      disableSessionCreation: true\n    });\n    await wc.killSession();\n    await this.onDisconnect();\n  }\n\n  async handleRequest(payload) {\n    try {\n      let response;\n      let result = null;\n      const wc = await this.getWalletConnector();\n\n      switch (payload.method) {\n        case \"wc_killSession\":\n          await this.close();\n          result = null;\n          break;\n\n        case \"eth_accounts\":\n          result = wc.accounts;\n          break;\n\n        case \"eth_coinbase\":\n          result = wc.accounts[0];\n          break;\n\n        case \"eth_chainId\":\n          result = wc.chainId;\n          break;\n\n        case \"net_version\":\n          result = wc.chainId;\n          break;\n\n        case \"eth_uninstallFilter\":\n          this.sendAsync(payload, _ => _);\n          result = true;\n          break;\n\n        default:\n          response = await this.handleOtherRequests(payload);\n      }\n\n      if (response) {\n        return response;\n      }\n\n      return this.formatResponse(payload, result);\n    } catch (error) {\n      this.emit(\"error\", error);\n      throw error;\n    }\n  }\n\n  async handleOtherRequests(payload) {\n    if (!signingMethods.includes(payload.method) && payload.method.startsWith(\"eth_\")) {\n      return this.handleReadRequests(payload);\n    }\n\n    const wc = await this.getWalletConnector();\n    const result = await wc.sendCustomRequest(payload);\n    return this.formatResponse(payload, result);\n  }\n\n  async handleReadRequests(payload) {\n    if (!this.http) {\n      const error = new Error(\"HTTP Connection not available\");\n      this.emit(\"error\", error);\n      throw error;\n    }\n\n    return this.http.send(payload);\n  }\n\n  formatResponse(payload, result) {\n    return {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      result: result\n    };\n  }\n\n  getWalletConnector() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      disableSessionCreation = false\n    } = opts;\n    return new Promise((resolve, reject) => {\n      const wc = this.wc;\n\n      if (this.isConnecting) {\n        this.onConnect(x => resolve(x));\n      } else if (!wc.connected && !disableSessionCreation) {\n        this.isConnecting = true;\n        wc.on(\"modal_closed\", () => {\n          reject(new Error(\"User closed modal\"));\n        });\n        wc.createSession({\n          chainId: this.chainId\n        }).then(() => {\n          wc.on(\"connect\", (error, payload) => {\n            if (error) {\n              this.isConnecting = false;\n              return reject(error);\n            }\n\n            this.isConnecting = false;\n            this.connected = true;\n\n            if (payload) {\n              this.updateState(payload.params[0]);\n            }\n\n            this.emit(\"connect\");\n            this.triggerConnect(wc);\n            resolve(wc);\n          });\n        }).catch(error => {\n          this.isConnecting = false;\n          reject(error);\n        });\n      } else {\n        if (!this.connected) {\n          this.connected = true;\n          this.updateState(wc.session);\n        }\n\n        resolve(wc);\n      }\n    });\n  }\n\n  async subscribeWalletConnector() {\n    const wc = await this.getWalletConnector();\n    wc.on(\"disconnect\", error => {\n      if (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this.onDisconnect();\n    });\n    wc.on(\"session_update\", (error, payload) => {\n      if (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this.updateState(payload.params[0]);\n    });\n  }\n\n  async onDisconnect() {\n    await this.stop();\n    this.emit(\"close\", 1000, \"Connection closed\");\n    this.emit(\"disconnect\", 1000, \"Connection disconnected\");\n    this.connected = false;\n  }\n\n  async updateState(sessionParams) {\n    const {\n      accounts,\n      chainId,\n      networkId,\n      rpcUrl\n    } = sessionParams;\n\n    if (!this.accounts || accounts && this.accounts !== accounts) {\n      this.accounts = accounts;\n      this.emit(\"accountsChanged\", accounts);\n    }\n\n    if (!this.chainId || chainId && this.chainId !== chainId) {\n      this.chainId = chainId;\n      this.emit(\"chainChanged\", chainId);\n    }\n\n    if (!this.networkId || networkId && this.networkId !== networkId) {\n      this.networkId = networkId;\n      this.emit(\"networkChanged\", networkId);\n    }\n\n    this.updateRpcUrl(this.chainId, rpcUrl || \"\");\n  }\n\n  updateRpcUrl(chainId) {\n    let rpcUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    const rpc = {\n      infuraId: this.infuraId,\n      custom: this.rpc || undefined\n    };\n    rpcUrl = rpcUrl || getRpcUrl(chainId, rpc);\n\n    if (rpcUrl) {\n      this.rpcUrl = rpcUrl;\n      this.updateHttpConnection();\n    } else {\n      this.emit(\"error\", new Error(`No RPC Url available for chainId: ${chainId}`));\n    }\n  }\n\n  updateHttpConnection() {\n    if (this.rpcUrl) {\n      this.http = new HttpConnection(this.rpcUrl);\n      this.http.on(\"payload\", payload => this.emit(\"payload\", payload));\n      this.http.on(\"error\", error => this.emit(\"error\", error));\n    }\n  }\n\n  sendAsyncPromise(method, params) {\n    return new Promise((resolve, reject) => {\n      this.sendAsync({\n        id: payloadId(),\n        jsonrpc: \"2.0\",\n        method,\n        params: params || []\n      }, (error, response) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(response.result);\n      });\n    });\n  }\n\n  initialize() {\n    this.updateRpcUrl(this.chainId);\n    this.addProvider(new FixtureSubprovider({\n      eth_hashrate: \"0x00\",\n      eth_mining: false,\n      eth_syncing: true,\n      net_listening: true,\n      web3_clientVersion: `WalletConnect/v1.x.x/javascript`\n    }));\n    this.addProvider(new CacheSubprovider());\n    this.addProvider(new SubscriptionsSubprovider());\n    this.addProvider(new FilterSubprovider());\n    this.addProvider(new NonceSubprovider());\n    this.addProvider(new HookedWalletSubprovider(this.configWallet()));\n    this.addProvider({\n      handleRequest: async (payload, next, end) => {\n        try {\n          const {\n            error,\n            result\n          } = await this.handleRequest(payload);\n          end(error, result);\n        } catch (error) {\n          end(error);\n        }\n      },\n      setEngine: _ => _\n    });\n  }\n\n  configWallet() {\n    return {\n      getAccounts: async cb => {\n        try {\n          const wc = await this.getWalletConnector();\n          const accounts = wc.accounts;\n\n          if (accounts && accounts.length) {\n            cb(null, accounts);\n          } else {\n            cb(new Error(\"Failed to get accounts\"));\n          }\n        } catch (error) {\n          cb(error);\n        }\n      },\n      processMessage: async (msgParams, cb) => {\n        try {\n          const wc = await this.getWalletConnector();\n          const result = await wc.signMessage([msgParams.from, msgParams.data]);\n          cb(null, result);\n        } catch (error) {\n          cb(error);\n        }\n      },\n      processPersonalMessage: async (msgParams, cb) => {\n        try {\n          const wc = await this.getWalletConnector();\n          const result = await wc.signPersonalMessage([msgParams.data, msgParams.from]);\n          cb(null, result);\n        } catch (error) {\n          cb(error);\n        }\n      },\n      processSignTransaction: async (txParams, cb) => {\n        try {\n          const wc = await this.getWalletConnector();\n          const result = await wc.signTransaction(txParams);\n          cb(null, result);\n        } catch (error) {\n          cb(error);\n        }\n      },\n      processTransaction: async (txParams, cb) => {\n        try {\n          const wc = await this.getWalletConnector();\n          const result = await wc.sendTransaction(txParams);\n          cb(null, result);\n        } catch (error) {\n          cb(error);\n        }\n      },\n      processTypedMessage: async (msgParams, cb) => {\n        try {\n          const wc = await this.getWalletConnector();\n          const result = await wc.signTypedData([msgParams.from, msgParams.data]);\n          cb(null, result);\n        } catch (error) {\n          cb(error);\n        }\n      }\n    };\n  }\n\n}\n\nexport default WalletConnectProvider;","map":{"version":3,"mappings":"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","names":["WalletConnect","QRCodeModal","HttpConnection","payloadId","signingMethods","parsePersonalSign","getRpcUrl","ProviderEngine","require","CacheSubprovider","FixtureSubprovider","FilterSubprovider","HookedWalletSubprovider","NonceSubprovider","SubscriptionsSubprovider","WalletConnectProvider","constructor","opts","pollingInterval","undefined","wc","getWalletConnector","start","subscribeWalletConnector","accounts","Error","payload","send","callback","method","params","sendAsyncPromise","id","jsonrpc","sendAsync","connectCallbacks","push","result","length","forEach","bridge","connector","qrcode","qrcodeModal","qrcodeModalOptions","storageId","clientMeta","rpc","infuraId","trim","chainId","initialize","isWalletConnect","walletMeta","peerMeta","disconnect","close","disableSessionCreation","killSession","onDisconnect","handleRequest","response","_","handleOtherRequests","formatResponse","error","emit","includes","startsWith","handleReadRequests","sendCustomRequest","http","Promise","resolve","reject","isConnecting","onConnect","x","connected","on","createSession","then","updateState","triggerConnect","catch","session","stop","sessionParams","networkId","rpcUrl","updateRpcUrl","custom","updateHttpConnection","addProvider","eth_hashrate","eth_mining","eth_syncing","net_listening","web3_clientVersion","configWallet","next","end","setEngine","getAccounts","cb","processMessage","msgParams","signMessage","from","data","processPersonalMessage","signPersonalMessage","processSignTransaction","txParams","signTransaction","processTransaction","sendTransaction","processTypedMessage","signTypedData"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}