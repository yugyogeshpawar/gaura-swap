{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addTransaction } from './actions';\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder() {\n  const {\n    chainId,\n    account\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  return useCallback(function (response) {\n    let {\n      summary,\n      approval,\n      claim\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!account) return;\n    if (!chainId) return;\n    const {\n      hash\n    } = response;\n\n    if (!hash) {\n      throw Error('No transaction hash found.');\n    }\n\n    dispatch(addTransaction({\n      hash,\n      from: account,\n      chainId,\n      approval,\n      summary,\n      claim\n    }));\n  }, [dispatch, chainId, account]);\n} // returns all the transactions for the current chain\n\nexport function useAllTransactions() {\n  var _state$chainId;\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const state = useSelector(state => state.transactions);\n  return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n}\nexport function useIsTransactionPending(transactionHash) {\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) return false;\n  return !transactions[transactionHash].receipt;\n}\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\n\nexport function isTransactionRecent(tx) {\n  return new Date().getTime() - tx.addedTime < 86400000;\n} // returns whether a token has a pending approval transaction\n\nexport function useHasPendingApproval(tokenAddress, spender) {\n  const allTransactions = useAllTransactions();\n  return useMemo(() => typeof tokenAddress === 'string' && typeof spender === 'string' && Object.keys(allTransactions).some(hash => {\n    const tx = allTransactions[hash];\n    if (!tx) return false;\n\n    if (tx.receipt) {\n      return false;\n    } else {\n      const approval = tx.approval;\n      if (!approval) return false;\n      return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n    }\n  }), [allTransactions, spender, tokenAddress]);\n} // watch for submissions to claim\n// return null if not done loading, return undefined if not found\n\nexport function useUserHasSubmittedClaim(account) {\n  const allTransactions = useAllTransactions(); // get the txn if it has been submitted\n\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find(hash => {\n      const tx = allTransactions[hash];\n      return tx.claim && tx.claim.recipient === account;\n    });\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined;\n  }, [account, allTransactions]);\n  return {\n    claimSubmitted: Boolean(claimTxn),\n    claimTxn\n  };\n}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addTransaction","useTransactionAdder","chainId","account","dispatch","response","summary","approval","claim","hash","Error","from","useAllTransactions","state","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","useUserHasSubmittedClaim","claimTxn","txnIndex","find","recipient","undefined","claimSubmitted","Boolean"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/state/transactions/hooks.tsx"],"sourcesContent":["import { TransactionResponse } from '@ethersproject/providers';\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useActiveWeb3React } from '../../hooks';\nimport { AppDispatch, AppState } from '../index';\nimport { addTransaction } from './actions';\nimport { TransactionDetails } from './reducer';\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string }; claim?: { recipient: string } }\n) => void {\n  const { chainId, account } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      {\n        summary,\n        approval,\n        claim,\n      }: { summary?: string; claim?: { recipient: string }; approval?: { tokenAddress: string; spender: string } } = {}\n    ) => {\n      if (!account) return;\n      if (!chainId) return;\n\n      const { hash } = response;\n      if (!hash) {\n        throw Error('No transaction hash found.');\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary, claim }));\n    },\n    [dispatch, chainId, account]\n  );\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React();\n\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  return chainId ? state[chainId] ?? {} : {};\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions();\n\n  if (!transactionHash || !transactions[transactionHash]) return false;\n\n  return !transactions[transactionHash].receipt;\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000;\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions();\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash];\n        if (!tx) return false;\n        if (tx.receipt) {\n          return false;\n        } else {\n          const approval = tx.approval;\n          if (!approval) return false;\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n        }\n      }),\n    [allTransactions, spender, tokenAddress]\n  );\n}\n\n// watch for submissions to claim\n// return null if not done loading, return undefined if not found\nexport function useUserHasSubmittedClaim(account?: string): {\n  claimSubmitted: boolean;\n  claimTxn: TransactionDetails | undefined;\n} {\n  const allTransactions = useAllTransactions();\n\n  // get the txn if it has been submitted\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find((hash) => {\n      const tx = allTransactions[hash];\n      return tx.claim && tx.claim.recipient === account;\n    });\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined;\n  }, [account, allTransactions]);\n\n  return { claimSubmitted: Boolean(claimTxn), claimTxn };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}