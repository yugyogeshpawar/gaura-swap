{"ast":null,"code":"var _process$env$REACT_AP;\n\nimport { Web3Provider } from '@ethersproject/providers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'; // import { PortisConnector } from '@web3-react/portis-connector';\n// import { FortmaticConnector } from './Fortmatic';\n\nimport { NetworkConnector } from './NetworkConnector';\nconst REACT_APP_NETWORK_URL = process.env.REACT_APP_NETWORK_URL; // const FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\n// const PORTIS_ID = process.env.REACT_APP_PORTIS_ID\n\nexport const NETWORK_CHAIN_ID = parseInt((_process$env$REACT_AP = process.env.REACT_APP_CHAIN_ID) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : '1');\n\nif (typeof REACT_APP_NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`);\n}\n\nexport const network = new NetworkConnector({\n  urls: {\n    [NETWORK_CHAIN_ID]: REACT_APP_NETWORK_URL\n  }\n});\nlet networkLibrary;\nexport function getNetworkLibrary() {\n  var _networkLibrary;\n\n  return networkLibrary = (_networkLibrary = networkLibrary) !== null && _networkLibrary !== void 0 ? _networkLibrary : new Web3Provider(network.provider);\n}\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 4, 33982]\n}); // mainnet only\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: {\n    1: REACT_APP_NETWORK_URL\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 15000\n}); // mainnet only\n// export const fortmatic = new FortmaticConnector({\n//   apiKey: FORMATIC_KEY ?? '',\n//   chainId: 1\n// })\n// mainnet only\n// export const portis = new PortisConnector({\n//   dAppId: PORTIS_ID ?? '',\n//   networks: [1]\n// })\n// mainnet only\n\nexport const walletlink = new WalletLinkConnector({\n  url: REACT_APP_NETWORK_URL,\n  appName: 'Swap' // appLogoUrl: '',\n\n});","map":{"version":3,"names":["Web3Provider","InjectedConnector","WalletConnectConnector","WalletLinkConnector","NetworkConnector","REACT_APP_NETWORK_URL","process","env","NETWORK_CHAIN_ID","parseInt","REACT_APP_CHAIN_ID","Error","network","urls","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","walletlink","url","appName"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/connectors/index.ts"],"sourcesContent":["import { Web3Provider } from '@ethersproject/providers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\n// import { PortisConnector } from '@web3-react/portis-connector';\n// import { FortmaticConnector } from './Fortmatic';\nimport { NetworkConnector } from './NetworkConnector';\n\nconst REACT_APP_NETWORK_URL = process.env.REACT_APP_NETWORK_URL;\n// const FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\n// const PORTIS_ID = process.env.REACT_APP_PORTIS_ID\n\nexport const NETWORK_CHAIN_ID: number = parseInt(process.env.REACT_APP_CHAIN_ID ?? '1');\n\nif (typeof REACT_APP_NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`);\n}\n\nexport const network = new NetworkConnector({\n  urls: { [NETWORK_CHAIN_ID]: REACT_APP_NETWORK_URL },\n});\n\nlet networkLibrary: Web3Provider | undefined;\nexport function getNetworkLibrary(): Web3Provider {\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any));\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 4, 33982],\n});\n\n// mainnet only\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: REACT_APP_NETWORK_URL },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 15000,\n});\n\n// mainnet only\n// export const fortmatic = new FortmaticConnector({\n//   apiKey: FORMATIC_KEY ?? '',\n//   chainId: 1\n// })\n\n// mainnet only\n// export const portis = new PortisConnector({\n//   dAppId: PORTIS_ID ?? '',\n//   networks: [1]\n// })\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: REACT_APP_NETWORK_URL,\n  appName: 'Swap',\n  // appLogoUrl: '',\n});\n"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,mBAAT,QAAoC,kCAApC,C,CACA;AACA;;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,MAAMC,qBAAqB,GAAGC,OAAO,CAACC,GAAR,CAAYF,qBAA1C,C,CACA;AACA;;AAEA,OAAO,MAAMG,gBAAwB,GAAGC,QAAQ,0BAACH,OAAO,CAACC,GAAR,CAAYG,kBAAb,yEAAmC,GAAnC,CAAzC;;AAEP,IAAI,OAAOL,qBAAP,KAAiC,WAArC,EAAkD;EAChD,MAAM,IAAIM,KAAJ,CAAW,8DAAX,CAAN;AACD;;AAED,OAAO,MAAMC,OAAO,GAAG,IAAIR,gBAAJ,CAAqB;EAC1CS,IAAI,EAAE;IAAE,CAACL,gBAAD,GAAoBH;EAAtB;AADoC,CAArB,CAAhB;AAIP,IAAIS,cAAJ;AACA,OAAO,SAASC,iBAAT,GAA2C;EAAA;;EAChD,OAAQD,cAAc,sBAAGA,cAAH,6DAAqB,IAAId,YAAJ,CAAiBY,OAAO,CAACI,QAAzB,CAA3C;AACD;AAED,OAAO,MAAMC,QAAQ,GAAG,IAAIhB,iBAAJ,CAAsB;EAC5CiB,iBAAiB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP;AADyB,CAAtB,CAAjB,C,CAIP;;AACA,OAAO,MAAMC,aAAa,GAAG,IAAIjB,sBAAJ,CAA2B;EACtDkB,GAAG,EAAE;IAAE,GAAGf;EAAL,CADiD;EAEtDgB,MAAM,EAAE,kCAF8C;EAGtDC,MAAM,EAAE,IAH8C;EAItDC,eAAe,EAAE;AAJqC,CAA3B,CAAtB,C,CAOP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,IAAIrB,mBAAJ,CAAwB;EAChDsB,GAAG,EAAEpB,qBAD2C;EAEhDqB,OAAO,EAAE,MAFuC,CAGhD;;AAHgD,CAAxB,CAAnB"},"metadata":{},"sourceType":"module"}