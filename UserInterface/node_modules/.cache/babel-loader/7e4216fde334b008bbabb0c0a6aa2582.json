{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n\nfunction isAccount(value) {\n  return value != null && isHexString(value.privateKey, 32) && value.address != null;\n}\n\nfunction hasMnemonic(value) {\n  var mnemonic = value.mnemonic;\n  return mnemonic && mnemonic.phrase;\n}\n\nexport var Wallet = /*#__PURE__*/function (_Signer) {\n  _inherits(Wallet, _Signer);\n\n  var _super = _createSuper(Wallet);\n\n  function Wallet(privateKey, provider) {\n    var _this;\n\n    _classCallCheck(this, Wallet);\n\n    logger.checkNew(this instanceof Wallet ? this.constructor : void 0, Wallet);\n    _this = _super.call(this);\n\n    if (isAccount(privateKey)) {\n      var signingKey = new SigningKey(privateKey.privateKey);\n      defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n        return signingKey;\n      });\n      defineReadOnly(_assertThisInitialized(_this), \"address\", computeAddress(_this.publicKey));\n\n      if (_this.address !== getAddress(privateKey.address)) {\n        logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n      }\n\n      if (hasMnemonic(privateKey)) {\n        var srcMnemonic = privateKey.mnemonic;\n        defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n          return {\n            phrase: srcMnemonic.phrase,\n            path: srcMnemonic.path || defaultPath,\n            locale: srcMnemonic.locale || \"en\"\n          };\n        });\n        var mnemonic = _this.mnemonic;\n        var node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n\n        if (computeAddress(node.privateKey) !== _this.address) {\n          logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n        }\n      } else {\n        defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n          return null;\n        });\n      }\n    } else {\n      if (SigningKey.isSigningKey(privateKey)) {\n        /* istanbul ignore if */\n        if (privateKey.curve !== \"secp256k1\") {\n          logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n        }\n\n        defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n          return privateKey;\n        });\n      } else {\n        // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n        if (typeof privateKey === \"string\") {\n          if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n            privateKey = \"0x\" + privateKey;\n          }\n        }\n\n        var _signingKey = new SigningKey(privateKey);\n\n        defineReadOnly(_assertThisInitialized(_this), \"_signingKey\", function () {\n          return _signingKey;\n        });\n      }\n\n      defineReadOnly(_assertThisInitialized(_this), \"_mnemonic\", function () {\n        return null;\n      });\n      defineReadOnly(_assertThisInitialized(_this), \"address\", computeAddress(_this.publicKey));\n    }\n    /* istanbul ignore if */\n\n\n    if (provider && !Provider.isProvider(provider)) {\n      logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n    }\n\n    defineReadOnly(_assertThisInitialized(_this), \"provider\", provider || null);\n    return _this;\n  }\n\n  _createClass(Wallet, [{\n    key: \"mnemonic\",\n    get: function get() {\n      return this._mnemonic();\n    }\n  }, {\n    key: \"privateKey\",\n    get: function get() {\n      return this._signingKey().privateKey;\n    }\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this._signingKey().publicKey;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      return Promise.resolve(this.address);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new Wallet(this, provider);\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      var _this2 = this;\n\n      return resolveProperties(transaction).then(function (tx) {\n        if (tx.from != null) {\n          if (getAddress(tx.from) !== _this2.address) {\n            logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n          }\n\n          delete tx.from;\n        }\n\n        var signature = _this2._signingKey().signDigest(keccak256(serialize(tx)));\n\n        return serialize(tx, signature);\n      });\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", joinSignature(this._signingKey().signDigest(hashMessage(message))));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this3 = this;\n\n        var populated;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n                  if (_this3.provider == null) {\n                    logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      operation: \"resolveName\",\n                      value: name\n                    });\n                  }\n\n                  return _this3.provider.resolveName(name);\n                });\n\n              case 2:\n                populated = _context2.sent;\n                return _context2.abrupt(\"return\", joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value))));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(password, options, progressCallback) {\n      if (typeof options === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n      }\n\n      if (progressCallback && typeof progressCallback !== \"function\") {\n        throw new Error(\"invalid callback\");\n      }\n\n      if (!options) {\n        options = {};\n      }\n\n      return encryptKeystore(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n\n  }], [{\n    key: \"createRandom\",\n    value: function createRandom(options) {\n      var entropy = randomBytes(16);\n\n      if (!options) {\n        options = {};\n      }\n\n      if (options.extraEntropy) {\n        entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n      }\n\n      var mnemonic = entropyToMnemonic(entropy, options.locale);\n      return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n  }, {\n    key: \"fromEncryptedJson\",\n    value: function fromEncryptedJson(json, password, progressCallback) {\n      return decryptJsonWallet(json, password, progressCallback).then(function (account) {\n        return new Wallet(account);\n      });\n    }\n  }, {\n    key: \"fromEncryptedJsonSync\",\n    value: function fromEncryptedJsonSync(json, password) {\n      return new Wallet(decryptJsonWalletSync(json, password));\n    }\n  }, {\n    key: \"fromMnemonic\",\n    value: function fromMnemonic(mnemonic, path, wordlist) {\n      if (!path) {\n        path = defaultPath;\n      }\n\n      return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n  }]);\n\n  return Wallet;\n}(Signer);\nexport function verifyMessage(message, signature) {\n  return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"mappings":"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","names":["getAddress","Provider","Signer","arrayify","concat","hexDataSlice","isHexString","joinSignature","hashMessage","_TypedDataEncoder","defaultPath","HDNode","entropyToMnemonic","keccak256","defineReadOnly","resolveProperties","randomBytes","SigningKey","decryptJsonWallet","decryptJsonWalletSync","encryptKeystore","computeAddress","recoverAddress","serialize","Logger","version","logger","isAccount","value","privateKey","address","hasMnemonic","mnemonic","phrase","Wallet","provider","checkNew","signingKey","publicKey","throwArgumentError","srcMnemonic","path","locale","node","fromMnemonic","derivePath","isSigningKey","curve","match","length","isProvider","_mnemonic","_signingKey","Promise","resolve","transaction","then","tx","from","signature","signDigest","message","domain","types","resolveNames","name","throwError","errors","UNSUPPORTED_OPERATION","operation","resolveName","populated","hash","password","options","progressCallback","Error","entropy","extraEntropy","json","account","wordlist","verifyMessage","verifyTypedData"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}