{"ast":null,"code":"// chunks array into chunks of maximum size\n// evenly distributes items among the chunks\nexport default function chunkArray(items, maxChunkSize) {\n  if (maxChunkSize < 1) throw new Error('maxChunkSize must be gte 1');\n  if (items.length <= maxChunkSize) return [items];\n  const numChunks = Math.ceil(items.length / maxChunkSize);\n  const chunkSize = Math.ceil(items.length / numChunks);\n  return [...Array(numChunks).keys()].map(ix => items.slice(ix * chunkSize, ix * chunkSize + chunkSize));\n}","map":{"version":3,"names":["chunkArray","items","maxChunkSize","Error","length","numChunks","Math","ceil","chunkSize","Array","keys","map","ix","slice"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/utils/chunkArray.ts"],"sourcesContent":["// chunks array into chunks of maximum size\n// evenly distributes items among the chunks\nexport default function chunkArray<T>(items: T[], maxChunkSize: number): T[][] {\n  if (maxChunkSize < 1) throw new Error('maxChunkSize must be gte 1');\n  if (items.length <= maxChunkSize) return [items];\n\n  const numChunks: number = Math.ceil(items.length / maxChunkSize);\n  const chunkSize = Math.ceil(items.length / numChunks);\n\n  return [...Array(numChunks).keys()].map((ix) => items.slice(ix * chunkSize, ix * chunkSize + chunkSize));\n}\n"],"mappings":"AAAA;AACA;AACA,eAAe,SAASA,UAAT,CAAuBC,KAAvB,EAAmCC,YAAnC,EAAgE;EAC7E,IAAIA,YAAY,GAAG,CAAnB,EAAsB,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;EACtB,IAAIF,KAAK,CAACG,MAAN,IAAgBF,YAApB,EAAkC,OAAO,CAACD,KAAD,CAAP;EAElC,MAAMI,SAAiB,GAAGC,IAAI,CAACC,IAAL,CAAUN,KAAK,CAACG,MAAN,GAAeF,YAAzB,CAA1B;EACA,MAAMM,SAAS,GAAGF,IAAI,CAACC,IAAL,CAAUN,KAAK,CAACG,MAAN,GAAeC,SAAzB,CAAlB;EAEA,OAAO,CAAC,GAAGI,KAAK,CAACJ,SAAD,CAAL,CAAiBK,IAAjB,EAAJ,EAA6BC,GAA7B,CAAkCC,EAAD,IAAQX,KAAK,CAACY,KAAN,CAAYD,EAAE,GAAGJ,SAAjB,EAA4BI,EAAE,GAAGJ,SAAL,GAAiBA,SAA7C,CAAzC,CAAP;AACD"},"metadata":{},"sourceType":"module"}