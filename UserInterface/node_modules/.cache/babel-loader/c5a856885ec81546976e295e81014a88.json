{"ast":null,"code":"import _toConsumableArray from\"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{isTradeBetter}from'utils/trades';import{Trade}from'@uniswap/sdk';import flatMap from'lodash.flatmap';import{useMemo}from'react';import{BASES_TO_CHECK_TRADES_AGAINST,CUSTOM_BASES,BETTER_TRADE_LESS_HOPS_THRESHOLD}from'../constants';import{PairState,usePairs}from'../data/Reserves';import{wrappedCurrency}from'../utils/wrappedCurrency';import{useActiveWeb3React}from'./index';import{useUserSingleHopOnly}from'state/user/hooks';function useAllCommonPairs(currencyA,currencyB){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var bases=chainId?BASES_TO_CHECK_TRADES_AGAINST[chainId]:[];var _ref=chainId?[wrappedCurrency(currencyA,chainId),wrappedCurrency(currencyB,chainId)]:[undefined,undefined],_ref2=_slicedToArray(_ref,2),tokenA=_ref2[0],tokenB=_ref2[1];var basePairs=useMemo(function(){return flatMap(bases,function(base){return bases.map(function(otherBase){return[base,otherBase];});}).filter(function(_ref3){var _ref4=_slicedToArray(_ref3,2),t0=_ref4[0],t1=_ref4[1];return t0.address!==t1.address;});},[bases]);var allPairCombinations=useMemo(function(){return tokenA&&tokenB?[// the direct pair\n[tokenA,tokenB]].concat(_toConsumableArray(bases.map(function(base){return[tokenA,base];})),_toConsumableArray(bases.map(function(base){return[tokenB,base];})),_toConsumableArray(basePairs)).filter(function(tokens){return Boolean(tokens[0]&&tokens[1]);}).filter(function(_ref5){var _ref6=_slicedToArray(_ref5,2),t0=_ref6[0],t1=_ref6[1];return t0.address!==t1.address;}).filter(function(_ref7){var _ref8=_slicedToArray(_ref7,2),tokenA=_ref8[0],tokenB=_ref8[1];if(!chainId)return true;var customBases=CUSTOM_BASES[chainId];if(!customBases)return true;var customBasesA=customBases[tokenA.address];var customBasesB=customBases[tokenB.address];if(!customBasesA&&!customBasesB)return true;if(customBasesA&&!customBasesA.find(function(base){return tokenB.equals(base);}))return false;if(customBasesB&&!customBasesB.find(function(base){return tokenA.equals(base);}))return false;return true;}):[];},[tokenA,tokenB,bases,basePairs,chainId]);var allPairs=usePairs(allPairCombinations);// only pass along valid pairs, non-duplicated pairs\nreturn useMemo(function(){return Object.values(allPairs// filter out invalid pairs\n.filter(function(result){return Boolean(result[0]===PairState.EXISTS&&result[1]);})// filter out duplicated pairs\n.reduce(function(memo,_ref9){var _memo$curr$liquidityT;var _ref10=_slicedToArray(_ref9,2),curr=_ref10[1];memo[curr.liquidityToken.address]=(_memo$curr$liquidityT=memo[curr.liquidityToken.address])!==null&&_memo$curr$liquidityT!==void 0?_memo$curr$liquidityT:curr;return memo;},{}));},[allPairs]);}var MAX_HOPS=3;/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */export function useTradeExactIn(currencyAmountIn,currencyOut){var allowedPairs=useAllCommonPairs(currencyAmountIn===null||currencyAmountIn===void 0?void 0:currencyAmountIn.currency,currencyOut);var _useUserSingleHopOnly=useUserSingleHopOnly(),_useUserSingleHopOnly2=_slicedToArray(_useUserSingleHopOnly,1),singleHopOnly=_useUserSingleHopOnly2[0];return useMemo(function(){if(currencyAmountIn&&currencyOut&&allowedPairs.length>0){if(singleHopOnly){var _Trade$bestTradeExact;return(_Trade$bestTradeExact=Trade.bestTradeExactIn(allowedPairs,currencyAmountIn,currencyOut,{maxHops:1,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact!==void 0?_Trade$bestTradeExact:null;}// search through trades with varying hops, find best trade out of them\nvar bestTradeSoFar=null;for(var i=1;i<=MAX_HOPS;i++){var _Trade$bestTradeExact2;var currentTrade=(_Trade$bestTradeExact2=Trade.bestTradeExactIn(allowedPairs,currencyAmountIn,currencyOut,{maxHops:i,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact2!==void 0?_Trade$bestTradeExact2:null;// if current trade is best yet, save it\nif(isTradeBetter(bestTradeSoFar,currentTrade,BETTER_TRADE_LESS_HOPS_THRESHOLD)){bestTradeSoFar=currentTrade;}}return bestTradeSoFar;}return null;},[allowedPairs,currencyAmountIn,currencyOut,singleHopOnly]);}/**\n * Returns the best trade for the token in to the exact amount of token out\n */export function useTradeExactOut(currencyIn,currencyAmountOut){var allowedPairs=useAllCommonPairs(currencyIn,currencyAmountOut===null||currencyAmountOut===void 0?void 0:currencyAmountOut.currency);var _useUserSingleHopOnly3=useUserSingleHopOnly(),_useUserSingleHopOnly4=_slicedToArray(_useUserSingleHopOnly3,1),singleHopOnly=_useUserSingleHopOnly4[0];return useMemo(function(){if(currencyIn&&currencyAmountOut&&allowedPairs.length>0){if(singleHopOnly){var _Trade$bestTradeExact3;return(_Trade$bestTradeExact3=Trade.bestTradeExactOut(allowedPairs,currencyIn,currencyAmountOut,{maxHops:1,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact3!==void 0?_Trade$bestTradeExact3:null;}// search through trades with varying hops, find best trade out of them\nvar bestTradeSoFar=null;for(var i=1;i<=MAX_HOPS;i++){var _Trade$bestTradeExact4;var currentTrade=(_Trade$bestTradeExact4=Trade.bestTradeExactOut(allowedPairs,currencyIn,currencyAmountOut,{maxHops:i,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact4!==void 0?_Trade$bestTradeExact4:null;if(isTradeBetter(bestTradeSoFar,currentTrade,BETTER_TRADE_LESS_HOPS_THRESHOLD)){bestTradeSoFar=currentTrade;}}return bestTradeSoFar;}return null;},[currencyIn,currencyAmountOut,allowedPairs,singleHopOnly]);}","map":{"version":3,"names":["isTradeBetter","Trade","flatMap","useMemo","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","BETTER_TRADE_LESS_HOPS_THRESHOLD","PairState","usePairs","wrappedCurrency","useActiveWeb3React","useUserSingleHopOnly","useAllCommonPairs","currencyA","currencyB","chainId","bases","undefined","tokenA","tokenB","basePairs","base","map","otherBase","filter","t0","t1","address","allPairCombinations","tokens","Boolean","customBases","customBasesA","customBasesB","find","equals","allPairs","Object","values","result","EXISTS","reduce","memo","curr","liquidityToken","MAX_HOPS","useTradeExactIn","currencyAmountIn","currencyOut","allowedPairs","currency","singleHopOnly","length","bestTradeExactIn","maxHops","maxNumResults","bestTradeSoFar","i","currentTrade","useTradeExactOut","currencyIn","currencyAmountOut","bestTradeExactOut"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/hooks/Trades.ts"],"sourcesContent":["import { isTradeBetter } from 'utils/trades';\nimport { Currency, CurrencyAmount, Pair, Token, Trade } from '@uniswap/sdk';\nimport flatMap from 'lodash.flatmap';\nimport { useMemo } from 'react';\n\nimport { BASES_TO_CHECK_TRADES_AGAINST, CUSTOM_BASES, BETTER_TRADE_LESS_HOPS_THRESHOLD } from '../constants';\nimport { PairState, usePairs } from '../data/Reserves';\nimport { wrappedCurrency } from '../utils/wrappedCurrency';\n\nimport { useActiveWeb3React } from './index';\nimport { useUserSingleHopOnly } from 'state/user/hooks';\n\nfunction useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\n  const { chainId } = useActiveWeb3React();\n\n  const bases: Token[] = chainId ? BASES_TO_CHECK_TRADES_AGAINST[chainId] : [];\n\n  const [tokenA, tokenB] = chainId\n    ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n    : [undefined, undefined];\n\n  const basePairs: [Token, Token][] = useMemo(\n    () =>\n      flatMap(bases, (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])).filter(\n        ([t0, t1]) => t0.address !== t1.address\n      ),\n    [bases]\n  );\n\n  const allPairCombinations: [Token, Token][] = useMemo(\n    () =>\n      tokenA && tokenB\n        ? [\n            // the direct pair\n            [tokenA, tokenB],\n            // token A against all bases\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\n            // token B against all bases\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\n            // each base against all bases\n            ...basePairs,\n          ]\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n            .filter(([t0, t1]) => t0.address !== t1.address)\n            .filter(([tokenA, tokenB]) => {\n              if (!chainId) return true;\n              const customBases = CUSTOM_BASES[chainId];\n              if (!customBases) return true;\n\n              const customBasesA: Token[] | undefined = customBases[tokenA.address];\n              const customBasesB: Token[] | undefined = customBases[tokenB.address];\n\n              if (!customBasesA && !customBasesB) return true;\n\n              if (customBasesA && !customBasesA.find((base) => tokenB.equals(base))) return false;\n              if (customBasesB && !customBasesB.find((base) => tokenA.equals(base))) return false;\n\n              return true;\n            })\n        : [],\n    [tokenA, tokenB, bases, basePairs, chainId]\n  );\n\n  const allPairs = usePairs(allPairCombinations);\n\n  // only pass along valid pairs, non-duplicated pairs\n  return useMemo(\n    () =>\n      Object.values(\n        allPairs\n          // filter out invalid pairs\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\n          // filter out duplicated pairs\n          .reduce<{ [pairAddress: string]: Pair }>((memo, [, curr]) => {\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr;\n            return memo;\n          }, {})\n      ),\n    [allPairs]\n  );\n}\n\nconst MAX_HOPS = 3;\n\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\nexport function useTradeExactIn(currencyAmountIn?: CurrencyAmount, currencyOut?: Currency): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyAmountIn?.currency, currencyOut);\n\n  const [singleHopOnly] = useUserSingleHopOnly();\n\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      if (singleHopOnly) {\n        return (\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: 1, maxNumResults: 1 })[0] ??\n          null\n        );\n      }\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade | null = null;\n      for (let i = 1; i <= MAX_HOPS; i++) {\n        const currentTrade: Trade | null =\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: i, maxNumResults: 1 })[0] ??\n          null;\n        // if current trade is best yet, save it\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade;\n        }\n      }\n      return bestTradeSoFar;\n    }\n\n    return null;\n  }, [allowedPairs, currencyAmountIn, currencyOut, singleHopOnly]);\n}\n\n/**\n * Returns the best trade for the token in to the exact amount of token out\n */\nexport function useTradeExactOut(currencyIn?: Currency, currencyAmountOut?: CurrencyAmount): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut?.currency);\n\n  const [singleHopOnly] = useUserSingleHopOnly();\n\n  return useMemo(() => {\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\n      if (singleHopOnly) {\n        return (\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 1, maxNumResults: 1 })[0] ??\n          null\n        );\n      }\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade | null = null;\n      for (let i = 1; i <= MAX_HOPS; i++) {\n        const currentTrade =\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: i, maxNumResults: 1 })[0] ??\n          null;\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade;\n        }\n      }\n      return bestTradeSoFar;\n    }\n    return null;\n  }, [currencyIn, currencyAmountOut, allowedPairs, singleHopOnly]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}