{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport { XMLHttpRequest } from \"xhr2-cookies\";\nimport { getFromWindow } from \"@walletconnect/utils\";\nconst XHR = getFromWindow(\"XMLHttpRequest\") || XMLHttpRequest;\n\nclass HTTPConnection extends EventEmitter {\n  constructor(url) {\n    super();\n    this.url = url;\n  }\n\n  formatError(payload, message) {\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    return {\n      error: {\n        message,\n        code\n      },\n      id: payload.id,\n      jsonrpc: payload.jsonrpc\n    };\n  }\n\n  send(payload, internal) {\n    return new Promise(resolve => {\n      if (payload.method === \"eth_subscribe\") {\n        const error = this.formatError(payload, \"Subscriptions are not supported by this HTTP endpoint\");\n        this.emit(\"error\", error);\n        return resolve(error);\n      }\n\n      const xhr = new XHR();\n      let responded = false;\n\n      const res = (err, result) => {\n        if (!responded) {\n          xhr.abort();\n          responded = true;\n\n          if (internal) {\n            internal(err, result);\n          } else {\n            const {\n              id,\n              jsonrpc\n            } = payload;\n            const response = err ? {\n              id,\n              jsonrpc,\n              error: {\n                message: err.message,\n                code: err.code\n              }\n            } : {\n              id,\n              jsonrpc,\n              result\n            };\n            this.emit(\"payload\", response);\n            resolve(response);\n          }\n        }\n      };\n\n      xhr.open(\"POST\", this.url, true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.timeout = 60 * 1000;\n      xhr.onerror = res;\n      xhr.ontimeout = res;\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          try {\n            const response = JSON.parse(xhr.responseText);\n            res(response.error, response.result);\n          } catch (e) {\n            res(e);\n          }\n        }\n      };\n\n      xhr.send(JSON.stringify(payload));\n    });\n  }\n\n}\n\nexport default HTTPConnection;","map":{"version":3,"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,SAASC,aAAT,QAA8B,sBAA9B;AAIA,MAAMC,GAAG,GAAGD,aAAa,CAAwB,gBAAxB,CAAb,IAA0DD,cAAtE;;AAIA,MAAMG,cAAN,SAA6BJ,YAA7B,CAAyC;EAGvCK,YAAYC,GAAZ,EAAuB;IACrB;IACA,KAAKA,GAAL,GAAWA,GAAX;EACD;;EAEDC,WAAW,CAACC,OAAD,EAAeC,OAAf,EAAyC;IAAA,IAATC,IAAS,uEAAF,CAAC,CAAC;IAClD,OAAO;MACLC,KAAK,EAAE;QAAEF,OAAF;QAAWC;MAAX,CADF;MAELE,EAAE,EAAEJ,OAAO,CAACI,EAFP;MAGLC,OAAO,EAAEL,OAAO,CAACK;IAHZ,CAAP;EAKD;;EAEMC,IAAI,CAACN,OAAD,EAAeO,QAAf,EAA6B;IACtC,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAG;MAC3B,IAAIT,OAAO,CAACU,MAAR,KAAmB,eAAvB,EAAwC;QACtC,MAAMP,KAAK,GAAG,KAAKJ,WAAL,CACZC,OADY,EAEZ,uDAFY,CAAd;QAIA,KAAKW,IAAL,CAAU,OAAV,EAAmBR,KAAnB;QACA,OAAOM,OAAO,CAACN,KAAD,CAAd;MACD;;MACD,MAAMS,GAAG,GAAG,IAAIjB,GAAJ,EAAZ;MAEA,IAAIkB,SAAS,GAAG,KAAhB;;MAEA,MAAMC,GAAG,GAAG,CAACC,GAAD,EAAcC,MAAd,KAA8B;QACxC,IAAI,CAACH,SAAL,EAAgB;UACdD,GAAG,CAACK,KAAJ;UACAJ,SAAS,GAAG,IAAZ;;UACA,IAAIN,QAAJ,EAAc;YACZA,QAAQ,CAACQ,GAAD,EAAMC,MAAN,CAAR;UACD,CAFD,MAEO;YACL,MAAM;cAAEZ,EAAF;cAAMC;YAAN,IAAkBL,OAAxB;YACA,MAAMkB,QAAQ,GAAGH,GAAG,GAChB;cAAEX,EAAF;cAAMC,OAAN;cAAeF,KAAK,EAAE;gBAAEF,OAAO,EAAEc,GAAG,CAACd,OAAf;gBAAwBC,IAAI,EAAEa,GAAG,CAACb;cAAlC;YAAtB,CADgB,GAEhB;cAAEE,EAAF;cAAMC,OAAN;cAAeW;YAAf,CAFJ;YAGA,KAAKL,IAAL,CAAU,SAAV,EAAqBO,QAArB;YACAT,OAAO,CAACS,QAAD,CAAP;UACD;QACF;MACF,CAfD;;MAiBAN,GAAG,CAACO,IAAJ,CAAS,MAAT,EAAiB,KAAKrB,GAAtB,EAA2B,IAA3B;MACAc,GAAG,CAACQ,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;MACAR,GAAG,CAACS,OAAJ,GAAc,KAAK,IAAnB;MACAT,GAAG,CAACU,OAAJ,GAAcR,GAAd;MACAF,GAAG,CAACW,SAAJ,GAAgBT,GAAhB;;MACAF,GAAG,CAACY,kBAAJ,GAAyB,MAAK;QAC5B,IAAIZ,GAAG,CAACa,UAAJ,KAAmB,CAAvB,EAA0B;UACxB,IAAI;YACF,MAAMP,QAAQ,GAAGQ,IAAI,CAACC,KAAL,CAAWf,GAAG,CAACgB,YAAf,CAAjB;YACAd,GAAG,CAACI,QAAQ,CAACf,KAAV,EAAiBe,QAAQ,CAACF,MAA1B,CAAH;UACD,CAHD,CAGE,OAAOa,CAAP,EAAU;YACVf,GAAG,CAACe,CAAD,CAAH;UACD;QACF;MACF,CATD;;MAUAjB,GAAG,CAACN,IAAJ,CAASoB,IAAI,CAACI,SAAL,CAAe9B,OAAf,CAAT;IACD,CA9CM,CAAP;EA+CD;;AAhEsC;;AAmEzC,eAAeJ,cAAf","names":["EventEmitter","XMLHttpRequest","getFromWindow","XHR","HTTPConnection","constructor","url","formatError","payload","message","code","error","id","jsonrpc","send","internal","Promise","resolve","method","emit","xhr","responded","res","err","result","abort","response","open","setRequestHeader","timeout","onerror","ontimeout","onreadystatechange","readyState","JSON","parse","responseText","e","stringify"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}