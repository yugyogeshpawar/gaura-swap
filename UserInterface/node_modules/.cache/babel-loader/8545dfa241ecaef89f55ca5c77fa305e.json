{"ast":null,"code":"'use strict'; // base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nfunction base(ALPHABET) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n\n  var BASE_MAP = new Uint8Array(256);\n\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n\n    BASE_MAP[xc] = i;\n  }\n\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n\n  function encode(source) {\n    if (source instanceof Uint8Array) {} else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n\n    if (source.length === 0) {\n      return '';\n    } // Skip & count leading zeroes.\n\n\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    } // Allocate enough space in big-endian base58 representation.\n\n\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size); // Process the bytes.\n\n    while (pbegin !== pend) {\n      var carry = source[pbegin]; // Apply \"b58 = b58 * 256 + ch\".\n\n      var i = 0;\n\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n\n      length = i;\n      pbegin++;\n    } // Skip leading zeroes in base58 result.\n\n\n    var it2 = size - length;\n\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    } // Translate the result into a string.\n\n\n    var str = LEADER.repeat(zeroes);\n\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n\n    return str;\n  }\n\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n\n    var psz = 0; // Skip leading spaces.\n\n    if (source[psz] === ' ') {\n      return;\n    } // Skip and count leading '1's.\n\n\n    var zeroes = 0;\n    var length = 0;\n\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    } // Allocate enough space in big-endian base256 representation.\n\n\n    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.\n\n    var b256 = new Uint8Array(size); // Process the characters.\n\n    while (source[psz]) {\n      // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character\n\n      if (carry === 255) {\n        return;\n      }\n\n      var i = 0;\n\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n\n      length = i;\n      psz++;\n    } // Skip trailing spaces.\n\n\n    if (source[psz] === ' ') {\n      return;\n    } // Skip leading zeroes in b256.\n\n\n    var it4 = size - length;\n\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n\n    return vch;\n  }\n\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n\n    if (buffer) {\n      return buffer;\n    }\n\n    throw new Error('Non-base' + BASE + ' character');\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\n\nmodule.exports = base;","map":{"version":3,"names":["base","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","encode","source","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","zeroes","pbegin","pend","size","b58","carry","it1","Error","it2","str","repeat","decodeUnsafe","psz","b256","it3","it4","vch","decode","string","module","exports"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/@multiformats/base-x/src/index.js"],"sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;;AACA,SAASA,IAAT,CAAeC,QAAf,EAAyB;EACvB,IAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;IAAE,MAAM,IAAIC,SAAJ,CAAc,mBAAd,CAAN;EAA0C;;EACxE,IAAIC,QAAQ,GAAG,IAAIC,UAAJ,CAAe,GAAf,CAAf;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACF,MAA7B,EAAqCI,CAAC,EAAtC,EAA0C;IACxCF,QAAQ,CAACE,CAAD,CAAR,GAAc,GAAd;EACD;;EACD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACC,MAA7B,EAAqCK,CAAC,EAAtC,EAA0C;IACxC,IAAIC,CAAC,GAAGP,QAAQ,CAACQ,MAAT,CAAgBF,CAAhB,CAAR;IACA,IAAIG,EAAE,GAAGF,CAAC,CAACG,UAAF,CAAa,CAAb,CAAT;;IACA,IAAIP,QAAQ,CAACM,EAAD,CAAR,KAAiB,GAArB,EAA0B;MAAE,MAAM,IAAIP,SAAJ,CAAcK,CAAC,GAAG,eAAlB,CAAN;IAA0C;;IACtEJ,QAAQ,CAACM,EAAD,CAAR,GAAeH,CAAf;EACD;;EACD,IAAIK,IAAI,GAAGX,QAAQ,CAACC,MAApB;EACA,IAAIW,MAAM,GAAGZ,QAAQ,CAACQ,MAAT,CAAgB,CAAhB,CAAb;EACA,IAAIK,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASJ,IAAT,IAAiBG,IAAI,CAACC,GAAL,CAAS,GAAT,CAA9B,CAduB,CAcqB;;EAC5C,IAAIC,OAAO,GAAGF,IAAI,CAACC,GAAL,CAAS,GAAT,IAAgBD,IAAI,CAACC,GAAL,CAASJ,IAAT,CAA9B,CAfuB,CAesB;;EAC7C,SAASM,MAAT,CAAiBC,MAAjB,EAAyB;IACvB,IAAIA,MAAM,YAAYd,UAAtB,EAAkC,CACjC,CADD,MACO,IAAIe,WAAW,CAACC,MAAZ,CAAmBF,MAAnB,CAAJ,EAAgC;MACrCA,MAAM,GAAG,IAAId,UAAJ,CAAec,MAAM,CAACG,MAAtB,EAA8BH,MAAM,CAACI,UAArC,EAAiDJ,MAAM,CAACK,UAAxD,CAAT;IACD,CAFM,MAEA,IAAIC,KAAK,CAACC,OAAN,CAAcP,MAAd,CAAJ,EAA2B;MAChCA,MAAM,GAAGd,UAAU,CAACsB,IAAX,CAAgBR,MAAhB,CAAT;IACD;;IACD,IAAI,EAAEA,MAAM,YAAYd,UAApB,CAAJ,EAAqC;MAAE,MAAM,IAAIF,SAAJ,CAAc,qBAAd,CAAN;IAA4C;;IACnF,IAAIgB,MAAM,CAACjB,MAAP,KAAkB,CAAtB,EAAyB;MAAE,OAAO,EAAP;IAAW,CARf,CASnB;;;IACJ,IAAI0B,MAAM,GAAG,CAAb;IACA,IAAI1B,MAAM,GAAG,CAAb;IACA,IAAI2B,MAAM,GAAG,CAAb;IACA,IAAIC,IAAI,GAAGX,MAAM,CAACjB,MAAlB;;IACA,OAAO2B,MAAM,KAAKC,IAAX,IAAmBX,MAAM,CAACU,MAAD,CAAN,KAAmB,CAA7C,EAAgD;MAC9CA,MAAM;MACND,MAAM;IACP,CAjBsB,CAkBnB;;;IACJ,IAAIG,IAAI,GAAI,CAACD,IAAI,GAAGD,MAAR,IAAkBZ,OAAlB,GAA4B,CAA7B,KAAoC,CAA/C;IACA,IAAIe,GAAG,GAAG,IAAI3B,UAAJ,CAAe0B,IAAf,CAAV,CApBuB,CAqBnB;;IACJ,OAAOF,MAAM,KAAKC,IAAlB,EAAwB;MACtB,IAAIG,KAAK,GAAGd,MAAM,CAACU,MAAD,CAAlB,CADsB,CAEhB;;MACN,IAAItB,CAAC,GAAG,CAAR;;MACA,KAAK,IAAI2B,GAAG,GAAGH,IAAI,GAAG,CAAtB,EAAyB,CAACE,KAAK,KAAK,CAAV,IAAe1B,CAAC,GAAGL,MAApB,KAAgCgC,GAAG,KAAK,CAAC,CAAlE,EAAsEA,GAAG,IAAI3B,CAAC,EAA9E,EAAkF;QAChF0B,KAAK,IAAK,MAAMD,GAAG,CAACE,GAAD,CAAV,KAAqB,CAA9B;QACAF,GAAG,CAACE,GAAD,CAAH,GAAYD,KAAK,GAAGrB,IAAT,KAAmB,CAA9B;QACAqB,KAAK,GAAIA,KAAK,GAAGrB,IAAT,KAAmB,CAA3B;MACD;;MACD,IAAIqB,KAAK,KAAK,CAAd,EAAiB;QAAE,MAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;MAAmC;;MACtDjC,MAAM,GAAGK,CAAT;MACAsB,MAAM;IACP,CAlCsB,CAmCnB;;;IACJ,IAAIO,GAAG,GAAGL,IAAI,GAAG7B,MAAjB;;IACA,OAAOkC,GAAG,KAAKL,IAAR,IAAgBC,GAAG,CAACI,GAAD,CAAH,KAAa,CAApC,EAAuC;MACrCA,GAAG;IACJ,CAvCsB,CAwCnB;;;IACJ,IAAIC,GAAG,GAAGxB,MAAM,CAACyB,MAAP,CAAcV,MAAd,CAAV;;IACA,OAAOQ,GAAG,GAAGL,IAAb,EAAmB,EAAEK,GAArB,EAA0B;MAAEC,GAAG,IAAIpC,QAAQ,CAACQ,MAAT,CAAgBuB,GAAG,CAACI,GAAD,CAAnB,CAAP;IAAkC;;IAC9D,OAAOC,GAAP;EACD;;EACD,SAASE,YAAT,CAAuBpB,MAAvB,EAA+B;IAC7B,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;MAAE,MAAM,IAAIhB,SAAJ,CAAc,iBAAd,CAAN;IAAwC;;IAC1E,IAAIgB,MAAM,CAACjB,MAAP,KAAkB,CAAtB,EAAyB;MAAE,OAAO,IAAIG,UAAJ,EAAP;IAAyB;;IACpD,IAAImC,GAAG,GAAG,CAAV,CAH6B,CAIzB;;IACJ,IAAIrB,MAAM,CAACqB,GAAD,CAAN,KAAgB,GAApB,EAAyB;MAAE;IAAQ,CALN,CAMzB;;;IACJ,IAAIZ,MAAM,GAAG,CAAb;IACA,IAAI1B,MAAM,GAAG,CAAb;;IACA,OAAOiB,MAAM,CAACqB,GAAD,CAAN,KAAgB3B,MAAvB,EAA+B;MAC7Be,MAAM;MACNY,GAAG;IACJ,CAZ4B,CAazB;;;IACJ,IAAIT,IAAI,GAAK,CAACZ,MAAM,CAACjB,MAAP,GAAgBsC,GAAjB,IAAwB1B,MAAzB,GAAmC,CAApC,KAA2C,CAAtD,CAd6B,CAc2B;;IACxD,IAAI2B,IAAI,GAAG,IAAIpC,UAAJ,CAAe0B,IAAf,CAAX,CAf6B,CAgBzB;;IACJ,OAAOZ,MAAM,CAACqB,GAAD,CAAb,EAAoB;MACZ;MACN,IAAIP,KAAK,GAAG7B,QAAQ,CAACe,MAAM,CAACR,UAAP,CAAkB6B,GAAlB,CAAD,CAApB,CAFkB,CAGZ;;MACN,IAAIP,KAAK,KAAK,GAAd,EAAmB;QAAE;MAAQ;;MAC7B,IAAI1B,CAAC,GAAG,CAAR;;MACA,KAAK,IAAImC,GAAG,GAAGX,IAAI,GAAG,CAAtB,EAAyB,CAACE,KAAK,KAAK,CAAV,IAAe1B,CAAC,GAAGL,MAApB,KAAgCwC,GAAG,KAAK,CAAC,CAAlE,EAAsEA,GAAG,IAAInC,CAAC,EAA9E,EAAkF;QAChF0B,KAAK,IAAKrB,IAAI,GAAG6B,IAAI,CAACC,GAAD,CAAZ,KAAuB,CAAhC;QACAD,IAAI,CAACC,GAAD,CAAJ,GAAaT,KAAK,GAAG,GAAT,KAAkB,CAA9B;QACAA,KAAK,GAAIA,KAAK,GAAG,GAAT,KAAkB,CAA1B;MACD;;MACD,IAAIA,KAAK,KAAK,CAAd,EAAiB;QAAE,MAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;MAAmC;;MACtDjC,MAAM,GAAGK,CAAT;MACAiC,GAAG;IACJ,CA/B4B,CAgCzB;;;IACJ,IAAIrB,MAAM,CAACqB,GAAD,CAAN,KAAgB,GAApB,EAAyB;MAAE;IAAQ,CAjCN,CAkCzB;;;IACJ,IAAIG,GAAG,GAAGZ,IAAI,GAAG7B,MAAjB;;IACA,OAAOyC,GAAG,KAAKZ,IAAR,IAAgBU,IAAI,CAACE,GAAD,CAAJ,KAAc,CAArC,EAAwC;MACtCA,GAAG;IACJ;;IACD,IAAIC,GAAG,GAAG,IAAIvC,UAAJ,CAAeuB,MAAM,IAAIG,IAAI,GAAGY,GAAX,CAArB,CAAV;IACA,IAAIrC,CAAC,GAAGsB,MAAR;;IACA,OAAOe,GAAG,KAAKZ,IAAf,EAAqB;MACnBa,GAAG,CAACtC,CAAC,EAAF,CAAH,GAAWmC,IAAI,CAACE,GAAG,EAAJ,CAAf;IACD;;IACD,OAAOC,GAAP;EACD;;EACD,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;IACvB,IAAIxB,MAAM,GAAGiB,YAAY,CAACO,MAAD,CAAzB;;IACA,IAAIxB,MAAJ,EAAY;MAAE,OAAOA,MAAP;IAAe;;IAC7B,MAAM,IAAIa,KAAJ,CAAU,aAAavB,IAAb,GAAoB,YAA9B,CAAN;EACD;;EACD,OAAO;IACLM,MAAM,EAAEA,MADH;IAELqB,YAAY,EAAEA,YAFT;IAGLM,MAAM,EAAEA;EAHH,CAAP;AAKD;;AACDE,MAAM,CAACC,OAAP,GAAiBhD,IAAjB"},"metadata":{},"sourceType":"script"}