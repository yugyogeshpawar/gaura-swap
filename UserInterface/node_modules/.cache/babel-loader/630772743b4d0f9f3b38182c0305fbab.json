{"ast":null,"code":"import _slicedToArray from\"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";function _regeneratorRuntime(){\"use strict\";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function _regeneratorRuntime(){return exports;};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,$Symbol=\"function\"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||\"@@iterator\",asyncIteratorSymbol=$Symbol.asyncIterator||\"@@asyncIterator\",toStringTagSymbol=$Symbol.toStringTag||\"@@toStringTag\";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key];}try{define({},\"\");}catch(err){define=function define(obj,key,value){return obj[key]=value;};}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return generator._invoke=function(innerFn,self,context){var state=\"suspendedStart\";return function(method,arg){if(\"executing\"===state)throw new Error(\"Generator is already running\");if(\"completed\"===state){if(\"throw\"===method)throw arg;return doneResult();}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if(\"next\"===context.method)context.sent=context._sent=context.arg;else if(\"throw\"===context.method){if(\"suspendedStart\"===state)throw state=\"completed\",context.arg;context.dispatchException(context.arg);}else\"return\"===context.method&&context.abrupt(\"return\",context.arg);state=\"executing\";var record=tryCatch(innerFn,self,context);if(\"normal\"===record.type){if(state=context.done?\"completed\":\"suspendedYield\",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done};}\"throw\"===record.type&&(state=\"completed\",context.method=\"throw\",context.arg=record.arg);}};}(innerFn,self,context),generator;}function tryCatch(fn,obj,arg){try{return{type:\"normal\",arg:fn.call(obj,arg)};}catch(err){return{type:\"throw\",arg:err};}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,function(){return this;});var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){[\"next\",\"throw\",\"return\"].forEach(function(method){define(prototype,method,function(arg){return this._invoke(method,arg);});});}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if(\"throw\"!==record.type){var result=record.arg,value=result.value;return value&&\"object\"==typeof value&&hasOwn.call(value,\"__await\")?PromiseImpl.resolve(value.__await).then(function(value){invoke(\"next\",value,resolve,reject);},function(err){invoke(\"throw\",err,resolve,reject);}):PromiseImpl.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result);},function(error){return invoke(\"throw\",error,resolve,reject);});}reject(record.arg);}var previousPromise;this._invoke=function(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();};}function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(undefined===method){if(context.delegate=null,\"throw\"===context.method){if(delegate.iterator.return&&(context.method=\"return\",context.arg=undefined,maybeInvokeDelegate(delegate,context),\"throw\"===context.method))return ContinueSentinel;context.method=\"throw\",context.arg=new TypeError(\"The iterator does not provide a 'throw' method\");}return ContinueSentinel;}var record=tryCatch(method,delegate.iterator,context.arg);if(\"throw\"===record.type)return context.method=\"throw\",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,\"return\"!==context.method&&(context.method=\"next\",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method=\"throw\",context.arg=new TypeError(\"iterator result is not an object\"),context.delegate=null,ContinueSentinel);}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type=\"normal\",delete record.arg,entry.completion=record;}function Context(tryLocsList){this.tryEntries=[{tryLoc:\"root\"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0);}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if(\"function\"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;){if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;}return next.value=undefined,next.done=!0,next;};return next.next=next;}}return{next:doneResult};}function doneResult(){return{value:undefined,done:!0};}return GeneratorFunction.prototype=GeneratorFunctionPrototype,define(Gp,\"constructor\",GeneratorFunctionPrototype),define(GeneratorFunctionPrototype,\"constructor\",GeneratorFunction),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,\"GeneratorFunction\"),exports.isGeneratorFunction=function(genFun){var ctor=\"function\"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||\"GeneratorFunction\"===(ctor.displayName||ctor.name));},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,\"GeneratorFunction\")),genFun.prototype=Object.create(Gp),genFun;},exports.awrap=function(arg){return{__await:arg};},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,function(){return this;}),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next();});},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,\"Generator\"),define(Gp,iteratorSymbol,function(){return this;}),define(Gp,\"toString\",function(){return\"[object Generator]\";}),exports.keys=function(object){var keys=[];for(var key in object){keys.push(key);}return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next;}return next.done=!0,next;};},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this){\"t\"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined);}},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if(\"throw\"===rootRecord.type)throw rootRecord.arg;return this.rval;},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type=\"throw\",record.arg=exception,context.next=loc,caught&&(context.method=\"next\",context.arg=undefined),!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if(\"root\"===entry.tryLoc)return handle(\"end\");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,\"catchLoc\"),hasFinally=hasOwn.call(entry,\"finallyLoc\");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else{if(!hasFinally)throw new Error(\"try statement without catch or finally\");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,\"finallyLoc\")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}finallyEntry&&(\"break\"===type||\"continue\"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method=\"next\",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record);},complete:function complete(record,afterLoc){if(\"throw\"===record.type)throw record.arg;return\"break\"===record.type||\"continue\"===record.type?this.next=record.arg:\"return\"===record.type?(this.rval=this.arg=record.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel;}},catch:function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if(\"throw\"===record.type){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}throw new Error(\"illegal catch attempt\");},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},\"next\"===this.method&&(this.arg=undefined),ContinueSentinel;}},exports;}import{useEffect,useMemo,useRef}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{useMulticallContract}from'../../hooks/useContract';import useDebounce from'../../hooks/useDebounce';import chunkArray from'../../utils/chunkArray';import{CancelledError,retry,RetryableError}from'../../utils/retry';import{useBlockNumber}from'../application/hooks';import{errorFetchingMulticallResults,fetchingMulticallResults,parseCallKey,updateMulticallResults}from'./actions';// chunk calls so we do not exceed the gas limit\nvar CALL_CHUNK_SIZE=500;/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */function fetchChunk(_x,_x2,_x3){return _fetchChunk.apply(this,arguments);}/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */function _fetchChunk(){_fetchChunk=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(multicallContract,chunk,minBlockNumber){var resultsBlockNumber,returnData,_yield$multicallContr,_yield$multicallContr2;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.debug('Fetching chunk',multicallContract,chunk,minBlockNumber);_context.prev=1;_context.next=4;return multicallContract.aggregate(chunk.map(function(obj){return[obj.address,obj.callData];}));case 4:_yield$multicallContr=_context.sent;_yield$multicallContr2=_slicedToArray(_yield$multicallContr,2);resultsBlockNumber=_yield$multicallContr2[0];returnData=_yield$multicallContr2[1];_context.next=14;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](1);console.debug('Failed to fetch chunk inside retry',_context.t0);throw _context.t0;case 14:if(!(resultsBlockNumber.toNumber()<minBlockNumber)){_context.next=17;break;}console.debug(\"Fetched results for old block number: \".concat(resultsBlockNumber.toString(),\" vs. \").concat(minBlockNumber));throw new RetryableError('Fetched for old block number');case 17:return _context.abrupt(\"return\",{results:returnData,blockNumber:resultsBlockNumber.toNumber()});case 18:case\"end\":return _context.stop();}}},_callee,null,[[1,10]]);}));return _fetchChunk.apply(this,arguments);}export function activeListeningKeys(allListeners,chainId){if(!allListeners||!chainId)return{};var listeners=allListeners[chainId];if(!listeners)return{};return Object.keys(listeners).reduce(function(memo,callKey){var keyListeners=listeners[callKey];memo[callKey]=Object.keys(keyListeners).filter(function(key){var blocksPerFetch=parseInt(key);if(blocksPerFetch<=0)return false;return keyListeners[blocksPerFetch]>0;}).reduce(function(previousMin,current){return Math.min(previousMin,parseInt(current));},Infinity);return memo;},{});}/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */export function outdatedListeningKeys(callResults,listeningKeys,chainId,latestBlockNumber){if(!chainId||!latestBlockNumber)return[];var results=callResults[chainId];// no results at all, load everything\nif(!results)return Object.keys(listeningKeys);return Object.keys(listeningKeys).filter(function(callKey){var blocksPerFetch=listeningKeys[callKey];var data=callResults[chainId][callKey];// no data, must fetch\nif(!data)return true;var minDataBlockNumber=latestBlockNumber-(blocksPerFetch-1);// already fetching it for a recent enough block, don't refetch it\nif(data.fetchingBlockNumber&&data.fetchingBlockNumber>=minDataBlockNumber)return false;// if data is older than minDataBlockNumber, fetch it\nreturn!data.blockNumber||data.blockNumber<minDataBlockNumber;});}export default function Updater(){var dispatch=useDispatch();var state=useSelector(function(state){return state.multicall;});// wait for listeners to settle before triggering updates\nvar debouncedListeners=useDebounce(state.callListeners,100);var latestBlockNumber=useBlockNumber();var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var multicallContract=useMulticallContract();var cancellations=useRef();var listeningKeys=useMemo(function(){return activeListeningKeys(debouncedListeners,chainId);},[debouncedListeners,chainId]);var unserializedOutdatedCallKeys=useMemo(function(){return outdatedListeningKeys(state.callResults,listeningKeys,chainId,latestBlockNumber);},[chainId,state.callResults,listeningKeys,latestBlockNumber]);var serializedOutdatedCallKeys=useMemo(function(){return JSON.stringify(unserializedOutdatedCallKeys.sort());},[unserializedOutdatedCallKeys]);useEffect(function(){var _cancellations$curren;if(!latestBlockNumber||!chainId||!multicallContract)return;var outdatedCallKeys=JSON.parse(serializedOutdatedCallKeys);if(outdatedCallKeys.length===0)return;var calls=outdatedCallKeys.map(function(key){return parseCallKey(key);});var chunkedCalls=chunkArray(calls,CALL_CHUNK_SIZE);if(((_cancellations$curren=cancellations.current)===null||_cancellations$curren===void 0?void 0:_cancellations$curren.blockNumber)!==latestBlockNumber){var _cancellations$curren2,_cancellations$curren3;(_cancellations$curren2=cancellations.current)===null||_cancellations$curren2===void 0?void 0:(_cancellations$curren3=_cancellations$curren2.cancellations)===null||_cancellations$curren3===void 0?void 0:_cancellations$curren3.forEach(function(c){return c();});}dispatch(fetchingMulticallResults({calls:calls,chainId:chainId,fetchingBlockNumber:latestBlockNumber}));cancellations.current={blockNumber:latestBlockNumber,cancellations:chunkedCalls.map(function(chunk,index){var _retry=retry(function(){return fetchChunk(multicallContract,chunk,latestBlockNumber);},{n:Infinity,minWait:2500,maxWait:3500}),cancel=_retry.cancel,promise=_retry.promise;promise.then(function(_ref){var returnData=_ref.results,fetchBlockNumber=_ref.blockNumber;cancellations.current={cancellations:[],blockNumber:latestBlockNumber};// accumulates the length of all previous indices\nvar firstCallKeyIndex=chunkedCalls.slice(0,index).reduce(function(memo,curr){return memo+curr.length;},0);var lastCallKeyIndex=firstCallKeyIndex+returnData.length;dispatch(updateMulticallResults({chainId:chainId,results:outdatedCallKeys.slice(firstCallKeyIndex,lastCallKeyIndex).reduce(function(memo,callKey,i){var _returnData$i;memo[callKey]=(_returnData$i=returnData[i])!==null&&_returnData$i!==void 0?_returnData$i:null;return memo;},{}),blockNumber:fetchBlockNumber}));}).catch(function(error){if(error instanceof CancelledError){console.debug('Cancelled fetch for blockNumber',latestBlockNumber);return;}console.error('Failed to fetch multicall chunk',chunk,chainId,error);dispatch(errorFetchingMulticallResults({calls:chunk,chainId:chainId,fetchingBlockNumber:latestBlockNumber}));});return cancel;})};},[chainId,multicallContract,dispatch,serializedOutdatedCallKeys,latestBlockNumber]);return null;}","map":{"version":3,"names":["useEffect","useMemo","useRef","useDispatch","useSelector","useActiveWeb3React","useMulticallContract","useDebounce","chunkArray","CancelledError","retry","RetryableError","useBlockNumber","errorFetchingMulticallResults","fetchingMulticallResults","parseCallKey","updateMulticallResults","CALL_CHUNK_SIZE","fetchChunk","multicallContract","chunk","minBlockNumber","console","debug","aggregate","map","obj","address","callData","resultsBlockNumber","returnData","toNumber","toString","results","blockNumber","activeListeningKeys","allListeners","chainId","listeners","Object","keys","reduce","memo","callKey","keyListeners","filter","key","blocksPerFetch","parseInt","previousMin","current","Math","min","Infinity","outdatedListeningKeys","callResults","listeningKeys","latestBlockNumber","data","minDataBlockNumber","fetchingBlockNumber","Updater","dispatch","state","multicall","debouncedListeners","callListeners","cancellations","unserializedOutdatedCallKeys","serializedOutdatedCallKeys","JSON","stringify","sort","outdatedCallKeys","parse","length","calls","chunkedCalls","forEach","c","index","n","minWait","maxWait","cancel","promise","then","fetchBlockNumber","firstCallKeyIndex","slice","curr","lastCallKeyIndex","i","catch","error"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/state/multicall/updater.tsx"],"sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useMulticallContract } from '../../hooks/useContract';\nimport useDebounce from '../../hooks/useDebounce';\nimport chunkArray from '../../utils/chunkArray';\nimport { CancelledError, retry, RetryableError } from '../../utils/retry';\nimport { useBlockNumber } from '../application/hooks';\nimport { AppDispatch, AppState } from '../index';\nimport {\n  Call,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  parseCallKey,\n  updateMulticallResults,\n} from './actions';\n\n// chunk calls so we do not exceed the gas limit\nconst CALL_CHUNK_SIZE = 500;\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */\nasync function fetchChunk(\n  multicallContract: Contract,\n  chunk: Call[],\n  minBlockNumber: number\n): Promise<{ results: string[]; blockNumber: number }> {\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber);\n  let resultsBlockNumber, returnData;\n  try {\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(\n      chunk.map((obj) => [obj.address, obj.callData])\n    );\n  } catch (error) {\n    console.debug('Failed to fetch chunk inside retry', error);\n    throw error;\n  }\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`);\n    throw new RetryableError('Fetched for old block number');\n  }\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() };\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: AppState['multicall']['callListeners'],\n  chainId?: number\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {};\n  const listeners = allListeners[chainId];\n  if (!listeners) return {};\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey];\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter((key) => {\n        const blocksPerFetch = parseInt(key);\n        if (blocksPerFetch <= 0) return false;\n        return keyListeners[blocksPerFetch] > 0;\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current));\n      }, Infinity);\n    return memo;\n  }, {});\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: AppState['multicall']['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined\n): string[] {\n  if (!chainId || !latestBlockNumber) return [];\n  const results = callResults[chainId];\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys);\n\n  return Object.keys(listeningKeys).filter((callKey) => {\n    const blocksPerFetch = listeningKeys[callKey];\n\n    const data = callResults[chainId][callKey];\n    // no data, must fetch\n    if (!data) return true;\n\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1);\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false;\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber;\n  });\n}\n\nexport default function Updater(): null {\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['multicall']>((state) => state.multicall);\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100);\n  const latestBlockNumber = useBlockNumber();\n  const { chainId } = useActiveWeb3React();\n  const multicallContract = useMulticallContract();\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>();\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId);\n  }, [debouncedListeners, chainId]);\n\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber);\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber]);\n\n  const serializedOutdatedCallKeys = useMemo(\n    () => JSON.stringify(unserializedOutdatedCallKeys.sort()),\n    [unserializedOutdatedCallKeys]\n  );\n\n  useEffect(() => {\n    if (!latestBlockNumber || !chainId || !multicallContract) return;\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys);\n    if (outdatedCallKeys.length === 0) return;\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key));\n\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE);\n\n    if (cancellations.current?.blockNumber !== latestBlockNumber) {\n      cancellations.current?.cancellations?.forEach((c) => c());\n    }\n\n    dispatch(\n      fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber,\n      })\n    );\n\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: chunkedCalls.map((chunk, index) => {\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, latestBlockNumber), {\n          n: Infinity,\n          minWait: 2500,\n          maxWait: 3500,\n        });\n        promise\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\n            cancellations.current = { cancellations: [], blockNumber: latestBlockNumber };\n\n            // accumulates the length of all previous indices\n            const firstCallKeyIndex = chunkedCalls\n              .slice(0, index)\n              .reduce<number>((memo, curr) => memo + curr.length, 0);\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length;\n\n            dispatch(\n              updateMulticallResults({\n                chainId,\n                results: outdatedCallKeys\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\n                    memo[callKey] = returnData[i] ?? null;\n                    return memo;\n                  }, {}),\n                blockNumber: fetchBlockNumber,\n              })\n            );\n          })\n          .catch((error: any) => {\n            if (error instanceof CancelledError) {\n              console.debug('Cancelled fetch for blockNumber', latestBlockNumber);\n              return;\n            }\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error);\n            dispatch(\n              errorFetchingMulticallResults({\n                calls: chunk,\n                chainId,\n                fetchingBlockNumber: latestBlockNumber,\n              })\n            );\n          });\n        return cancel;\n      }),\n    };\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber]);\n\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}