{"ast":null,"code":"var _jsxFileName = \"/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/components/Web3ReactManager/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { network } from '../../connectors';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport { NetworkContextName } from '../../constants';\nimport Loader from '../Loader';\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`;\nconst Message = styled.h2`\n  color: ${_ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.secondary1;\n}};\n`;\nexport default function Web3ReactManager(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const {\n    t\n  } = useTranslation();\n  const {\n    active\n  } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React(NetworkContextName); // try to eagerly connect to an injected provider, if it exists and has granted access already\n\n  const triedEager = useEagerConnect(); // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]); // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n\n  useInactiveListener(!triedEager); // handle delayed loader state\n\n  const [showLoader, setShowLoader] = useState(false);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true);\n    }, 600);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []); // on page load, do nothing until we've tried to connect to the injected connector\n\n  if (!triedEager) {\n    return null;\n  } // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n\n\n  if (!active && networkError) {\n    return /*#__PURE__*/React.createElement(MessageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, t('unknownError')));\n  } // if neither context is active, spin\n\n\n  if (!active && !networkActive) {\n    return showLoader ? /*#__PURE__*/React.createElement(MessageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    })) : null;\n  }\n\n  return children;\n}","map":{"version":3,"names":["React","useState","useEffect","useWeb3React","styled","useTranslation","network","useEagerConnect","useInactiveListener","NetworkContextName","Loader","MessageWrapper","div","Message","h2","theme","secondary1","Web3ReactManager","children","t","active","networkActive","error","networkError","activate","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/components/Web3ReactManager/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\n\nimport { network } from '../../connectors';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport { NetworkContextName } from '../../constants';\nimport Loader from '../Loader';\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`;\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.secondary1};\n`;\n\nexport default function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation();\n  const { active } = useWeb3React();\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName);\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]);\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager);\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true);\n    }, 600);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null;\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    );\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        <Loader />\n      </MessageWrapper>\n    ) : null;\n  }\n\n  return children;\n}\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,aAArD;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,cAAc,GAAGP,MAAM,CAACQ,GAAI;AAClC;AACA;AACA;AACA;AACA,CALA;AAOA,MAAMC,OAAO,GAAGT,MAAM,CAACU,EAAG;AAC1B,WAAW;EAAA,IAAC;IAAEC;EAAF,CAAD;EAAA,OAAeA,KAAK,CAACC,UAArB;AAAA,CAAgC;AAC3C,CAFA;AAIA,eAAe,SAASC,gBAAT,QAAmE;EAAA,IAAzC;IAAEC;EAAF,CAAyC;EAChF,MAAM;IAAEC;EAAF,IAAQd,cAAc,EAA5B;EACA,MAAM;IAAEe;EAAF,IAAajB,YAAY,EAA/B;EACA,MAAM;IAAEiB,MAAM,EAAEC,aAAV;IAAyBC,KAAK,EAAEC,YAAhC;IAA8CC,QAAQ,EAAEC;EAAxD,IAA4EtB,YAAY,CAACM,kBAAD,CAA9F,CAHgF,CAKhF;;EACA,MAAMiB,UAAU,GAAGnB,eAAe,EAAlC,CANgF,CAQhF;;EACAL,SAAS,CAAC,MAAM;IACd,IAAIwB,UAAU,IAAI,CAACL,aAAf,IAAgC,CAACE,YAAjC,IAAiD,CAACH,MAAtD,EAA8D;MAC5DK,eAAe,CAACnB,OAAD,CAAf;IACD;EACF,CAJQ,EAIN,CAACoB,UAAD,EAAaL,aAAb,EAA4BE,YAA5B,EAA0CE,eAA1C,EAA2DL,MAA3D,CAJM,CAAT,CATgF,CAehF;;EACAZ,mBAAmB,CAAC,CAACkB,UAAF,CAAnB,CAhBgF,CAkBhF;;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,KAAD,CAA5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAM2B,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC/BF,aAAa,CAAC,IAAD,CAAb;IACD,CAFyB,EAEvB,GAFuB,CAA1B;IAIA,OAAO,MAAM;MACXG,YAAY,CAACF,OAAD,CAAZ;IACD,CAFD;EAGD,CARQ,EAQN,EARM,CAAT,CApBgF,CA8BhF;;EACA,IAAI,CAACH,UAAL,EAAiB;IACf,OAAO,IAAP;EACD,CAjC+E,CAmChF;;;EACA,IAAI,CAACN,MAAD,IAAWG,YAAf,EAA6B;IAC3B,oBACE,oBAAC,cAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE,oBAAC,OAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAUJ,CAAC,CAAC,cAAD,CAAX,CADF,CADF;EAKD,CA1C+E,CA4ChF;;;EACA,IAAI,CAACC,MAAD,IAAW,CAACC,aAAhB,EAA+B;IAC7B,OAAOM,UAAU,gBACf,oBAAC,cAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE,oBAAC,MAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADe,GAIb,IAJJ;EAKD;;EAED,OAAOT,QAAP;AACD"},"metadata":{},"sourceType":"module"}