{"ast":null,"code":"/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n;\n\n(function (GLOBAL) {\n  'use strict';\n\n  var Big,\n\n  /************************************** EDITABLE DEFAULTS *****************************************/\n  // The default values below must be integers within the stated ranges.\n\n  /*\n   * The maximum number of decimal places (DP) of the results of operations involving division:\n   * div and sqrt, and pow with negative exponents.\n   */\n  DP = 20,\n      // 0 to MAX_DP\n\n  /*\n   * The rounding mode (RM) used when rounding to the above decimal places.\n   *\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n   *  3  Away from zero.                                  (ROUND_UP)\n   */\n  RM = 1,\n      // 0, 1, 2 or 3\n  // The maximum value of DP and Big.DP.\n  MAX_DP = 1E6,\n      // 0 to 1000000\n  // The maximum magnitude of the exponent argument to the pow method.\n  MAX_POWER = 1E6,\n      // 1 to 1000000\n\n  /*\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\n   * (JavaScript numbers: -7)\n   * -1000000 is the minimum recommended exponent value of a Big.\n   */\n  NE = -7,\n      // 0 to -1000000\n\n  /*\n   * The positive exponent (PE) at and above which toString returns exponential notation.\n   * (JavaScript numbers: 21)\n   * 1000000 is the maximum recommended exponent value of a Big.\n   * (This limit is not enforced or checked.)\n   */\n  PE = 21,\n      // 0 to 1000000\n\n  /**************************************************************************************************/\n  // Error messages.\n  NAME = '[big.js] ',\n      INVALID = NAME + 'Invalid ',\n      INVALID_DP = INVALID + 'decimal places',\n      INVALID_RM = INVALID + 'rounding mode',\n      DIV_BY_ZERO = NAME + 'Division by zero',\n      // The shared prototype object.\n  P = {},\n      UNDEFINED = void 0,\n      NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n  /*\n   * Create and return a Big constructor.\n   *\n   */\n\n  function _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n      var x = this; // Enable constructor usage without new.\n\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n); // Duplicate.\n\n      if (n instanceof Big) {\n        x.s = n.s;\n        x.e = n.e;\n        x.c = n.c.slice();\n      } else {\n        parse(x, n);\n      }\n      /*\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n       * points to Object.\n       */\n\n\n      x.constructor = Big;\n    }\n\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n  }\n  /*\n   * Parse the number or string value passed to a Big constructor.\n   *\n   * x {Big} A Big number instance.\n   * n {number|string} A numeric value.\n   */\n\n\n  function parse(x, n) {\n    var e, i, nl; // Minus zero?\n\n    if (n === 0 && 1 / n < 0) n = '-0';else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number'); // Determine sign.\n\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1; // Decimal point?\n\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', ''); // Exponential form?\n\n    if ((i = n.search(/e/i)) > 0) {\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +n.slice(i + 1);\n      n = n.substring(0, i);\n    } else if (e < 0) {\n      // Integer.\n      e = n.length;\n    }\n\n    nl = n.length; // Determine leading zeros.\n\n    for (i = 0; i < nl && n.charAt(i) == '0';) {\n      ++i;\n    }\n\n    if (i == nl) {\n      // Zero.\n      x.c = [x.e = 0];\n    } else {\n      // Determine trailing zeros.\n      for (; nl > 0 && n.charAt(--nl) == '0';) {\n        ;\n      }\n\n      x.e = e - i - 1;\n      x.c = []; // Convert string to array of digits without leading/trailing zeros.\n\n      for (e = 0; i <= nl;) {\n        x.c[e++] = +n.charAt(i++);\n      }\n    }\n\n    return x;\n  }\n  /*\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\n   * Called by stringify, P.div, P.round and P.sqrt.\n   *\n   * x {Big} The Big to round.\n   * dp {number} Integer, 0 to MAX_DP inclusive.\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n   * [more] {boolean} Whether the result of division was truncated.\n   */\n\n\n  function round(x, dp, rm, more) {\n    var xc = x.c,\n        i = x.e + dp + 1;\n\n    if (i < xc.length) {\n      if (rm === 1) {\n        // xc[i] is the digit after the digit that may be rounded up.\n        more = xc[i] >= 5;\n      } else if (rm === 2) {\n        more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n      } else if (rm === 3) {\n        more = more || !!xc[0];\n      } else {\n        more = false;\n        if (rm !== 0) throw Error(INVALID_RM);\n      }\n\n      if (i < 1) {\n        xc.length = 1;\n\n        if (more) {\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n          x.e = -dp;\n          xc[0] = 1;\n        } else {\n          // Zero.\n          xc[0] = x.e = 0;\n        }\n      } else {\n        // Remove any digits after the required decimal places.\n        xc.length = i--; // Round up?\n\n        if (more) {\n          // Rounding up may mean the previous digit has to be rounded up.\n          for (; ++xc[i] > 9;) {\n            xc[i] = 0;\n\n            if (!i--) {\n              ++x.e;\n              xc.unshift(1);\n            }\n          }\n        } // Remove trailing zeros.\n\n\n        for (i = xc.length; !xc[--i];) {\n          xc.pop();\n        }\n      }\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n      throw Error(INVALID_RM);\n    }\n\n    return x;\n  }\n  /*\n   * Return a string representing the value of Big x in normal or exponential notation.\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n   *\n   * x {Big}\n   * id? {number} Caller id.\n   *         1 toExponential\n   *         2 toFixed\n   *         3 toPrecision\n   *         4 valueOf\n   * n? {number|undefined} Caller's argument.\n   * k? {number|undefined}\n   */\n\n\n  function stringify(x, id, n, k) {\n    var e,\n        s,\n        Big = x.constructor,\n        z = !x.c[0];\n\n    if (n !== UNDEFINED) {\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n      }\n\n      x = new Big(x); // The index of the digit that may be rounded up.\n\n      n = k - x.e; // Round?\n\n      if (x.c.length > ++k) round(x, n, Big.RM); // toFixed: recalculate k as x.e may have changed if value rounded up.\n\n      if (id == 2) k = x.e + n + 1; // Append zeros?\n\n      for (; x.c.length < k;) {\n        x.c.push(0);\n      }\n    }\n\n    e = x.e;\n    s = x.c.join('');\n    n = s.length; // Exponential notation?\n\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e; // Normal notation.\n    } else if (e < 0) {\n      for (; ++e;) {\n        s = '0' + s;\n      }\n\n      s = '0.' + s;\n    } else if (e > 0) {\n      if (++e > n) for (e -= n; e--;) {\n        s += '0';\n      } else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\n    } else if (n > 1) {\n      s = s.charAt(0) + '.' + s.slice(1);\n    }\n\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n  } // Prototype/instance methods\n\n  /*\n   * Return a new Big whose value is the absolute value of this Big.\n   */\n\n\n  P.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n  };\n  /*\n   * Return 1 if the value of this Big is greater than the value of Big y,\n   *       -1 if the value of this Big is less than the value of Big y, or\n   *        0 if they have the same value.\n  */\n\n\n  P.cmp = function (y) {\n    var isneg,\n        x = this,\n        xc = x.c,\n        yc = (y = new x.constructor(y)).c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e; // Either zero?\n\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i; // Signs differ?\n\n    if (i != j) return i;\n    isneg = i < 0; // Compare exponents.\n\n    if (k != l) return k > l ^ isneg ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n    for (i = -1; ++i < j;) {\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    } // Compare lengths.\n\n\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n  };\n  /*\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n   */\n\n\n  P.div = function (y) {\n    var x = this,\n        Big = x.constructor,\n        a = x.c,\n        // dividend\n    b = (y = new Big(y)).c,\n        // divisor\n    k = x.s == y.s ? 1 : -1,\n        dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP); // Divisor is zero?\n\n    if (!b[0]) throw Error(DIV_BY_ZERO); // Dividend is 0? Return +-0.\n\n    if (!a[0]) return new Big(k * 0);\n    var bl,\n        bt,\n        n,\n        cmp,\n        ri,\n        bz = b.slice(),\n        ai = bl = b.length,\n        al = a.length,\n        r = a.slice(0, bl),\n        // remainder\n    rl = r.length,\n        q = y,\n        // quotient\n    qc = q.c = [],\n        qi = 0,\n        d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n\n    q.s = k;\n    k = d < 0 ? 0 : d; // Create version of divisor with leading zero.\n\n    bz.unshift(0); // Add zeros to make remainder as long as divisor.\n\n    for (; rl++ < bl;) {\n      r.push(0);\n    }\n\n    do {\n      // n is how many times the divisor goes into current remainder.\n      for (n = 0; n < 10; n++) {\n        // Compare divisor and remainder.\n        if (bl != (rl = r.length)) {\n          cmp = bl > rl ? 1 : -1;\n        } else {\n          for (ri = -1, cmp = 0; ++ri < bl;) {\n            if (b[ri] != r[ri]) {\n              cmp = b[ri] > r[ri] ? 1 : -1;\n              break;\n            }\n          }\n        } // If divisor < remainder, subtract divisor from remainder.\n\n\n        if (cmp < 0) {\n          // Remainder can't be more than 1 digit longer than divisor.\n          // Equalise lengths using divisor with extra leading zero?\n          for (bt = rl == bl ? b : bz; rl;) {\n            if (r[--rl] < bt[rl]) {\n              ri = rl;\n\n              for (; ri && !r[--ri];) {\n                r[ri] = 9;\n              }\n\n              --r[ri];\n              r[rl] += 10;\n            }\n\n            r[rl] -= bt[rl];\n          }\n\n          for (; !r[0];) {\n            r.shift();\n          }\n        } else {\n          break;\n        }\n      } // Add the digit n to the result array.\n\n\n      qc[qi++] = cmp ? n : ++n; // Update the remainder.\n\n      if (r[0] && cmp) r[rl] = a[ai] || 0;else r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--); // Leading zero? Do not remove if result is simply zero (qi == 1).\n\n\n    if (!qc[0] && qi != 1) {\n      // There can't be more than one zero.\n      qc.shift();\n      q.e--;\n    } // Round?\n\n\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n  };\n  /*\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n   */\n\n\n  P.eq = function (y) {\n    return !this.cmp(y);\n  };\n  /*\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\n   * false.\n   */\n\n\n  P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n  /*\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n   * return false.\n   */\n\n\n  P.gte = function (y) {\n    return this.cmp(y) > -1;\n  };\n  /*\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n   */\n\n\n  P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n  /*\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n   * return false.\n   */\n\n\n  P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n  /*\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\n   */\n\n\n  P.minus = P.sub = function (y) {\n    var i,\n        j,\n        t,\n        xlty,\n        x = this,\n        Big = x.constructor,\n        a = x.s,\n        b = (y = new Big(y)).s; // Signs differ?\n\n    if (a != b) {\n      y.s = -b;\n      return x.plus(y);\n    }\n\n    var xc = x.c.slice(),\n        xe = x.e,\n        yc = y.c,\n        ye = y.e; // Either zero?\n\n    if (!xc[0] || !yc[0]) {\n      // y is non-zero? x is non-zero? Or both are zero.\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    } // Determine which is the bigger number. Prepend zeros to equalise exponents.\n\n\n    if (a = xe - ye) {\n      if (xlty = a < 0) {\n        a = -a;\n        t = xc;\n      } else {\n        ye = xe;\n        t = yc;\n      }\n\n      t.reverse();\n\n      for (b = a; b--;) {\n        t.push(0);\n      }\n\n      t.reverse();\n    } else {\n      // Exponents equal. Check digit by digit.\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n\n      for (a = b = 0; b < j; b++) {\n        if (xc[b] != yc[b]) {\n          xlty = xc[b] < yc[b];\n          break;\n        }\n      }\n    } // x < y? Point xc to the array of the bigger number.\n\n\n    if (xlty) {\n      t = xc;\n      xc = yc;\n      yc = t;\n      y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n\n\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) {\n      xc[i++] = 0;\n    } // Subtract yc from xc.\n\n    for (b = i; j > a;) {\n      if (xc[--j] < yc[j]) {\n        for (i = j; i && !xc[--i];) {\n          xc[i] = 9;\n        }\n\n        --xc[i];\n        xc[j] += 10;\n      }\n\n      xc[j] -= yc[j];\n    } // Remove trailing zeros.\n\n\n    for (; xc[--b] === 0;) {\n      xc.pop();\n    } // Remove leading zeros and adjust exponent accordingly.\n\n\n    for (; xc[0] === 0;) {\n      xc.shift();\n      --ye;\n    }\n\n    if (!xc[0]) {\n      // n - n = +0\n      y.s = 1; // Result must be zero.\n\n      xc = [ye = 0];\n    }\n\n    y.c = xc;\n    y.e = ye;\n    return y;\n  };\n  /*\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\n   */\n\n\n  P.mod = function (y) {\n    var ygtx,\n        x = this,\n        Big = x.constructor,\n        a = x.s,\n        b = (y = new Big(y)).s;\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx) return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n  };\n  /*\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\n   */\n\n\n  P.plus = P.add = function (y) {\n    var t,\n        x = this,\n        Big = x.constructor,\n        a = x.s,\n        b = (y = new Big(y)).s; // Signs differ?\n\n    if (a != b) {\n      y.s = -b;\n      return x.minus(y);\n    }\n\n    var xe = x.e,\n        xc = x.c,\n        ye = y.e,\n        yc = y.c; // Either zero? y is non-zero? x is non-zero? Or both are zero.\n\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice(); // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n\n    if (a = xe - ye) {\n      if (a > 0) {\n        ye = xe;\n        t = yc;\n      } else {\n        a = -a;\n        t = xc;\n      }\n\n      t.reverse();\n\n      for (; a--;) {\n        t.push(0);\n      }\n\n      t.reverse();\n    } // Point xc to the longer array.\n\n\n    if (xc.length - yc.length < 0) {\n      t = yc;\n      yc = xc;\n      xc = t;\n    }\n\n    a = yc.length; // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n\n    for (b = 0; a; xc[a] %= 10) {\n      b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n\n    if (b) {\n      xc.unshift(b);\n      ++ye;\n    } // Remove trailing zeros.\n\n\n    for (a = xc.length; xc[--a] === 0;) {\n      xc.pop();\n    }\n\n    y.c = xc;\n    y.e = ye;\n    return y;\n  };\n  /*\n   * Return a Big whose value is the value of this Big raised to the power n.\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\n   * mode Big.RM.\n   *\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n   */\n\n\n  P.pow = function (n) {\n    var x = this,\n        one = new x.constructor(1),\n        y = one,\n        isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\n    if (isneg) n = -n;\n\n    for (;;) {\n      if (n & 1) y = y.times(x);\n      n >>= 1;\n      if (!n) break;\n      x = x.times(x);\n    }\n\n    return isneg ? one.div(y) : y;\n  };\n  /*\n   * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n   * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n   * multiple of 10**-dp.\n   * If dp is not specified, round to 0 decimal places.\n   * If rm is not specified, use Big.RM.\n   *\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n   */\n\n\n  P.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED) dp = 0;else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n  };\n  /*\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n   */\n\n\n  P.sqrt = function () {\n    var r,\n        c,\n        t,\n        x = this,\n        Big = x.constructor,\n        s = x.s,\n        e = x.e,\n        half = new Big(0.5); // Zero?\n\n    if (!x.c[0]) return new Big(x); // Negative?\n\n    if (s < 0) throw Error(NAME + 'No square root'); // Estimate.\n\n    s = Math.sqrt(x + ''); // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n\n    if (s === 0 || s === 1 / 0) {\n      c = x.c.join('');\n      if (!(c.length + e & 1)) c += '0';\n      s = Math.sqrt(c);\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n      r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    } else {\n      r = new Big(s);\n    }\n\n    e = r.e + (Big.DP += 4); // Newton-Raphson iteration.\n\n    do {\n      t = r;\n      r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n\n    return round(r, Big.DP -= 4, Big.RM);\n  };\n  /*\n   * Return a new Big whose value is the value of this Big times the value of Big y.\n   */\n\n\n  P.times = P.mul = function (y) {\n    var c,\n        x = this,\n        Big = x.constructor,\n        xc = x.c,\n        yc = (y = new Big(y)).c,\n        a = xc.length,\n        b = yc.length,\n        i = x.e,\n        j = y.e; // Determine sign of result.\n\n    y.s = x.s == y.s ? 1 : -1; // Return signed 0 if either 0.\n\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0); // Initialise exponent of result as x.e + y.e.\n\n    y.e = i + j; // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n\n    if (a < b) {\n      c = xc;\n      xc = yc;\n      yc = c;\n      j = a;\n      a = b;\n      b = j;\n    } // Initialise coefficient array of result with zeros.\n\n\n    for (c = new Array(j = a + b); j--;) {\n      c[j] = 0;\n    } // Multiply.\n    // i is initially xc.length.\n\n\n    for (i = b; i--;) {\n      b = 0; // a is yc.length.\n\n      for (j = a + i; j > i;) {\n        // Current sum of products at this digit position, plus carry.\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\n        c[j--] = b % 10; // carry\n\n        b = b / 10 | 0;\n      }\n\n      c[j] = (c[j] + b) % 10;\n    } // Increment result exponent if there is a final carry, otherwise remove leading zero.\n\n\n    if (b) ++y.e;else c.shift(); // Remove trailing zeros.\n\n    for (i = c.length; !c[--i];) {\n      c.pop();\n    }\n\n    y.c = c;\n    return y;\n  };\n  /*\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n   * places and rounded using Big.RM.\n   *\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\n   */\n\n\n  P.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n  };\n  /*\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\n   * places and rounded using Big.RM.\n   *\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\n   *\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n   */\n\n\n  P.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n  };\n  /*\n   * Return a string representing the value of this Big rounded to sd significant digits using\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n   * the integer part of the value in normal notation.\n   *\n   * sd {number} Integer, 1 to MAX_DP inclusive.\n   */\n\n\n  P.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n  };\n  /*\n   * Return a string representing the value of this Big.\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\n   * Omit the sign for negative zero.\n   */\n\n\n  P.toString = function () {\n    return stringify(this);\n  };\n  /*\n   * Return a string representing the value of this Big.\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\n   * Include the sign for negative zero.\n   */\n\n\n  P.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n  }; // Export\n\n\n  Big = _Big_();\n  Big['default'] = Big.Big = Big; //AMD.\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return Big;\n    }); // Node and other CommonJS-like environments that support module.exports.\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Big; //Browser.\n  } else {\n    GLOBAL.Big = Big;\n  }\n})(this);","map":{"version":3,"names":["GLOBAL","Big","DP","RM","MAX_DP","MAX_POWER","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","NUMERIC","_Big_","n","x","s","e","c","slice","parse","constructor","prototype","version","i","nl","test","Error","charAt","indexOf","replace","search","substring","length","round","dp","rm","more","xc","unshift","pop","stringify","id","k","z","push","join","abs","cmp","y","isneg","yc","j","l","div","a","b","bl","bt","ri","bz","ai","al","r","rl","q","qc","qi","d","shift","eq","gt","gte","lt","lte","minus","sub","t","xlty","plus","xe","ye","reverse","mod","ygtx","times","add","pow","one","sqrt","half","Math","toExponential","mul","Array","toFixed","toPrecision","sd","toString","valueOf","toJSON","define","amd","module","exports"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/node_modules/@uniswap/sdk/node_modules/big.js/big.js"],"sourcesContent":["/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n;(function (GLOBAL) {\n  'use strict';\n  var Big,\n\n\n/************************************** EDITABLE DEFAULTS *****************************************/\n\n\n    // The default values below must be integers within the stated ranges.\n\n    /*\n     * The maximum number of decimal places (DP) of the results of operations involving division:\n     * div and sqrt, and pow with negative exponents.\n     */\n    DP = 20,          // 0 to MAX_DP\n\n    /*\n     * The rounding mode (RM) used when rounding to the above decimal places.\n     *\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n     *  3  Away from zero.                                  (ROUND_UP)\n     */\n    RM = 1,             // 0, 1, 2 or 3\n\n    // The maximum value of DP and Big.DP.\n    MAX_DP = 1E6,       // 0 to 1000000\n\n    // The maximum magnitude of the exponent argument to the pow method.\n    MAX_POWER = 1E6,    // 1 to 1000000\n\n    /*\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\n     * (JavaScript numbers: -7)\n     * -1000000 is the minimum recommended exponent value of a Big.\n     */\n    NE = -7,            // 0 to -1000000\n\n    /*\n     * The positive exponent (PE) at and above which toString returns exponential notation.\n     * (JavaScript numbers: 21)\n     * 1000000 is the maximum recommended exponent value of a Big.\n     * (This limit is not enforced or checked.)\n     */\n    PE = 21,            // 0 to 1000000\n\n\n/**************************************************************************************************/\n\n\n    // Error messages.\n    NAME = '[big.js] ',\n    INVALID = NAME + 'Invalid ',\n    INVALID_DP = INVALID + 'decimal places',\n    INVALID_RM = INVALID + 'rounding mode',\n    DIV_BY_ZERO = NAME + 'Division by zero',\n\n    // The shared prototype object.\n    P = {},\n    UNDEFINED = void 0,\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n\n\n  /*\n   * Create and return a Big constructor.\n   *\n   */\n  function _Big_() {\n\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n      var x = this;\n\n      // Enable constructor usage without new.\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\n\n      // Duplicate.\n      if (n instanceof Big) {\n        x.s = n.s;\n        x.e = n.e;\n        x.c = n.c.slice();\n      } else {\n        parse(x, n);\n      }\n\n      /*\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n       * points to Object.\n       */\n      x.constructor = Big;\n    }\n\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n\n    return Big;\n  }\n\n\n  /*\n   * Parse the number or string value passed to a Big constructor.\n   *\n   * x {Big} A Big number instance.\n   * n {number|string} A numeric value.\n   */\n  function parse(x, n) {\n    var e, i, nl;\n\n    // Minus zero?\n    if (n === 0 && 1 / n < 0) n = '-0';\n    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\n\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\n\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +n.slice(i + 1);\n      n = n.substring(0, i);\n    } else if (e < 0) {\n\n      // Integer.\n      e = n.length;\n    }\n\n    nl = n.length;\n\n    // Determine leading zeros.\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n\n    if (i == nl) {\n\n      // Zero.\n      x.c = [x.e = 0];\n    } else {\n\n      // Determine trailing zeros.\n      for (; nl > 0 && n.charAt(--nl) == '0';);\n      x.e = e - i - 1;\n      x.c = [];\n\n      // Convert string to array of digits without leading/trailing zeros.\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n\n    return x;\n  }\n\n\n  /*\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\n   * Called by stringify, P.div, P.round and P.sqrt.\n   *\n   * x {Big} The Big to round.\n   * dp {number} Integer, 0 to MAX_DP inclusive.\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n   * [more] {boolean} Whether the result of division was truncated.\n   */\n  function round(x, dp, rm, more) {\n    var xc = x.c,\n      i = x.e + dp + 1;\n\n    if (i < xc.length) {\n      if (rm === 1) {\n\n        // xc[i] is the digit after the digit that may be rounded up.\n        more = xc[i] >= 5;\n      } else if (rm === 2) {\n        more = xc[i] > 5 || xc[i] == 5 &&\n          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n      } else if (rm === 3) {\n        more = more || !!xc[0];\n      } else {\n        more = false;\n        if (rm !== 0) throw Error(INVALID_RM);\n      }\n\n      if (i < 1) {\n        xc.length = 1;\n\n        if (more) {\n\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n          x.e = -dp;\n          xc[0] = 1;\n        } else {\n\n          // Zero.\n          xc[0] = x.e = 0;\n        }\n      } else {\n\n        // Remove any digits after the required decimal places.\n        xc.length = i--;\n\n        // Round up?\n        if (more) {\n\n          // Rounding up may mean the previous digit has to be rounded up.\n          for (; ++xc[i] > 9;) {\n            xc[i] = 0;\n            if (!i--) {\n              ++x.e;\n              xc.unshift(1);\n            }\n          }\n        }\n\n        // Remove trailing zeros.\n        for (i = xc.length; !xc[--i];) xc.pop();\n      }\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n      throw Error(INVALID_RM);\n    }\n\n    return x;\n  }\n\n\n  /*\n   * Return a string representing the value of Big x in normal or exponential notation.\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n   *\n   * x {Big}\n   * id? {number} Caller id.\n   *         1 toExponential\n   *         2 toFixed\n   *         3 toPrecision\n   *         4 valueOf\n   * n? {number|undefined} Caller's argument.\n   * k? {number|undefined}\n   */\n  function stringify(x, id, n, k) {\n    var e, s,\n      Big = x.constructor,\n      z = !x.c[0];\n\n    if (n !== UNDEFINED) {\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n      }\n\n      x = new Big(x);\n\n      // The index of the digit that may be rounded up.\n      n = k - x.e;\n\n      // Round?\n      if (x.c.length > ++k) round(x, n, Big.RM);\n\n      // toFixed: recalculate k as x.e may have changed if value rounded up.\n      if (id == 2) k = x.e + n + 1;\n\n      // Append zeros?\n      for (; x.c.length < k;) x.c.push(0);\n    }\n\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n\n    // Normal notation.\n    } else if (e < 0) {\n      for (; ++e;) s = '0' + s;\n      s = '0.' + s;\n    } else if (e > 0) {\n      if (++e > n) for (e -= n; e--;) s += '0';\n      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\n    } else if (n > 1) {\n      s = s.charAt(0) + '.' + s.slice(1);\n    }\n\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n  }\n\n\n  // Prototype/instance methods\n\n\n  /*\n   * Return a new Big whose value is the absolute value of this Big.\n   */\n  P.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n  };\n\n\n  /*\n   * Return 1 if the value of this Big is greater than the value of Big y,\n   *       -1 if the value of this Big is less than the value of Big y, or\n   *        0 if they have the same value.\n  */\n  P.cmp = function (y) {\n    var isneg,\n      x = this,\n      xc = x.c,\n      yc = (y = new x.constructor(y)).c,\n      i = x.s,\n      j = y.s,\n      k = x.e,\n      l = y.e;\n\n    // Either zero?\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\n\n    // Signs differ?\n    if (i != j) return i;\n\n    isneg = i < 0;\n\n    // Compare exponents.\n    if (k != l) return k > l ^ isneg ? 1 : -1;\n\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n\n    // Compare digit by digit.\n    for (i = -1; ++i < j;) {\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    }\n\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n   */\n  P.div = function (y) {\n    var x = this,\n      Big = x.constructor,\n      a = x.c,                  // dividend\n      b = (y = new Big(y)).c,   // divisor\n      k = x.s == y.s ? 1 : -1,\n      dp = Big.DP;\n\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\n\n    // Divisor is zero?\n    if (!b[0]) throw Error(DIV_BY_ZERO);\n\n    // Dividend is 0? Return +-0.\n    if (!a[0]) return new Big(k * 0);\n\n    var bl, bt, n, cmp, ri,\n      bz = b.slice(),\n      ai = bl = b.length,\n      al = a.length,\n      r = a.slice(0, bl),   // remainder\n      rl = r.length,\n      q = y,                // quotient\n      qc = q.c = [],\n      qi = 0,\n      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\n\n    q.s = k;\n    k = d < 0 ? 0 : d;\n\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;) r.push(0);\n\n    do {\n\n      // n is how many times the divisor goes into current remainder.\n      for (n = 0; n < 10; n++) {\n\n        // Compare divisor and remainder.\n        if (bl != (rl = r.length)) {\n          cmp = bl > rl ? 1 : -1;\n        } else {\n          for (ri = -1, cmp = 0; ++ri < bl;) {\n            if (b[ri] != r[ri]) {\n              cmp = b[ri] > r[ri] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        // If divisor < remainder, subtract divisor from remainder.\n        if (cmp < 0) {\n\n          // Remainder can't be more than 1 digit longer than divisor.\n          // Equalise lengths using divisor with extra leading zero?\n          for (bt = rl == bl ? b : bz; rl;) {\n            if (r[--rl] < bt[rl]) {\n              ri = rl;\n              for (; ri && !r[--ri];) r[ri] = 9;\n              --r[ri];\n              r[rl] += 10;\n            }\n            r[rl] -= bt[rl];\n          }\n\n          for (; !r[0];) r.shift();\n        } else {\n          break;\n        }\n      }\n\n      // Add the digit n to the result array.\n      qc[qi++] = cmp ? n : ++n;\n\n      // Update the remainder.\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\n      else r = [a[ai]];\n\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n\n      // There can't be more than one zero.\n      qc.shift();\n      q.e--;\n    }\n\n    // Round?\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\n\n    return q;\n  };\n\n\n  /*\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n   */\n  P.eq = function (y) {\n    return !this.cmp(y);\n  };\n\n\n  /*\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\n   * false.\n   */\n  P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n\n\n  /*\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n   * return false.\n   */\n  P.gte = function (y) {\n    return this.cmp(y) > -1;\n  };\n\n\n  /*\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n   */\n  P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n\n\n  /*\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n   * return false.\n   */\n  P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\n   */\n  P.minus = P.sub = function (y) {\n    var i, j, t, xlty,\n      x = this,\n      Big = x.constructor,\n      a = x.s,\n      b = (y = new Big(y)).s;\n\n    // Signs differ?\n    if (a != b) {\n      y.s = -b;\n      return x.plus(y);\n    }\n\n    var xc = x.c.slice(),\n      xe = x.e,\n      yc = y.c,\n      ye = y.e;\n\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n\n      // y is non-zero? x is non-zero? Or both are zero.\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n\n      if (xlty = a < 0) {\n        a = -a;\n        t = xc;\n      } else {\n        ye = xe;\n        t = yc;\n      }\n\n      t.reverse();\n      for (b = a; b--;) t.push(0);\n      t.reverse();\n    } else {\n\n      // Exponents equal. Check digit by digit.\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n\n      for (a = b = 0; b < j; b++) {\n        if (xc[b] != yc[b]) {\n          xlty = xc[b] < yc[b];\n          break;\n        }\n      }\n    }\n\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n      t = xc;\n      xc = yc;\n      yc = t;\n      y.s = -y.s;\n    }\n\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\n\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n      if (xc[--j] < yc[j]) {\n        for (i = j; i && !xc[--i];) xc[i] = 9;\n        --xc[i];\n        xc[j] += 10;\n      }\n\n      xc[j] -= yc[j];\n    }\n\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;) xc.pop();\n\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n      xc.shift();\n      --ye;\n    }\n\n    if (!xc[0]) {\n\n      // n - n = +0\n      y.s = 1;\n\n      // Result must be zero.\n      xc = [ye = 0];\n    }\n\n    y.c = xc;\n    y.e = ye;\n\n    return y;\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\n   */\n  P.mod = function (y) {\n    var ygtx,\n      x = this,\n      Big = x.constructor,\n      a = x.s,\n      b = (y = new Big(y)).s;\n\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\n\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n\n    if (ygtx) return new Big(x);\n\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n\n    return this.minus(x.times(y));\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\n   */\n  P.plus = P.add = function (y) {\n    var t,\n      x = this,\n      Big = x.constructor,\n      a = x.s,\n      b = (y = new Big(y)).s;\n\n    // Signs differ?\n    if (a != b) {\n      y.s = -b;\n      return x.minus(y);\n    }\n\n    var xe = x.e,\n      xc = x.c,\n      ye = y.e,\n      yc = y.c;\n\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n\n    xc = xc.slice();\n\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n      if (a > 0) {\n        ye = xe;\n        t = yc;\n      } else {\n        a = -a;\n        t = xc;\n      }\n\n      t.reverse();\n      for (; a--;) t.push(0);\n      t.reverse();\n    }\n\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n      t = yc;\n      yc = xc;\n      xc = t;\n    }\n\n    a = yc.length;\n\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n    if (b) {\n      xc.unshift(b);\n      ++ye;\n    }\n\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;) xc.pop();\n\n    y.c = xc;\n    y.e = ye;\n\n    return y;\n  };\n\n\n  /*\n   * Return a Big whose value is the value of this Big raised to the power n.\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\n   * mode Big.RM.\n   *\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n   */\n  P.pow = function (n) {\n    var x = this,\n      one = new x.constructor(1),\n      y = one,\n      isneg = n < 0;\n\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\n    if (isneg) n = -n;\n\n    for (;;) {\n      if (n & 1) y = y.times(x);\n      n >>= 1;\n      if (!n) break;\n      x = x.times(x);\n    }\n\n    return isneg ? one.div(y) : y;\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n   * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n   * multiple of 10**-dp.\n   * If dp is not specified, round to 0 decimal places.\n   * If rm is not specified, use Big.RM.\n   *\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n   */\n  P.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED) dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n  };\n\n\n  /*\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n   */\n  P.sqrt = function () {\n    var r, c, t,\n      x = this,\n      Big = x.constructor,\n      s = x.s,\n      e = x.e,\n      half = new Big(0.5);\n\n    // Zero?\n    if (!x.c[0]) return new Big(x);\n\n    // Negative?\n    if (s < 0) throw Error(NAME + 'No square root');\n\n    // Estimate.\n    s = Math.sqrt(x + '');\n\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n      c = x.c.join('');\n      if (!(c.length + e & 1)) c += '0';\n      s = Math.sqrt(c);\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n      r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    } else {\n      r = new Big(s);\n    }\n\n    e = r.e + (Big.DP += 4);\n\n    // Newton-Raphson iteration.\n    do {\n      t = r;\n      r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n\n    return round(r, Big.DP -= 4, Big.RM);\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big times the value of Big y.\n   */\n  P.times = P.mul = function (y) {\n    var c,\n      x = this,\n      Big = x.constructor,\n      xc = x.c,\n      yc = (y = new Big(y)).c,\n      a = xc.length,\n      b = yc.length,\n      i = x.e,\n      j = y.e;\n\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\n\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n      c = xc;\n      xc = yc;\n      yc = c;\n      j = a;\n      a = b;\n      b = j;\n    }\n\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\n\n    // Multiply.\n\n    // i is initially xc.length.\n    for (i = b; i--;) {\n      b = 0;\n\n      // a is yc.length.\n      for (j = a + i; j > i;) {\n\n        // Current sum of products at this digit position, plus carry.\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\n        c[j--] = b % 10;\n\n        // carry\n        b = b / 10 | 0;\n      }\n\n      c[j] = (c[j] + b) % 10;\n    }\n\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b) ++y.e;\n    else c.shift();\n\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];) c.pop();\n    y.c = c;\n\n    return y;\n  };\n\n\n  /*\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n   * places and rounded using Big.RM.\n   *\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\n   */\n  P.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n  };\n\n\n  /*\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\n   * places and rounded using Big.RM.\n   *\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\n   *\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n   */\n  P.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n  };\n\n\n  /*\n   * Return a string representing the value of this Big rounded to sd significant digits using\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n   * the integer part of the value in normal notation.\n   *\n   * sd {number} Integer, 1 to MAX_DP inclusive.\n   */\n  P.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n  };\n\n\n  /*\n   * Return a string representing the value of this Big.\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\n   * Omit the sign for negative zero.\n   */\n  P.toString = function () {\n    return stringify(this);\n  };\n\n\n  /*\n   * Return a string representing the value of this Big.\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\n   * Include the sign for negative zero.\n   */\n  P.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n  };\n\n\n  // Export\n\n\n  Big = _Big_();\n\n  Big['default'] = Big.Big = Big;\n\n  //AMD.\n  if (typeof define === 'function' && define.amd) {\n    define(function () { return Big; });\n\n  // Node and other CommonJS-like environments that support module.exports.\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Big;\n\n  //Browser.\n  } else {\n    GLOBAL.Big = Big;\n  }\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}