{"ast":null,"code":"import { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { injected } from '../connectors';\nimport { NetworkContextName } from '../constants';\nexport function useActiveWeb3React() {\n  const context = useWeb3ReactCore();\n  const contextNetwork = useWeb3ReactCore(NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\nexport function useEagerConnect() {\n  const {\n    activate,\n    active\n  } = useWeb3ReactCore(); // specifically using useWeb3ReactCore because of what this hook does\n\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true);\n          });\n        } else {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\n\nexport function useInactiveListener() {\n  let suppress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3ReactCore(); // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(error => {\n          console.error('Failed to activate after chain changed', error);\n        });\n      };\n\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(error => {\n            console.error('Failed to activate after accounts changed', error);\n          });\n        }\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }\n\n    return undefined;\n  }, [active, error, suppress, activate]);\n}","map":{"version":3,"names":["useWeb3React","useWeb3ReactCore","useEffect","useState","isMobile","injected","NetworkContextName","useActiveWeb3React","context","contextNetwork","active","useEagerConnect","activate","tried","setTried","isAuthorized","then","undefined","catch","window","ethereum","useInactiveListener","suppress","error","on","handleChainChanged","console","handleAccountsChanged","accounts","length","removeListener"],"sources":["/Users/vaibhav/Desktop/Home/Blockchain Boutique/Uniswap_forked_gaura/src/hooks/index.ts"],"sourcesContent":["import { Web3Provider } from '@ethersproject/providers';\nimport { ChainId } from '@uniswap/sdk';\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types';\nimport { useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { injected } from '../connectors';\nimport { NetworkContextName } from '../constants';\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3ReactCore<Web3Provider>();\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3ReactCore(); // specifically using useWeb3ReactCore because of what this hook does\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true);\n          });\n        } else {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n\n  return tried;\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3ReactCore(); // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch((error) => {\n          console.error('Failed to activate after chain changed', error);\n        });\n      };\n\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch((error) => {\n            console.error('Failed to activate after accounts changed', error);\n          });\n        }\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }\n    return undefined;\n  }, [active, error, suppress, activate]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}